import { q as CreateRibbonRequest$1, r as CreateRibbonResponse$1, s as GetRibbonRequest$1, t as GetRibbonResponse$1, u as UpdateRibbonRequest$1, v as UpdateRibbonResponse$1, D as DeleteRibbonRequest$1, w as DeleteRibbonResponse$1, x as QueryRibbonsRequest$1, J as QueryRibbonsResponse$1, N as BulkCreateRibbonsRequest$1, c as BulkCreateRibbonsResponse$1, Y as BulkUpdateRibbonsRequest$1, e as BulkUpdateRibbonsResponse$1, Z as GetOrCreateRibbonRequest$1, g as GetOrCreateRibbonResponse$1, _ as BulkGetOrCreateRibbonsRequest$1, i as BulkGetOrCreateRibbonsResponse$1, $ as BulkDeleteRibbonsRequest$1, j as BulkDeleteRibbonsResponse$1 } from './stores-catalog-v3-ribbon-ribbons-v-3.universal-DWKP9-aP.mjs';

/** A Ribbon is a visual element that you can assign to products to highlight them on your site. */
interface Ribbon {
    /**
     * Ribbon ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Ribbon name.
     * @minLength 1
     * @maxLength 30
     */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
interface CreateRibbonRequest {
    /** Ribbon to create. */
    ribbon: Ribbon;
}
interface CreateRibbonResponse {
    /** Created ribbon. */
    ribbon?: Ribbon;
}
interface GetRibbonRequest {
    /**
     * Ribbon ID.
     * @format GUID
     */
    ribbonId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCT_COUNT = "ASSIGNED_PRODUCT_COUNT"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'ASSIGNED_PRODUCT_COUNT';
interface GetRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
interface UpdateRibbonRequest {
    /** Ribbon to update. */
    ribbon: Ribbon;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface UpdateRibbonResponse {
    /** Updated Ribbon. */
    ribbon?: Ribbon;
}
interface DeleteRibbonRequest {
    /**
     * Ribbon ID.
     * @format GUID
     */
    ribbonId: string;
}
interface DeleteRibbonResponse {
}
interface QueryRibbonsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 4
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryRibbonsResponse {
    /**
     * List of ribbons.
     * @minSize 1
     * @maxSize 100
     */
    ribbons?: Ribbon[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface BulkCreateRibbonsRequest {
    /**
     * Ribbons to create.
     * @minSize 1
     * @maxSize 100
     */
    ribbons: Ribbon[];
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateRibbonsResponse {
    /**
     * Ribbons created by bulk action.
     * @maxSize 100
     */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
    /**
     * Full ribbon entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Ribbon;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @format GUID
     */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateRibbonsRequest {
    /**
     * List of ribbons to update.
     * @minSize 1
     * @maxSize 100
     */
    ribbons: MaskedRibbon[];
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface MaskedRibbon {
    /** Ribbon to update. */
    ribbon?: Ribbon;
    /** Explicit list of fields to update. */
    fieldMask?: string[];
}
interface BulkUpdateRibbonsResponse {
    /**
     * Ribbons updated by bulk action.
     * @maxSize 100
     */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface GetOrCreateRibbonRequest {
    /**
     * Ribbon name to retrieve or create.
     * @minLength 1
     * @maxLength 30
     */
    ribbonName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface GetOrCreateRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
interface BulkGetOrCreateRibbonsRequest {
    /**
     * Ribbon names to retrieve or create.
     * @minLength 1
     * @maxLength 30
     * @minSize 1
     * @maxSize 100
     */
    ribbonNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface BulkGetOrCreateRibbonsResponse {
    /**
     * Ribbons retrieved or created by bulk action.
     * @maxSize 100
     */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteRibbonsRequest {
    /**
     * IDs of ribbons to delete.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    ribbonIds: string[];
}
interface BulkDeleteRibbonsResponse {
    /**
     * Ribbons deleted by bulk action.
     * @maxSize 100
     */
    results?: BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createRibbon(): __PublicMethodMetaInfo<'POST', {}, CreateRibbonRequest$1, CreateRibbonRequest, CreateRibbonResponse$1, CreateRibbonResponse>;
declare function getRibbon(): __PublicMethodMetaInfo<'GET', {
    ribbonId: string;
}, GetRibbonRequest$1, GetRibbonRequest, GetRibbonResponse$1, GetRibbonResponse>;
declare function updateRibbon(): __PublicMethodMetaInfo<'PATCH', {
    ribbonId: string;
}, UpdateRibbonRequest$1, UpdateRibbonRequest, UpdateRibbonResponse$1, UpdateRibbonResponse>;
declare function deleteRibbon(): __PublicMethodMetaInfo<'DELETE', {
    ribbonId: string;
}, DeleteRibbonRequest$1, DeleteRibbonRequest, DeleteRibbonResponse$1, DeleteRibbonResponse>;
declare function queryRibbons(): __PublicMethodMetaInfo<'POST', {}, QueryRibbonsRequest$1, QueryRibbonsRequest, QueryRibbonsResponse$1, QueryRibbonsResponse>;
declare function bulkCreateRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkCreateRibbonsRequest$1, BulkCreateRibbonsRequest, BulkCreateRibbonsResponse$1, BulkCreateRibbonsResponse>;
declare function bulkUpdateRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateRibbonsRequest$1, BulkUpdateRibbonsRequest, BulkUpdateRibbonsResponse$1, BulkUpdateRibbonsResponse>;
declare function getOrCreateRibbon(): __PublicMethodMetaInfo<'POST', {}, GetOrCreateRibbonRequest$1, GetOrCreateRibbonRequest, GetOrCreateRibbonResponse$1, GetOrCreateRibbonResponse>;
declare function bulkGetOrCreateRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkGetOrCreateRibbonsRequest$1, BulkGetOrCreateRibbonsRequest, BulkGetOrCreateRibbonsResponse$1, BulkGetOrCreateRibbonsResponse>;
declare function bulkDeleteRibbons(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteRibbonsRequest$1, BulkDeleteRibbonsRequest, BulkDeleteRibbonsResponse$1, BulkDeleteRibbonsResponse>;

export { type __PublicMethodMetaInfo, bulkCreateRibbons, bulkDeleteRibbons, bulkGetOrCreateRibbons, bulkUpdateRibbons, createRibbon, deleteRibbon, getOrCreateRibbon, getRibbon, queryRibbons, updateRibbon };
