import { HttpClient, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { R as Ribbon, G as GetRibbonOptions, U as UpdateRibbon, a as UpdateRibbonOptions, Q as QueryRibbonsOptions, b as RibbonsQueryBuilder, B as BulkCreateRibbonsOptions, c as BulkCreateRibbonsResponse, M as MaskedRibbon, d as BulkUpdateRibbonsOptions, e as BulkUpdateRibbonsResponse, f as GetOrCreateRibbonOptions, g as GetOrCreateRibbonResponse, h as BulkGetOrCreateRibbonsOptions, i as BulkGetOrCreateRibbonsResponse, j as BulkDeleteRibbonsResponse, k as RibbonCreatedEnvelope, l as RibbonDeletedEnvelope, m as RibbonUpdatedEnvelope } from './stores-catalog-v3-ribbon-ribbons-v-3.universal-DWKP9-aP.mjs';
export { a7 as ActionEvent, A as App, T as ApplicationError, ac as BaseEventMetadata, X as BulkActionMetadata, N as BulkCreateRibbonsRequest, $ as BulkDeleteRibbonsRequest, _ as BulkGetOrCreateRibbonsRequest, a0 as BulkRibbonResult, Y as BulkUpdateRibbonsRequest, q as CreateRibbonRequest, r as CreateRibbonResponse, H as CursorPaging, K as CursorPagingMetadata, y as CursorQuery, z as CursorQueryPagingMethodOneOf, L as Cursors, C as CustomTag, D as DeleteRibbonRequest, w as DeleteRibbonResponse, a1 as DomainEvent, a2 as DomainEventBodyOneOf, a8 as Empty, a3 as EntityCreatedEvent, a6 as EntityDeletedEvent, a5 as EntityUpdatedEvent, ad as EventMetadata, F as File, Z as GetOrCreateRibbonRequest, s as GetRibbonRequest, t as GetRibbonResponse, aa as IdentificationData, ab as IdentificationDataIdOneOf, I as InvalidateCache, o as InvalidateCacheGetByOneOf, O as ItemMetadata, a9 as MessageEnvelope, P as Page, x as QueryRibbonsRequest, J as QueryRibbonsResponse, n as RequestedFields, a4 as RestoreInfo, ae as RibbonsQueryResult, S as SortOrder, E as Sorting, p as URI, u as UpdateRibbonRequest, v as UpdateRibbonResponse, V as V3BulkRibbonResult, W as WebhookIdentityType } from './stores-catalog-v3-ribbon-ribbons-v-3.universal-DWKP9-aP.mjs';

declare function createRibbon$1(httpClient: HttpClient): CreateRibbonSignature;
interface CreateRibbonSignature {
    /**
     * Creates a ribbon.
     *
     * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Ribbon to create.
     * @returns Created ribbon.
     */
    (ribbon: Ribbon): Promise<Ribbon>;
}
declare function getRibbon$1(httpClient: HttpClient): GetRibbonSignature;
interface GetRibbonSignature {
    /**
     * Retrieves a ribbon.
     * @param - Ribbon ID.
     * @returns Ribbon.
     */
    (ribbonId: string, options?: GetRibbonOptions | undefined): Promise<Ribbon>;
}
declare function updateRibbon$1(httpClient: HttpClient): UpdateRibbonSignature;
interface UpdateRibbonSignature {
    /**
     * Updates a ribbon.
     *
     *
     * Each time the ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - Ribbon ID.
     * @returns Updated Ribbon.
     */
    (_id: string, ribbon: UpdateRibbon, options?: UpdateRibbonOptions | undefined): Promise<Ribbon>;
}
declare function deleteRibbon$1(httpClient: HttpClient): DeleteRibbonSignature;
interface DeleteRibbonSignature {
    /**
     * Deletes a ribbon.
     *
     *
     * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.
     * @param - Ribbon ID.
     */
    (ribbonId: string): Promise<void>;
}
declare function queryRibbons$1(httpClient: HttpClient): QueryRibbonsSignature;
interface QueryRibbonsSignature {
    /**
     * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryRibbonsOptions | undefined): RibbonsQueryBuilder;
}
declare function bulkCreateRibbons$1(httpClient: HttpClient): BulkCreateRibbonsSignature;
interface BulkCreateRibbonsSignature {
    /**
     * Creates multiple ribbons.
     * @param - Ribbons to create.
     */
    (ribbons: Ribbon[], options?: BulkCreateRibbonsOptions | undefined): Promise<BulkCreateRibbonsResponse>;
}
declare function bulkUpdateRibbons$1(httpClient: HttpClient): BulkUpdateRibbonsSignature;
interface BulkUpdateRibbonsSignature {
    /**
     * Updates multiple ribbons.
     *
     * Each time a ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - List of ribbons to update.
     */
    (ribbons: MaskedRibbon[], options?: BulkUpdateRibbonsOptions | undefined): Promise<BulkUpdateRibbonsResponse>;
}
declare function getOrCreateRibbon$1(httpClient: HttpClient): GetOrCreateRibbonSignature;
interface GetOrCreateRibbonSignature {
    /**
     * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.
     * @param - Ribbon name to retrieve or create.
     */
    (ribbonName: string, options?: GetOrCreateRibbonOptions | undefined): Promise<GetOrCreateRibbonResponse>;
}
declare function bulkGetOrCreateRibbons$1(httpClient: HttpClient): BulkGetOrCreateRibbonsSignature;
interface BulkGetOrCreateRibbonsSignature {
    /**
     * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.
     * @param - Ribbon names to retrieve or create.
     */
    (ribbonNames: string[], options?: BulkGetOrCreateRibbonsOptions | undefined): Promise<BulkGetOrCreateRibbonsResponse>;
}
declare function bulkDeleteRibbons$1(httpClient: HttpClient): BulkDeleteRibbonsSignature;
interface BulkDeleteRibbonsSignature {
    /**
     * Deletes multiple ribbons.
     * @param - IDs of ribbons to delete.
     */
    (ribbonIds: string[]): Promise<BulkDeleteRibbonsResponse>;
}
declare const onRibbonCreated$1: EventDefinition<RibbonCreatedEnvelope, "wix.stores.catalog.v3.ribbon_created">;
declare const onRibbonDeleted$1: EventDefinition<RibbonDeletedEnvelope, "wix.stores.catalog.v3.ribbon_deleted">;
declare const onRibbonUpdated$1: EventDefinition<RibbonUpdatedEnvelope, "wix.stores.catalog.v3.ribbon_updated">;

declare const createRibbon: MaybeContext<BuildRESTFunction<typeof createRibbon$1> & typeof createRibbon$1>;
declare const getRibbon: MaybeContext<BuildRESTFunction<typeof getRibbon$1> & typeof getRibbon$1>;
declare const updateRibbon: MaybeContext<BuildRESTFunction<typeof updateRibbon$1> & typeof updateRibbon$1>;
declare const deleteRibbon: MaybeContext<BuildRESTFunction<typeof deleteRibbon$1> & typeof deleteRibbon$1>;
declare const queryRibbons: MaybeContext<BuildRESTFunction<typeof queryRibbons$1> & typeof queryRibbons$1>;
declare const bulkCreateRibbons: MaybeContext<BuildRESTFunction<typeof bulkCreateRibbons$1> & typeof bulkCreateRibbons$1>;
declare const bulkUpdateRibbons: MaybeContext<BuildRESTFunction<typeof bulkUpdateRibbons$1> & typeof bulkUpdateRibbons$1>;
declare const getOrCreateRibbon: MaybeContext<BuildRESTFunction<typeof getOrCreateRibbon$1> & typeof getOrCreateRibbon$1>;
declare const bulkGetOrCreateRibbons: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateRibbons$1> & typeof bulkGetOrCreateRibbons$1>;
declare const bulkDeleteRibbons: MaybeContext<BuildRESTFunction<typeof bulkDeleteRibbons$1> & typeof bulkDeleteRibbons$1>;
/** */
declare const onRibbonCreated: BuildEventDefinition<typeof onRibbonCreated$1>;
/** */
declare const onRibbonDeleted: BuildEventDefinition<typeof onRibbonDeleted$1>;
/** */
declare const onRibbonUpdated: BuildEventDefinition<typeof onRibbonUpdated$1>;

export { BulkCreateRibbonsOptions, BulkCreateRibbonsResponse, BulkDeleteRibbonsResponse, BulkGetOrCreateRibbonsOptions, BulkGetOrCreateRibbonsResponse, BulkUpdateRibbonsOptions, BulkUpdateRibbonsResponse, GetOrCreateRibbonOptions, GetOrCreateRibbonResponse, GetRibbonOptions, MaskedRibbon, QueryRibbonsOptions, Ribbon, RibbonCreatedEnvelope, RibbonDeletedEnvelope, RibbonUpdatedEnvelope, RibbonsQueryBuilder, UpdateRibbon, UpdateRibbonOptions, bulkCreateRibbons, bulkDeleteRibbons, bulkGetOrCreateRibbons, bulkUpdateRibbons, createRibbon, deleteRibbon, getOrCreateRibbon, getRibbon, onRibbonCreated, onRibbonDeleted, onRibbonUpdated, queryRibbons, updateRibbon };
