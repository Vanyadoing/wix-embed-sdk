"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  RequestedFields: () => RequestedFields,
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  bulkCreateRibbons: () => bulkCreateRibbons4,
  bulkDeleteRibbons: () => bulkDeleteRibbons4,
  bulkGetOrCreateRibbons: () => bulkGetOrCreateRibbons4,
  bulkUpdateRibbons: () => bulkUpdateRibbons4,
  createRibbon: () => createRibbon4,
  deleteRibbon: () => deleteRibbon4,
  getOrCreateRibbon: () => getOrCreateRibbon4,
  getRibbon: () => getRibbon4,
  onRibbonCreated: () => onRibbonCreated2,
  onRibbonDeleted: () => onRibbonDeleted2,
  onRibbonUpdated: () => onRibbonUpdated2,
  queryRibbons: () => queryRibbons4,
  updateRibbon: () => updateRibbon4
});
module.exports = __toCommonJS(index_exports);

// src/stores-catalog-v3-ribbon-ribbons-v-3.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/stores-catalog-v3-ribbon-ribbons-v-3.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/stores-catalog-v3-ribbon-ribbons-v-3.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixStoresCatalogRibbonV3RibbonServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/ribbon",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/ribbons",
        destPath: "/v3/ribbons"
      },
      {
        srcPath: "/stores/v3/bulk/ribbons",
        destPath: "/v3/bulk/ribbons"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/ribbon",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_ribbons-v-3";
function createRibbon(payload) {
  function __createRibbon({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ribbon.createdDate" }, { path: "ribbon.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.CreateRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createRibbon;
}
function getRibbon(payload) {
  function __getRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "GET",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.GetRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/{ribbonId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getRibbon;
}
function updateRibbon(payload) {
  function __updateRibbon({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "ribbon.createdDate" }, { path: "ribbon.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "PATCH",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.UpdateRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/{ribbon.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateRibbon;
}
function deleteRibbon(payload) {
  function __deleteRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "DELETE",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.DeleteRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/{ribbonId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteRibbon;
}
function queryRibbons(payload) {
  function __queryRibbons({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.QueryRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbons.createdDate" },
            { path: "ribbons.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryRibbons;
}
function bulkCreateRibbons(payload) {
  function __bulkCreateRibbons({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "ribbons.createdDate" },
          { path: "ribbons.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkCreateRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateRibbons;
}
function bulkUpdateRibbons(payload) {
  function __bulkUpdateRibbons({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "ribbons.fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "ribbons.ribbon.createdDate" },
          { path: "ribbons.ribbon.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkUpdateRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateRibbons;
}
function getOrCreateRibbon(payload) {
  function __getOrCreateRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.GetOrCreateRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/ribbons/get-or-create",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "ribbon.createdDate" },
            { path: "ribbon.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrCreateRibbon;
}
function bulkGetOrCreateRibbons(payload) {
  function __bulkGetOrCreateRibbons({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkGetOrCreateRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/get-or-create",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkGetOrCreateRibbons;
}
function bulkDeleteRibbons(payload) {
  function __bulkDeleteRibbons({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.ribbon",
      method: "POST",
      methodFqn: "wix.stores.catalog.ribbon.v3.RibbonService.BulkDeleteRibbons",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogRibbonV3RibbonServiceUrl({
        protoPath: "/v3/bulk/ribbons/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteRibbons;
}

// src/stores-catalog-v3-ribbon-ribbons-v-3.universal.ts
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var RequestedFields = /* @__PURE__ */ ((RequestedFields2) => {
  RequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  RequestedFields2["ASSIGNED_PRODUCT_COUNT"] = "ASSIGNED_PRODUCT_COUNT";
  return RequestedFields2;
})(RequestedFields || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createRibbon2(ribbon) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ ribbon });
  const reqOpts = createRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.ribbon;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbon: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ribbon"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getRibbon2(ribbonId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbonId,
    fields: options?.fields
  });
  const reqOpts = getRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.ribbon;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonId: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["ribbonId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateRibbon2(_id, ribbon, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbon: { ...ribbon, id: _id },
    fields: options?.fields
  });
  const reqOpts = updateRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.ribbon;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { ribbon: "$[1]" },
        explicitPathsToArguments: {
          "ribbon.id": "$[0]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "ribbon", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteRibbon2(ribbonId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ ribbonId });
  const reqOpts = deleteRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ribbonId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryRibbons2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryRibbons({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.ribbons,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function bulkCreateRibbons2(ribbons, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbons,
    returnEntity: options?.returnEntity
  });
  const reqOpts = bulkCreateRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ribbons: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["ribbons", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateRibbons2(ribbons, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbons,
    returnEntity: options?.returnEntity,
    fields: options?.fields
  });
  const reqOpts = bulkUpdateRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ribbons: "$[0]",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["ribbons", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrCreateRibbon2(ribbonName, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbonName,
    fields: options?.fields
  });
  const reqOpts = getOrCreateRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonName: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["ribbonName", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkGetOrCreateRibbons2(ribbonNames, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbonNames,
    fields: options?.fields
  });
  const reqOpts = bulkGetOrCreateRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          ribbonNames: "$[0]",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["ribbonNames", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteRibbons2(ribbonIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    ribbonIds
  });
  const reqOpts = bulkDeleteRibbons(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ribbonIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ribbonIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v3-ribbon-ribbons-v-3.public.ts
function createRibbon3(httpClient) {
  return (ribbon) => createRibbon2(
    ribbon,
    // @ts-ignore
    { httpClient }
  );
}
function getRibbon3(httpClient) {
  return (ribbonId, options) => getRibbon2(
    ribbonId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateRibbon3(httpClient) {
  return (_id, ribbon, options) => updateRibbon2(
    _id,
    ribbon,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteRibbon3(httpClient) {
  return (ribbonId) => deleteRibbon2(
    ribbonId,
    // @ts-ignore
    { httpClient }
  );
}
function queryRibbons3(httpClient) {
  return (options) => queryRibbons2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreateRibbons3(httpClient) {
  return (ribbons, options) => bulkCreateRibbons2(
    ribbons,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateRibbons3(httpClient) {
  return (ribbons, options) => bulkUpdateRibbons2(
    ribbons,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getOrCreateRibbon3(httpClient) {
  return (ribbonName, options) => getOrCreateRibbon2(
    ribbonName,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkGetOrCreateRibbons3(httpClient) {
  return (ribbonNames, options) => bulkGetOrCreateRibbons2(
    ribbonNames,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteRibbons3(httpClient) {
  return (ribbonIds) => bulkDeleteRibbons2(
    ribbonIds,
    // @ts-ignore
    { httpClient }
  );
}
var onRibbonCreated = (0, import_sdk_types.EventDefinition)(
  "wix.stores.catalog.v3.ribbon_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onRibbonDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.stores.catalog.v3.ribbon_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onRibbonUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.stores.catalog.v3.ribbon_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/stores-catalog-v3-ribbon-ribbons-v-3.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createRibbon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createRibbon3);
var getRibbon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getRibbon3);
var updateRibbon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateRibbon3);
var deleteRibbon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteRibbon3);
var queryRibbons4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryRibbons3);
var bulkCreateRibbons4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkCreateRibbons3);
var bulkUpdateRibbons4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkUpdateRibbons3);
var getOrCreateRibbon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getOrCreateRibbon3);
var bulkGetOrCreateRibbons4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkGetOrCreateRibbons3);
var bulkDeleteRibbons4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkDeleteRibbons3);
var onRibbonCreated2 = (0, import_event_definition_modules.createEventModule)(onRibbonCreated);
var onRibbonDeleted2 = (0, import_event_definition_modules.createEventModule)(onRibbonDeleted);
var onRibbonUpdated2 = (0, import_event_definition_modules.createEventModule)(onRibbonUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RequestedFields,
  SortOrder,
  WebhookIdentityType,
  bulkCreateRibbons,
  bulkDeleteRibbons,
  bulkGetOrCreateRibbons,
  bulkUpdateRibbons,
  createRibbon,
  deleteRibbon,
  getOrCreateRibbon,
  getRibbon,
  onRibbonCreated,
  onRibbonDeleted,
  onRibbonUpdated,
  queryRibbons,
  updateRibbon
});
//# sourceMappingURL=index.js.map