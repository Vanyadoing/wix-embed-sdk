{"version":3,"sources":["../../../index.ts","../../../src/stores-catalog-v3-provision-catalog-versioning.universal.ts","../../../src/stores-catalog-v3-provision-catalog-versioning.http.ts","../../../src/stores-catalog-v3-provision-catalog-versioning.public.ts","../../../src/stores-catalog-v3-provision-catalog-versioning.context.ts"],"sourcesContent":["export * from './src/stores-catalog-v3-provision-catalog-versioning.context.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixStoresCatalogV3Provision from './stores-catalog-v3-provision-catalog-versioning.http.js';\n\nexport interface Provision {\n  /**\n   * Provision ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n}\n\nexport interface DefaultDeliveryProfileSetup {\n  /**\n   * metasite id of site\n   * @format GUID\n   */\n  metaSiteId?: string | null;\n}\n\nexport interface StoresV3CatalogProvisioned {\n  /**\n   * instance id of stores app (AppDefId: 215238eb-22a5-4c36-9e7b-e7c08025e04e)\n   * @format GUID\n   */\n  storeId?: string;\n  /**\n   * instance id of the store to be cloned from\n   * @format GUID\n   */\n  originStoreId?: string;\n}\n\nexport interface GetCatalogVersionRequest {}\n\nexport interface GetCatalogVersionResponse {\n  /** The version of Stores Catalog installed on a site. */\n  catalogVersion?: VersionWithLiterals;\n}\n\nexport enum Version {\n  /** Version 1 of the catalog. */\n  V1_CATALOG = 'V1_CATALOG',\n  /** Version 3 of the catalog. */\n  V3_CATALOG = 'V3_CATALOG',\n  /** Stores app is not installed. */\n  STORES_NOT_INSTALLED = 'STORES_NOT_INSTALLED',\n}\n\n/** @enumType */\nexport type VersionWithLiterals =\n  | Version\n  | 'V1_CATALOG'\n  | 'V3_CATALOG'\n  | 'STORES_NOT_INSTALLED';\n\nexport interface InstallBassAppDependencyRequest {}\n\nexport interface InstallBassAppDependencyResponse {}\n\nexport interface MetaSiteSpecialEvent extends MetaSiteSpecialEventPayloadOneOf {\n  /** Emitted on a meta site creation. */\n  siteCreated?: SiteCreated;\n  /** Emitted on a meta site transfer completion. */\n  siteTransferred?: SiteTransferred;\n  /** Emitted on a meta site deletion. */\n  siteDeleted?: SiteDeleted;\n  /** Emitted on a meta site restoration. */\n  siteUndeleted?: SiteUndeleted;\n  /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */\n  sitePublished?: SitePublished;\n  /** Emitted on a meta site unpublish. */\n  siteUnpublished?: SiteUnpublished;\n  /** Emitted when meta site is marked as template. */\n  siteMarkedAsTemplate?: SiteMarkedAsTemplate;\n  /** Emitted when meta site is marked as a WixSite. */\n  siteMarkedAsWixSite?: SiteMarkedAsWixSite;\n  /** Emitted when an application is provisioned (installed). */\n  serviceProvisioned?: ServiceProvisioned;\n  /** Emitted when an application is removed (uninstalled). */\n  serviceRemoved?: ServiceRemoved;\n  /** Emitted when meta site name (URL slug) is changed. */\n  siteRenamedPayload?: SiteRenamed;\n  /** Emitted when meta site was permanently deleted. */\n  hardDeleted?: SiteHardDeleted;\n  /** Emitted on a namespace change. */\n  namespaceChanged?: NamespaceChanged;\n  /** Emitted when Studio is attached. */\n  studioAssigned?: StudioAssigned;\n  /** Emitted when Studio is detached. */\n  studioUnassigned?: StudioUnassigned;\n  /**\n   * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch\n   * the actual URL.\n   *\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459\n   */\n  urlChanged?: SiteUrlChanged;\n  /** Site is marked as PurgedExternally */\n  sitePurgedExternally?: SitePurgedExternally;\n  /** Emitted when Odeditor is attached. */\n  odeditorAssigned?: OdeditorAssigned;\n  /** Emitted when Odeditor is detached. */\n  odeditorUnassigned?: OdeditorUnassigned;\n  /** Emitted when Picasso is attached. */\n  picassoAssigned?: PicassoAssigned;\n  /** Emitted when Picasso is detached. */\n  picassoUnassigned?: PicassoUnassigned;\n  /**\n   * A meta site id.\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /** A meta site version. Monotonically increasing. */\n  version?: string;\n  /** A timestamp of the event. */\n  timestamp?: string;\n  /**\n   * TODO(meta-site): Change validation once validations are disabled for consumers\n   * More context: https://wix.slack.com/archives/C0UHEBPFT/p1720957844413149 and https://wix.slack.com/archives/CFWKX325T/p1728892152855659\n   * @maxSize 4000\n   */\n  assets?: Asset[];\n}\n\n/** @oneof */\nexport interface MetaSiteSpecialEventPayloadOneOf {\n  /** Emitted on a meta site creation. */\n  siteCreated?: SiteCreated;\n  /** Emitted on a meta site transfer completion. */\n  siteTransferred?: SiteTransferred;\n  /** Emitted on a meta site deletion. */\n  siteDeleted?: SiteDeleted;\n  /** Emitted on a meta site restoration. */\n  siteUndeleted?: SiteUndeleted;\n  /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */\n  sitePublished?: SitePublished;\n  /** Emitted on a meta site unpublish. */\n  siteUnpublished?: SiteUnpublished;\n  /** Emitted when meta site is marked as template. */\n  siteMarkedAsTemplate?: SiteMarkedAsTemplate;\n  /** Emitted when meta site is marked as a WixSite. */\n  siteMarkedAsWixSite?: SiteMarkedAsWixSite;\n  /** Emitted when an application is provisioned (installed). */\n  serviceProvisioned?: ServiceProvisioned;\n  /** Emitted when an application is removed (uninstalled). */\n  serviceRemoved?: ServiceRemoved;\n  /** Emitted when meta site name (URL slug) is changed. */\n  siteRenamedPayload?: SiteRenamed;\n  /** Emitted when meta site was permanently deleted. */\n  hardDeleted?: SiteHardDeleted;\n  /** Emitted on a namespace change. */\n  namespaceChanged?: NamespaceChanged;\n  /** Emitted when Studio is attached. */\n  studioAssigned?: StudioAssigned;\n  /** Emitted when Studio is detached. */\n  studioUnassigned?: StudioUnassigned;\n  /**\n   * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch\n   * the actual URL.\n   *\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459\n   */\n  urlChanged?: SiteUrlChanged;\n  /** Site is marked as PurgedExternally */\n  sitePurgedExternally?: SitePurgedExternally;\n  /** Emitted when Odeditor is attached. */\n  odeditorAssigned?: OdeditorAssigned;\n  /** Emitted when Odeditor is detached. */\n  odeditorUnassigned?: OdeditorUnassigned;\n  /** Emitted when Picasso is attached. */\n  picassoAssigned?: PicassoAssigned;\n  /** Emitted when Picasso is detached. */\n  picassoUnassigned?: PicassoUnassigned;\n}\n\nexport interface Asset {\n  /**\n   * An application definition id (app_id in dev-center). For legacy reasons may be UUID or a string (from Java Enum).\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * An instance id. For legacy reasons may be UUID or a string.\n   * @maxLength 200\n   */\n  instanceId?: string;\n  /** An application state. */\n  state?: StateWithLiterals;\n}\n\nexport enum State {\n  UNKNOWN = 'UNKNOWN',\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n  PENDING = 'PENDING',\n  DEMO = 'DEMO',\n}\n\n/** @enumType */\nexport type StateWithLiterals =\n  | State\n  | 'UNKNOWN'\n  | 'ENABLED'\n  | 'DISABLED'\n  | 'PENDING'\n  | 'DEMO';\n\nexport interface SiteCreated {\n  /**\n   * A template identifier (empty if not created from a template).\n   * @maxLength 36\n   */\n  originTemplateId?: string;\n  /**\n   * An account id of the owner.\n   * @format GUID\n   */\n  ownerId?: string;\n  /** A context in which meta site was created. */\n  context?: SiteCreatedContextWithLiterals;\n  /**\n   * A meta site id from which this site was created.\n   *\n   * In case of a creation from a template it's a template id.\n   * In case of a site duplication (\"Save As\" in dashboard or duplicate in UM) it's an id of a source site.\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n  /**\n   * A meta site name (URL slug).\n   * @maxLength 20\n   */\n  siteName?: string;\n  /** A namespace. */\n  namespace?: NamespaceWithLiterals;\n}\n\nexport enum SiteCreatedContext {\n  /** A valid option, we don't expose all reasons why site might be created. */\n  OTHER = 'OTHER',\n  /** A meta site was created from template. */\n  FROM_TEMPLATE = 'FROM_TEMPLATE',\n  /** A meta site was created by copying of the transfferred meta site. */\n  DUPLICATE_BY_SITE_TRANSFER = 'DUPLICATE_BY_SITE_TRANSFER',\n  /** A copy of existing meta site. */\n  DUPLICATE = 'DUPLICATE',\n  /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */\n  OLD_SITE_TRANSFER = 'OLD_SITE_TRANSFER',\n  /** deprecated A meta site was created for Flash editor. */\n  FLASH = 'FLASH',\n}\n\n/** @enumType */\nexport type SiteCreatedContextWithLiterals =\n  | SiteCreatedContext\n  | 'OTHER'\n  | 'FROM_TEMPLATE'\n  | 'DUPLICATE_BY_SITE_TRANSFER'\n  | 'DUPLICATE'\n  | 'OLD_SITE_TRANSFER'\n  | 'FLASH';\n\nexport enum Namespace {\n  UNKNOWN_NAMESPACE = 'UNKNOWN_NAMESPACE',\n  /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */\n  WIX = 'WIX',\n  /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  SHOUT_OUT = 'SHOUT_OUT',\n  /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  ALBUMS = 'ALBUMS',\n  /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  WIX_STORES_TEST_DRIVE = 'WIX_STORES_TEST_DRIVE',\n  /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  HOTELS = 'HOTELS',\n  /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  CLUBS = 'CLUBS',\n  /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  ONBOARDING_DRAFT = 'ONBOARDING_DRAFT',\n  /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  DEV_SITE = 'DEV_SITE',\n  /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  LOGOS = 'LOGOS',\n  /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  VIDEO_MAKER = 'VIDEO_MAKER',\n  /** MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  PARTNER_DASHBOARD = 'PARTNER_DASHBOARD',\n  /** MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  DEV_CENTER_COMPANY = 'DEV_CENTER_COMPANY',\n  /**\n   * A draft created by HTML editor on open. Upon \"first save\" it will be moved to be of WIX domain.\n   *\n   * Meta site with this namespace will *not* be shown in a user's site list by default.\n   */\n  HTML_DRAFT = 'HTML_DRAFT',\n  /**\n   * the user-journey for Fitness users who want to start from managing their business instead of designing their website.\n   * Will be accessible from Site List and will not have a website app.\n   * Once the user attaches a site, the site will become a regular wixsite.\n   */\n  SITELESS_BUSINESS = 'SITELESS_BUSINESS',\n  /** Belongs to \"strategic products\" company. Supports new product in the creator's economy space. */\n  CREATOR_ECONOMY = 'CREATOR_ECONOMY',\n  /** It is to be used in the Business First efforts. */\n  DASHBOARD_FIRST = 'DASHBOARD_FIRST',\n  /** Bookings business flow with no site. */\n  ANYWHERE = 'ANYWHERE',\n  /** Namespace for Headless Backoffice with no editor */\n  HEADLESS = 'HEADLESS',\n  /**\n   * Namespace for master site that will exist in parent account that will be referenced by subaccounts\n   * The site will be used for account level CSM feature for enterprise\n   */\n  ACCOUNT_MASTER_CMS = 'ACCOUNT_MASTER_CMS',\n  /** Rise.ai Siteless account management for Gift Cards and Store Credit. */\n  RISE = 'RISE',\n  /**\n   * As part of the branded app new funnel, users now can create a meta site that will be branded app first.\n   * There's a blank site behind the scene but it's blank).\n   * The Mobile company will be the owner of this namespace.\n   */\n  BRANDED_FIRST = 'BRANDED_FIRST',\n  /** Nownia.com Siteless account management for Ai Scheduling Assistant. */\n  NOWNIA = 'NOWNIA',\n  /**\n   * UGC Templates are templates that are created by users for personal use and to sale to other users.\n   * The Partners company owns this namespace.\n   */\n  UGC_TEMPLATE = 'UGC_TEMPLATE',\n  /** Codux Headless Sites */\n  CODUX = 'CODUX',\n  /** Bobb - AI Design Creator. */\n  MEDIA_DESIGN_CREATOR = 'MEDIA_DESIGN_CREATOR',\n  /**\n   * Shared Blog Site is a unique single site across Enterprise account,\n   * This site will hold all Blog posts related to the Marketing product.\n   */\n  SHARED_BLOG_ENTERPRISE = 'SHARED_BLOG_ENTERPRISE',\n  /** Standalone forms (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  STANDALONE_FORMS = 'STANDALONE_FORMS',\n  /** Standalone events (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  STANDALONE_EVENTS = 'STANDALONE_EVENTS',\n  /** MIMIR - Siteless account for MIMIR Ai Job runner. */\n  MIMIR = 'MIMIR',\n}\n\n/** @enumType */\nexport type NamespaceWithLiterals =\n  | Namespace\n  | 'UNKNOWN_NAMESPACE'\n  | 'WIX'\n  | 'SHOUT_OUT'\n  | 'ALBUMS'\n  | 'WIX_STORES_TEST_DRIVE'\n  | 'HOTELS'\n  | 'CLUBS'\n  | 'ONBOARDING_DRAFT'\n  | 'DEV_SITE'\n  | 'LOGOS'\n  | 'VIDEO_MAKER'\n  | 'PARTNER_DASHBOARD'\n  | 'DEV_CENTER_COMPANY'\n  | 'HTML_DRAFT'\n  | 'SITELESS_BUSINESS'\n  | 'CREATOR_ECONOMY'\n  | 'DASHBOARD_FIRST'\n  | 'ANYWHERE'\n  | 'HEADLESS'\n  | 'ACCOUNT_MASTER_CMS'\n  | 'RISE'\n  | 'BRANDED_FIRST'\n  | 'NOWNIA'\n  | 'UGC_TEMPLATE'\n  | 'CODUX'\n  | 'MEDIA_DESIGN_CREATOR'\n  | 'SHARED_BLOG_ENTERPRISE'\n  | 'STANDALONE_FORMS'\n  | 'STANDALONE_EVENTS'\n  | 'MIMIR';\n\n/** Site transferred to another user. */\nexport interface SiteTransferred {\n  /**\n   * A previous owner id (user that transfers meta site).\n   * @format GUID\n   */\n  oldOwnerId?: string;\n  /**\n   * A new owner id (user that accepts meta site).\n   * @format GUID\n   */\n  newOwnerId?: string;\n}\n\n/** Soft deletion of the meta site. Could be restored. */\nexport interface SiteDeleted {\n  /** A deletion context. */\n  deleteContext?: DeleteContext;\n}\n\nexport interface DeleteContext {\n  /** When the meta site was deleted. */\n  dateDeleted?: Date | null;\n  /** A status. */\n  deleteStatus?: DeleteStatusWithLiterals;\n  /**\n   * A reason (flow).\n   * @maxLength 255\n   */\n  deleteOrigin?: string;\n  /**\n   * A service that deleted it.\n   * @maxLength 255\n   */\n  initiatorId?: string | null;\n}\n\nexport enum DeleteStatus {\n  UNKNOWN = 'UNKNOWN',\n  TRASH = 'TRASH',\n  DELETED = 'DELETED',\n  PENDING_PURGE = 'PENDING_PURGE',\n  PURGED_EXTERNALLY = 'PURGED_EXTERNALLY',\n}\n\n/** @enumType */\nexport type DeleteStatusWithLiterals =\n  | DeleteStatus\n  | 'UNKNOWN'\n  | 'TRASH'\n  | 'DELETED'\n  | 'PENDING_PURGE'\n  | 'PURGED_EXTERNALLY';\n\n/** Restoration of the meta site. */\nexport interface SiteUndeleted {}\n\n/** First publish of a meta site. Or subsequent publish after unpublish. */\nexport interface SitePublished {}\n\nexport interface SiteUnpublished {\n  /**\n   * A list of URLs previously associated with the meta site.\n   * @maxLength 4000\n   * @maxSize 10000\n   */\n  urls?: string[];\n}\n\nexport interface SiteMarkedAsTemplate {}\n\nexport interface SiteMarkedAsWixSite {}\n\n/**\n * Represents a service provisioned a site.\n *\n * Note on `origin_instance_id`:\n * There is no guarantee that you will be able to find a meta site using `origin_instance_id`.\n * This is because of the following scenario:\n *\n * Imagine you have a template where a third-party application (TPA) includes some stub data,\n * such as a product catalog. When you create a site from this template, you inherit this\n * default product catalog. However, if the template's product catalog is modified,\n * your site will retain the catalog as it was at the time of site creation. This ensures that\n * your site remains consistent with what you initially received and does not include any\n * changes made to the original template afterward.\n * To ensure this, the TPA on the template gets a new instance_id.\n */\nexport interface ServiceProvisioned {\n  /**\n   * Either UUID or EmbeddedServiceType.\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * Not only UUID. Something here could be something weird.\n   * @maxLength 36\n   */\n  instanceId?: string;\n  /**\n   * An instance id from which this instance is originated.\n   * @maxLength 36\n   */\n  originInstanceId?: string;\n  /**\n   * A version.\n   * @maxLength 500\n   */\n  version?: string | null;\n  /**\n   * The origin meta site id\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n}\n\nexport interface ServiceRemoved {\n  /**\n   * Either UUID or EmbeddedServiceType.\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * Not only UUID. Something here could be something weird.\n   * @maxLength 36\n   */\n  instanceId?: string;\n  /**\n   * A version.\n   * @maxLength 500\n   */\n  version?: string | null;\n}\n\n/** Rename of the site. Meaning, free public url has been changed as well. */\nexport interface SiteRenamed {\n  /**\n   * A new meta site name (URL slug).\n   * @maxLength 20\n   */\n  newSiteName?: string;\n  /**\n   * A previous meta site name (URL slug).\n   * @maxLength 255\n   */\n  oldSiteName?: string;\n}\n\n/**\n * Hard deletion of the meta site.\n *\n * Could not be restored. Therefore it's desirable to cleanup data.\n */\nexport interface SiteHardDeleted {\n  /** A deletion context. */\n  deleteContext?: DeleteContext;\n}\n\nexport interface NamespaceChanged {\n  /** A previous namespace. */\n  oldNamespace?: NamespaceWithLiterals;\n  /** A new namespace. */\n  newNamespace?: NamespaceWithLiterals;\n}\n\n/** Assigned Studio editor */\nexport interface StudioAssigned {}\n\n/** Unassigned Studio editor */\nexport interface StudioUnassigned {}\n\n/**\n * Fired in case site URLs were changed in any way: new secondary domain, published, account slug rename, site rename etc.\n *\n * This is an internal event, it's not propagated in special events, because it's non-actionable. If you need to keep up\n * with sites and its urls, you need to listen to another topic/event. Read about it:\n *\n * https://bo.wix.com/wix-docs/rest/meta-site/meta-site---urls-service\n */\nexport interface SiteUrlChanged {}\n\n/**\n * Used at the end of the deletion flow for both draft sites and when a user deletes a site.\n * Consumed by other teams to remove relevant data.\n */\nexport interface SitePurgedExternally {\n  /**\n   * @maxLength 2048\n   * @maxSize 100\n   * @deprecated\n   * @targetRemovalDate 2025-04-15\n   */\n  appDefId?: string[];\n}\n\n/** Assigned Odeditor */\nexport interface OdeditorAssigned {}\n\n/** Unassigned Odeditor */\nexport interface OdeditorUnassigned {}\n\n/** Assigned Picasso editor */\nexport interface PicassoAssigned {}\n\n/** Unassigned Picasso */\nexport interface PicassoUnassigned {}\n\nexport interface Empty {}\n\nexport interface InstallStoresRequest {\n  /**\n   * Original StoreId\n   * @format GUID\n   */\n  originStoreId?: string | null;\n  /**\n   * Original MetaSiteId\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n  /**\n   * StoreId\n   * @format GUID\n   */\n  storeId?: string;\n  /**\n   * MetaSiteId\n   * @format GUID\n   */\n  metaSiteId?: string;\n}\n\nexport interface InstallStoresResponse {}\n\nexport interface BackfillV3SiteRequest {\n  /**\n   * meta_site_id\n   * @format GUID\n   */\n  metaSiteId?: string;\n}\n\nexport interface BackfillV3SiteResponse {}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n\n/**\n * Retrieves the version of Stores Catalog installed on a site.\n * @public\n * @documentationMaturity preview\n * @permissionId WIX_STORES.CATALOG_VERSION_READ\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn wix.stores.catalog.provision.v1.StoresProvisionService.GetCatalogVersion\n */\nexport async function getCatalogVersion(): Promise<\n  NonNullablePaths<GetCatalogVersionResponse, `catalogVersion`>\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts =\n    ambassadorWixStoresCatalogV3Provision.getCatalogVersion(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixStoresCatalogProvisionV1StoresProvisionServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/stores/v3/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/stores/v3/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/provision/version',\n        destPath: '/v3/provision/version',\n      },\n      {\n        srcPath: '/v3/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/stores/v3/provision/version',\n        destPath: '/v3/provision/version',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_stores_catalog-versioning';\n\n/** Retrieves the version of Stores Catalog installed on a site. */\nexport function getCatalogVersion(payload: object): RequestOptionsFactory<any> {\n  function __getCatalogVersion({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.provision',\n      method: 'GET' as any,\n      methodFqn:\n        'wix.stores.catalog.provision.v1.StoresProvisionService.GetCatalogVersion',\n      packageName: PACKAGE_NAME,\n      url: resolveWixStoresCatalogProvisionV1StoresProvisionServiceUrl({\n        protoPath: '/v3/provision/version',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getCatalogVersion;\n}\n","import { HttpClient } from '@wix/sdk-types';\nimport {\n  GetCatalogVersionResponse,\n  getCatalogVersion as universalGetCatalogVersion,\n} from './stores-catalog-v3-provision-catalog-versioning.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/stores' };\n\nexport function getCatalogVersion(\n  httpClient: HttpClient\n): GetCatalogVersionSignature {\n  return () =>\n    universalGetCatalogVersion(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetCatalogVersionSignature {\n  /**\n   * Retrieves the version of Stores Catalog installed on a site.\n   */\n  (): Promise<GetCatalogVersionResponse>;\n}\n\nexport {\n  ActionEvent,\n  Asset,\n  BackfillV3SiteRequest,\n  BackfillV3SiteResponse,\n  DefaultDeliveryProfileSetup,\n  DeleteContext,\n  DeleteStatus,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  Empty,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  GetCatalogVersionRequest,\n  GetCatalogVersionResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  InstallBassAppDependencyRequest,\n  InstallBassAppDependencyResponse,\n  InstallStoresRequest,\n  InstallStoresResponse,\n  MessageEnvelope,\n  MetaSiteSpecialEvent,\n  MetaSiteSpecialEventPayloadOneOf,\n  Namespace,\n  NamespaceChanged,\n  OdeditorAssigned,\n  OdeditorUnassigned,\n  PicassoAssigned,\n  PicassoUnassigned,\n  Provision,\n  RestoreInfo,\n  ServiceProvisioned,\n  ServiceRemoved,\n  SiteCreated,\n  SiteCreatedContext,\n  SiteDeleted,\n  SiteHardDeleted,\n  SiteMarkedAsTemplate,\n  SiteMarkedAsWixSite,\n  SitePublished,\n  SitePurgedExternally,\n  SiteRenamed,\n  SiteTransferred,\n  SiteUndeleted,\n  SiteUnpublished,\n  SiteUrlChanged,\n  State,\n  StoresV3CatalogProvisioned,\n  StudioAssigned,\n  StudioUnassigned,\n  Version,\n  WebhookIdentityType,\n} from './stores-catalog-v3-provision-catalog-versioning.universal.js';\n","import { getCatalogVersion as publicGetCatalogVersion } from './stores-catalog-v3-provision-catalog-versioning.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const getCatalogVersion: MaybeContext<\n  BuildRESTFunction<typeof publicGetCatalogVersion> &\n    typeof publicGetCatalogVersion\n> = /*#__PURE__*/ createRESTModule(publicGetCatalogVersion);\n\nexport {\n  Version,\n  State,\n  SiteCreatedContext,\n  Namespace,\n  DeleteStatus,\n  WebhookIdentityType,\n} from './stores-catalog-v3-provision-catalog-versioning.universal.js';\nexport {\n  Provision,\n  DefaultDeliveryProfileSetup,\n  StoresV3CatalogProvisioned,\n  GetCatalogVersionRequest,\n  GetCatalogVersionResponse,\n  InstallBassAppDependencyRequest,\n  InstallBassAppDependencyResponse,\n  MetaSiteSpecialEvent,\n  MetaSiteSpecialEventPayloadOneOf,\n  Asset,\n  SiteCreated,\n  SiteTransferred,\n  SiteDeleted,\n  DeleteContext,\n  SiteUndeleted,\n  SitePublished,\n  SiteUnpublished,\n  SiteMarkedAsTemplate,\n  SiteMarkedAsWixSite,\n  ServiceProvisioned,\n  ServiceRemoved,\n  SiteRenamed,\n  SiteHardDeleted,\n  NamespaceChanged,\n  StudioAssigned,\n  StudioUnassigned,\n  SiteUrlChanged,\n  SitePurgedExternally,\n  OdeditorAssigned,\n  OdeditorUnassigned,\n  PicassoAssigned,\n  PicassoUnassigned,\n  Empty,\n  InstallStoresRequest,\n  InstallStoresResponse,\n  BackfillV3SiteRequest,\n  BackfillV3SiteResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n} from './stores-catalog-v3-provision-catalog-versioning.universal.js';\n"],"mappings":"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","names":["getCatalogVersion","import_rest_modules","Version","State","SiteCreatedContext","Namespace","DeleteStatus","WebhookIdentityType","getCatalogVersion","sdkTransformError","getCatalogVersion","import_rest_modules","getCatalogVersion"]}