"use strict";

exports.__esModule = true;
exports.setClientSdkGlobal = exports.clientSdkMockBuilder = void 0;
const clientSdkMockBuilder = () => {
  const stubs = new Map();
  const builder = {
    when(namespace, method) {
      if (!stubs.has(namespace)) {
        stubs.set(namespace, new Map());
      }
      const buildResponseResolver = argPredicate => {
        return {
          thenResolveWith(response) {
            const stub = {
              argPredicate,
              respond: () => response
            };
            stubs.get(namespace).set(method, stub);
            return builder;
          },
          thenResolveBy(respond) {
            const stub = {
              argPredicate,
              respond
            };
            stubs.get(namespace).set(method, stub);
            return builder;
          }
        };
      };
      return {
        withArgs(...args) {
          const predicate = (...callArgs) => {
            return args.every((arg, i) => arg === callArgs[i]);
          };
          return buildResponseResolver(predicate);
        },
        withAny() {
          const alwaysTruePredicate = () => true;
          return buildResponseResolver(alwaysTruePredicate);
        }
      };
    },
    build() {
      return {
        invoke: async ({
          namespace,
          method,
          args
        }) => {
          var _stubs$get;
          const stub = (_stubs$get = stubs.get(namespace)) == null ? void 0 : _stubs$get.get(method);
          if (!stub) {
            throw new Error(`No stub found for ${namespace}.${method}(${JSON.stringify(args)})`);
          }
          const response = stub.respond(...args);
          return response;
        }
      };
    }
  };
  return builder;
};
exports.clientSdkMockBuilder = clientSdkMockBuilder;
const setClientSdkGlobal = clientSdk => {
  window.clientSdk = clientSdk;
};
exports.setClientSdkGlobal = setClientSdkGlobal;
//# sourceMappingURL=clientSdkMock.js.map