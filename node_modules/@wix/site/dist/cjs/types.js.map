{"version":3,"names":[],"sources":["../../src/types.ts"],"sourcesContent":["import type { AuthenticationStrategy, Host as SDKHost } from '@wix/sdk-types';\n\nexport type WixNamespace = string;\n\nexport interface ClientSDK {\n  invoke<Args extends unknown[], Res extends unknown>(args: {\n    applicationId: string;\n    namespace: WixNamespace;\n    method: string;\n    args: Args;\n    accessToken?: string;\n  }): Promise<Res>;\n}\n\nexport type SDK = {};\n\nexport type SDKOptions = {\n  applicationId: string;\n  clientSdk?: ClientSDK;\n};\n\nexport interface Channel<Environment> {\n  observeState(\n    callback: (props: unknown, environment: Environment) => unknown,\n  ):\n    | {\n        disconnect: () => void;\n      }\n    | Promise<{\n        disconnect: () => void;\n      }>;\n}\n\nexport interface WebsiteChannel extends Channel<unknown> {\n  invoke: (args: {\n    namespace: WixNamespace;\n    method: string;\n    args: unknown[];\n  }) => Promise<unknown>;\n  getAccessToken: () => Promise<string>;\n}\n\nexport type Host = Omit<SDKHost, 'channel'> & {\n  channel: WebsiteChannel;\n};\n\nexport type AccessTokenFn = () => Promise<string>;\n\nexport type CreateWebsiteHost = (options?: SDKOptions) => Host;\n\nexport type CreateAuthStrategy = (\n  getAccessTokenFn?: () => Promise<string>,\n) => AuthenticationStrategy<Host | void> & {\n  getAccessTokenInjector(): (getAccessTokenFn: AccessTokenFn) => void;\n};\n\nexport interface WixEmbedsAPI {\n  getAccessTokenFunction?(): (() => Promise<string>) | undefined;\n  getExternalBaseUrl?: () => string;\n  getMetaSiteId?: () => string;\n  getEssentials: () => {\n    language: string;\n    locale: string;\n  };\n  getMonitoringClientFunction: (appId?: string) => Host['getMonitoringClient'];\n}\n"],"mappings":""}