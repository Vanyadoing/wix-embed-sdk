import type { AuthenticationStrategy, Host as SDKHost } from '@wix/sdk-types';
export type WixNamespace = string;
export interface ClientSDK {
    invoke<Args extends unknown[], Res extends unknown>(args: {
        applicationId: string;
        namespace: WixNamespace;
        method: string;
        args: Args;
        accessToken?: string;
    }): Promise<Res>;
}
export type SDK = {};
export type SDKOptions = {
    applicationId: string;
    clientSdk?: ClientSDK;
};
export interface Channel<Environment> {
    observeState(callback: (props: unknown, environment: Environment) => unknown): {
        disconnect: () => void;
    } | Promise<{
        disconnect: () => void;
    }>;
}
export interface WebsiteChannel extends Channel<unknown> {
    invoke: (args: {
        namespace: WixNamespace;
        method: string;
        args: unknown[];
    }) => Promise<unknown>;
    getAccessToken: () => Promise<string>;
}
export type Host = Omit<SDKHost, 'channel'> & {
    channel: WebsiteChannel;
};
export type AccessTokenFn = () => Promise<string>;
export type CreateWebsiteHost = (options?: SDKOptions) => Host;
export type CreateAuthStrategy = (getAccessTokenFn?: () => Promise<string>) => AuthenticationStrategy<Host | void> & {
    getAccessTokenInjector(): (getAccessTokenFn: AccessTokenFn) => void;
};
export interface WixEmbedsAPI {
    getAccessTokenFunction?(): (() => Promise<string>) | undefined;
    getExternalBaseUrl?: () => string;
    getMetaSiteId?: () => string;
    getEssentials: () => {
        language: string;
        locale: string;
    };
    getMonitoringClientFunction: (appId?: string) => Host['getMonitoringClient'];
}
//# sourceMappingURL=types.d.ts.map