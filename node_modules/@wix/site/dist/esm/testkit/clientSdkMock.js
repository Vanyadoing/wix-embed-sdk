export const clientSdkMockBuilder = () => {
  const stubs = new Map();
  const builder = {
    when(namespace, method) {
      if (!stubs.has(namespace)) {
        stubs.set(namespace, new Map());
      }
      const buildResponseResolver = argPredicate => {
        return {
          thenResolveWith(response) {
            const stub = {
              argPredicate,
              respond: () => response
            };
            stubs.get(namespace).set(method, stub);
            return builder;
          },
          thenResolveBy(respond) {
            const stub = {
              argPredicate,
              respond
            };
            stubs.get(namespace).set(method, stub);
            return builder;
          }
        };
      };
      return {
        withArgs() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          const predicate = function () {
            for (var _len2 = arguments.length, callArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              callArgs[_key2] = arguments[_key2];
            }
            return args.every((arg, i) => arg === callArgs[i]);
          };
          return buildResponseResolver(predicate);
        },
        withAny() {
          const alwaysTruePredicate = () => true;
          return buildResponseResolver(alwaysTruePredicate);
        }
      };
    },
    build() {
      return {
        invoke: async _ref => {
          var _stubs$get;
          let {
            namespace,
            method,
            args
          } = _ref;
          const stub = (_stubs$get = stubs.get(namespace)) == null ? void 0 : _stubs$get.get(method);
          if (!stub) {
            throw new Error("No stub found for " + namespace + "." + method + "(" + JSON.stringify(args) + ")");
          }
          const response = stub.respond(...args);
          return response;
        }
      };
    }
  };
  return builder;
};
export const setClientSdkGlobal = clientSdk => {
  window.clientSdk = clientSdk;
};
//# sourceMappingURL=clientSdkMock.js.map