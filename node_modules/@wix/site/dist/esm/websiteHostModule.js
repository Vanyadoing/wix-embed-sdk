import { withResolvers } from './utils';
export const createWebsiteModule = _ref => {
  let {
    createHost
  } = _ref;
  return {
    __type: 'host',
    create: _host => {
      // Here we can implement module methods that could be used by the SDK via "wixClient.use(website)" api.
      // We don't have any for now, so we just return an empty object.
      return {};
    },
    host: options => {
      var _window$commonConfig, _window$commonConfig2;
      const {
        applicationId
      } = options != null ? options : {};
      const wixEmbedsAPI = typeof window !== 'undefined' ? window.wixEmbedsAPI : undefined;
      const host = createHost(options);
      const apiBaseUrl = getApiBaseUrl();
      return {
        ...host,
        apiBaseUrl,
        getMonitoringClient: wixEmbedsAPI == null || wixEmbedsAPI.getMonitoringClientFunction == null ? void 0 : wixEmbedsAPI.getMonitoringClientFunction(applicationId),
        essentials: {
          language: typeof window !== 'undefined' ? (_window$commonConfig = window.commonConfig) == null ? void 0 : _window$commonConfig.language : undefined,
          locale: typeof window !== 'undefined' ? (_window$commonConfig2 = window.commonConfig) == null ? void 0 : _window$commonConfig2.locale : undefined
        }
      };
    },
    auth: getAccessTokenFn => {
      const wixEmbedsAPI = typeof window !== 'undefined' ? window.wixEmbedsAPI : undefined;
      if (!getAccessTokenFn) {
        /*
        We must call wixEmbedsAPI.getAccessTokenFunction() in the main frame and not from async callbacks / setTimeout calls
        since it uses document.currentScript API behind the scenes
        https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript
        * */
        getAccessTokenFn = wixEmbedsAPI == null || wixEmbedsAPI.getAccessTokenFunction == null ? void 0 : wixEmbedsAPI.getAccessTokenFunction();
      }
      let injectorCreated = false;
      const {
        resolve: resolveAccessTokenFn,
        promise: accessTokenFnPromise
      } = withResolvers();
      return {
        getAuthHeaders: async () => {
          if (!getAccessTokenFn && injectorCreated) {
            getAccessTokenFn = await accessTokenFnPromise;
          }
          if (!getAccessTokenFn) {
            throw new Error('Failed to resolve auth token');
          }
          return {
            headers: {
              Authorization: await getAccessTokenFn()
            }
          };
        },
        getAccessTokenInjector: () => {
          injectorCreated = true;
          return _getAccessTokenFn => {
            resolveAccessTokenFn(_getAccessTokenFn);
          };
        }
      };
    }
  };
};
function getApiBaseUrl() {
  const wixEmbedsAPI = typeof window !== 'undefined' ? window.wixEmbedsAPI : undefined;
  const apiBaseUrl = wixEmbedsAPI == null || wixEmbedsAPI.getExternalBaseUrl == null ? void 0 : wixEmbedsAPI.getExternalBaseUrl();
  if (!apiBaseUrl) {
    return;
  }

  // clean the protocol from the URL
  const parsedUrlObject = new URL(apiBaseUrl);
  if (parsedUrlObject != null && parsedUrlObject.pathname && parsedUrlObject.pathname !== '/') {
    return "" + parsedUrlObject.hostname + parsedUrlObject.pathname;
  }
  return parsedUrlObject.hostname;
}
//# sourceMappingURL=websiteHostModule.js.map