import { al as CreateProductRequest$1, C as CreateProductResponse$1, aq as UpdateProductRequest$1, a as UpdateProductResponse$1, at as DeleteProductRequest$1, au as DeleteProductResponse$1, az as UpdateVariantsRequest$1, b as UpdateVariantsResponse$1, aA as ResetAllVariantDataRequest$1, aB as ResetAllVariantDataResponse$1, aC as AddProductsToCollectionRequest$1, aD as AddProductsToCollectionResponse$1, aE as RemoveProductsFromCollectionRequest$1, aF as RemoveProductsFromCollectionResponse$1, aG as AddProductMediaRequest$1, aJ as AddProductMediaResponse$1, aK as RemoveProductMediaRequest$1, aL as RemoveProductMediaResponse$1, aM as AddProductMediaToChoicesRequest$1, aN as AddProductMediaToChoicesResponse$1, aO as RemoveProductMediaFromChoicesRequest$1, aP as RemoveProductMediaFromChoicesResponse$1, aQ as DeleteProductOptionsRequest$1, aR as DeleteProductOptionsResponse$1, aW as RemoveProductBrandRequest$1, aX as RemoveProductBrandResponse$1, b0 as CreateCollectionRequest$1, e as CreateCollectionResponse$1, b1 as UpdateCollectionRequest$1, g as UpdateCollectionResponse$1, b2 as DeleteCollectionRequest$1, b3 as DeleteCollectionResponse$1, b4 as RemoveProductRibbonRequest$1, b5 as RemoveProductRibbonResponse$1, b6 as BulkUpdateProductsRequest$1, B as BulkUpdateProductsResponse$1, bf as BulkAdjustProductPropertiesRequest$1, h as BulkAdjustProductPropertiesResponse$1, bB as QueryProductsPlatformizedRequest$1, bG as QueryProductsPlatformizedResponse$1, bO as GetProductRequest$1, j as GetProductResponse$1, bX as GetCollectionBySlugRequest$1, k as GetCollectionBySlugResponse$1, bY as ProductOptionsAvailabilityRequest$1, l as ProductOptionsAvailabilityResponse$1, b_ as QueryProductVariantsRequest$1, m as QueryProductVariantsResponse$1, b$ as QueryStoreVariantsRequest$1, o as QueryStoreVariantsResponse$1, cb as GetStoreVariantRequest$1, p as GetStoreVariantResponse$1 } from './stores-catalog-v1-product-products.universal-CgcdUR7z.mjs';

interface Product {
    /**
     * Product ID (generated automatically by the catalog).
     * @readonly
     */
    id?: string;
    /**
     * Product name.
     *
     * Min: 1 character
     * Max: 80 characters
     * @minLength 1
     * @maxLength 80
     */
    name?: string | null;
    /**
     * A friendly URL name (generated automatically by the catalog when a product is created), can be updated.
     * @maxLength 100
     */
    slug?: string;
    /** Whether the product is visible to site visitors. */
    visible?: boolean | null;
    /** Currently, only creating physical products ( `"productType": "physical"` ) is supported via the API. */
    productType?: ProductTypeWithLiterals;
    /**
     * Product description. Accepts [rich text](https://dev.wix.com/api/rest/wix-stores/rich-text).
     * @maxLength 8000
     */
    description?: string | null;
    /**
     * Stock keeping unit. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, SKUs will be set per variant, and this field will be empty.
     * @maxLength 40
     */
    sku?: string | null;
    /**
     * Product weight. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, weight will be set per variant, and this field will be empty.
     * @max 999999999.99
     */
    weight?: number | null;
    /**
     * Product weight range. The minimum and maximum weights of all the variants.
     * @readonly
     */
    weightRange?: NumericPropertyRange;
    /**
     * Product inventory status (in future this will be writable via Inventory API).
     * @readonly
     */
    stock?: Stock;
    /**
     * Deprecated (use `priceData` instead).
     * @readonly
     * @deprecated
     */
    price?: PriceData;
    /** Price data. */
    priceData?: PriceData;
    /**
     * Price data, converted to the currency specified in request header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /**
     * Product price range. The minimum and maximum prices of all the variants.
     * @readonly
     */
    priceRange?: NumericPropertyRange;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /**
     * Product cost range. The minimum and maximum costs of all the variants.
     * @readonly
     */
    costRange?: NumericPropertyRange;
    /** Price per unit data. */
    pricePerUnitData?: PricePerUnitData;
    /** Additional text that the store owner can assign to the product (e.g. shipping details, refund policy, etc.). */
    additionalInfoSections?: AdditionalInfoSection[];
    /**
     * Deprecated (use `ribbon` instead).
     * @readonly
     * @deprecated
     */
    ribbons?: Ribbon[];
    /**
     * Media items (images, videos etc) associated with this product (writable via [Add Product Media](https://dev.wix.com/api/rest/wix-stores/catalog/products/add-product-media) endpoint).
     * @readonly
     */
    media?: Media;
    /**
     * Text box for the customer to add a message to their order (e.g., customization request). Currently writable only from the UI.
     * @readonly
     */
    customTextFields?: CustomTextField[];
    /** Whether variants are being managed for this product - enables unique SKU, price and weight per variant. Also affects inventory data. */
    manageVariants?: boolean | null;
    /**
     * Options for this product.
     * @maxSize 6
     */
    productOptions?: ProductOption[];
    /**
     * Product page URL for this product (generated automatically by the server).
     * @readonly
     */
    productPageUrl?: PageUrl;
    /**
     * Productâ€™s unique numeric ID (assigned in ascending order).
     * Primarily used for sorting and filtering when crawling all products.
     * @readonly
     */
    numericId?: string;
    /**
     * Inventory item ID - ID referencing the inventory system.
     * @readonly
     */
    inventoryItemId?: string;
    /** Discount deducted from the product's original price. */
    discount?: Discount;
    /**
     * A list of all collection IDs that this product is included in (writable via the Catalog > Collection APIs).
     * @readonly
     */
    collectionIds?: string[];
    /**
     * Product variants, will be provided if the request was sent with the `includeVariants: true`.
     *
     * Max: 1,000 variants
     * @readonly
     * @maxSize 1000
     */
    variants?: Variant[];
    /**
     * Date and time the product was last updated.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    createdDate?: Date | null;
    /** Custom SEO data for the product. */
    seoData?: SeoSchema;
    /**
     * Product ribbon. Used to highlight relevant information about a product. For example, "Sale", "New Arrival", "Sold Out".
     * @maxLength 30
     */
    ribbon?: string | null;
    /**
     * Product brand. Including a brand name can help improve site and product [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores).
     * @minLength 1
     * @maxLength 50
     */
    brand?: string | null;
}
declare enum ProductType {
    unspecified_product_type = "unspecified_product_type",
    physical = "physical",
    digital = "digital"
}
/** @enumType */
type ProductTypeWithLiterals = ProductType | 'unspecified_product_type' | 'physical' | 'digital';
interface NumericPropertyRange {
    /** Minimum value. */
    minValue?: number;
    /** Maximum value. */
    maxValue?: number;
}
interface Stock {
    /** Whether inventory is being tracked */
    trackInventory?: boolean;
    /**
     * Quantity currently left in inventory
     * @max 99999
     */
    quantity?: number | null;
    /**
     * Whether the product is currently in stock (relevant only when tracking manually)
     * Deprecated (use `inventoryStatus` instead)
     * @deprecated
     */
    inStock?: boolean;
    /**
     * The current status of the inventory
     * + `IN_STOCK` - In stock
     * + `OUT_OF_STOCK` - Not in stock
     * + `PARTIALLY_OUT_OF_STOCK` - Some of the variants are not in stock
     */
    inventoryStatus?: InventoryStatusWithLiterals;
}
declare enum InventoryStatus {
    /** In stock */
    IN_STOCK = "IN_STOCK",
    /** Not in stock */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Some of the variants are not in stock */
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
/** @enumType */
type InventoryStatusWithLiterals = InventoryStatus | 'IN_STOCK' | 'OUT_OF_STOCK' | 'PARTIALLY_OUT_OF_STOCK';
interface PriceData {
    /**
     * Product price currency
     * @readonly
     */
    currency?: string;
    /**
     * Product price
     * @max 999999999.99
     */
    price?: number | null;
    /**
     * Discounted product price (if no discounted price is set, the product price is returned)
     * @readonly
     */
    discountedPrice?: number;
    /**
     * The product price and discounted price, formatted with the currency
     * @readonly
     */
    formatted?: FormattedPrice;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: number | null;
}
interface FormattedPrice {
    /** Product price formatted with the currency */
    price?: string;
    /** Discounted product price formatted with the currency (if no discounted price is set, the product formatted price is returned) */
    discountedPrice?: string;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: string | null;
}
interface CostAndProfitData {
    /**
     * Item cost.
     * @max 999999999.99
     */
    itemCost?: number | null;
    /**
     * Item cost formatted with currency symbol.
     * @readonly
     */
    formattedItemCost?: string;
    /**
     * Profit. Calculated by reducing `cost` from `discounted_price`.
     * @readonly
     * @max 999999999.99
     */
    profit?: number;
    /**
     * Profit formatted with currency symbol.
     * @readonly
     */
    formattedProfit?: string;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discounted_price`.
     * The result is rounded to 4 decimal places.
     * @readonly
     * @max 1
     */
    profitMargin?: number;
}
interface PricePerUnitData {
    /**
     * Total quantity
     * @min 0.01
     * @max 999999999.99
     */
    totalQuantity?: number;
    /** Total measurement unit */
    totalMeasurementUnit?: MeasurementUnitWithLiterals;
    /**
     * Base quantity
     * @min 0.01
     * @max 999999999.99
     */
    baseQuantity?: number;
    /** Base measurement unit */
    baseMeasurementUnit?: MeasurementUnitWithLiterals;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
/** @enumType */
type MeasurementUnitWithLiterals = MeasurementUnit | 'UNSPECIFIED' | 'ML' | 'CL' | 'L' | 'CBM' | 'MG' | 'G' | 'KG' | 'MM' | 'CM' | 'M' | 'SQM' | 'OZ' | 'LB' | 'FLOZ' | 'PT' | 'QT' | 'GAL' | 'IN' | 'FT' | 'YD' | 'SQFT';
interface AdditionalInfoSection {
    /**
     * Product info section title
     * @maxLength 50
     */
    title?: string;
    /**
     * Product info section description
     * @maxLength 16000
     */
    description?: string;
}
interface Ribbon {
    /**
     * Ribbon text
     * @maxLength 30
     */
    text?: string;
}
interface Media {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemTypeWithLiterals;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    id?: string;
}
/** @oneof */
interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
interface MediaItemUrlAndSize {
    /**
     * Media item URL.
     * @format WEB_URL
     */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    /** Image media type. */
    image = "image",
    /** Video media type. */
    video = "video",
    /** Audio media type. */
    audio = "audio",
    /** Document media type. */
    document = "document",
    /** Zip media type. */
    zip = "zip"
}
/** @enumType */
type MediaItemTypeWithLiterals = MediaItemType | 'unspecified_media_item_type' | 'image' | 'video' | 'audio' | 'document' | 'zip';
interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface CustomTextField {
    /**
     * Text box title
     * @maxLength 100
     */
    title?: string;
    /**
     * Text box input max length
     * @max 500
     */
    maxLength?: number;
    /** Whether this text box is mandatory */
    mandatory?: boolean;
}
interface ProductOption {
    /**
     * Option type.
     * @readonly
     */
    optionType?: OptionTypeWithLiterals;
    /**
     * Option name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Choices available for this option.
     * @minSize 1
     * @maxSize 100
     */
    choices?: Choice[];
}
declare enum OptionType {
    /** Unspecified option type. */
    unspecified_option_type = "unspecified_option_type",
    /** Drop down. */
    drop_down = "drop_down",
    /** Color. */
    color = "color"
}
/** @enumType */
type OptionTypeWithLiterals = OptionType | 'unspecified_option_type' | 'drop_down' | 'color';
interface Choice {
    /**
     * Choice value.
     * @minLength 1
     * @maxLength 50
     */
    value?: string;
    /**
     * Choice description.
     * @minLength 1
     * @maxLength 50
     */
    description?: string;
    /**
     * Media items (images, videos) associated with this choice
     * @readonly
     */
    media?: Media;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are in stock
     * @readonly
     */
    inStock?: boolean;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are visible
     * @readonly
     */
    visible?: boolean;
}
interface PageUrl {
    /** Base URL. For premium sites, this is the domain. For free sites, this is the site URL (e.g mysite.wixsite.com/mysite). */
    base?: string;
    /** Path to the product page - e.g /product-page/a-product. */
    path?: string;
}
interface Discount {
    /**
     * Discount type:
     * + `"AMOUNT"`
     * + `"PERCENT"`
     */
    type?: DiscountTypeWithLiterals;
    /** Discount value */
    value?: number;
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    NONE = "NONE",
    /** Discount by a fixed amount */
    AMOUNT = "AMOUNT",
    /** Discount by a percentage */
    PERCENT = "PERCENT"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'UNDEFINED' | 'NONE' | 'AMOUNT' | 'PERCENT';
interface Variant {
    /**
     * Requested Variant ID
     * @format GUID
     */
    id?: string;
    /** Specific choices within a selection, as option-choice key-value pairs */
    choices?: Record<string, string>;
    variant?: VariantDataWithNoStock;
    /**
     * Variant inventory status.
     * @readonly
     */
    stock?: VariantStock;
}
interface VariantDataWithNoStock {
    /** Variant price. */
    priceData?: PriceData;
    /**
     * Variant price data, converted to currency requested in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /** Variant weight. */
    weight?: number;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface VariantStock {
    /** Whether inventory is being tracked. */
    trackQuantity?: boolean;
    /**
     * Quantity currently left in inventory.
     * @max 99999
     */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /**
     * The source that added the keyword terms to the SEO settings.
     * @maxLength 1000
     */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /**
     * User-selected keyword terms for a specific page.
     * @maxSize 5
     */
    keywords?: Keyword[];
}
interface CreateProductRequest {
    /** Product information. */
    product?: Product;
}
interface CreateProductResponse {
    product?: Product;
}
interface UpdateProductRequest {
    product: Product;
}
interface UpdateProductResponse {
    product?: Product;
}
interface DeleteProductRequest {
    /** ID of the product to delete. */
    id: string;
}
interface DeleteProductResponse {
}
interface UpdateVariantsRequest {
    /** ID of the product with managed variants. */
    id: string;
    /** Variant info to update. */
    variants?: VariantOverride[];
}
interface VariantOverride {
    /** The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice). You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (Not relevant when passing variant IDs) */
    choices?: Record<string, string>;
    /**
     * List of variant IDs
     * (Not relevant when passing choices)
     */
    variantIds?: string[];
    /**
     * Variant price
     * @max 999999999.99
     */
    price?: number | null;
    /**
     * Variant cost of goods
     * @max 999999999.99
     */
    cost?: number | null;
    /**
     * Variant weight
     * @max 999999999.99
     */
    weight?: number | null;
    /**
     * Variant SKU (stock keeping unit)
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether the variant is visible to  customers */
    visible?: boolean | null;
}
interface UpdateVariantsResponse {
    /** List of the product's variants. */
    variants?: Variant[];
}
interface ResetAllVariantDataRequest {
    /** Product ID. */
    id: string;
}
interface ResetAllVariantDataResponse {
}
interface AddProductsToCollectionRequest {
    /**
     * Collection ID.
     * @format GUID
     */
    id: string;
    /**
     * IDs of the products to add to the collection, separated by commas.
     * @maxSize 1000
     */
    productIds?: string[];
}
interface AddProductsToCollectionResponse {
}
interface RemoveProductsFromCollectionRequest {
    /**
     * Collection ID.
     * @format GUID
     */
    id: string;
    /**
     * IDs of the products to remove from the collection.
     * @maxSize 1000
     */
    productIds: string[];
}
interface RemoveProductsFromCollectionResponse {
}
interface AddProductMediaRequest {
    /** Product ID. */
    id: string;
    /**
     * Sources of media items already uploaded to the Wix site.
     * @minSize 1
     * @maxSize 50
     */
    media?: MediaDataForWrite[];
}
interface MediaDataForWrite extends MediaDataForWriteMediaSourceOneOf {
    /** Media ID. For media items previously saved in Wix Media, the media ID is returned in the Query Product response. */
    mediaId?: string;
    /**
     * Media external URL (for new media items).
     * @format WEB_URL
     */
    url?: string;
    /**
     * Assign this media item to a specific product choice.
     * Note that you may set media items for choices under only one option (e.g., if Colors blue, green, and red have media items, Sizes S, M, and L can't have media items assigned to them).
     * You may clear existing media from choices with the [Remove Product Media From Choices](/catalog/products/remove-product-media-from-choices).
     */
    choice?: OptionAndChoice;
}
/** @oneof */
interface MediaDataForWriteMediaSourceOneOf {
    /** Media ID. For media items previously saved in Wix Media, the media ID is returned in the Query Product response. */
    mediaId?: string;
    /**
     * Media external URL (for new media items).
     * @format WEB_URL
     */
    url?: string;
}
interface OptionAndChoice {
    /**
     * Option to add the media to.
     * @minLength 1
     * @maxLength 50
     */
    option?: string;
    /**
     * Choice to add the media to.
     * @minLength 1
     * @maxLength 50
     */
    choice?: string;
}
interface AddProductMediaResponse {
}
interface RemoveProductMediaRequest {
    /** Product ID. */
    id: string;
    /**
     * List of media IDs to remove. Pass an empty array to delete all media items for the product.
     * @maxSize 50
     */
    mediaIds?: string[];
}
interface RemoveProductMediaResponse {
}
interface AddProductMediaToChoicesRequest {
    /** Product ID. */
    id: string;
    /**
     * Product media items and the choices to add the media to.
     * @minSize 1
     * @maxSize 10
     */
    media?: MediaAssignmentToChoice[];
}
interface MediaAssignmentToChoice {
    /**
     * Option name.
     * @minLength 1
     * @maxLength 50
     */
    option?: string;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    choice?: string;
    /**
     * Media IDs (available via the Query Product endpoint).
     * @maxSize 50
     */
    mediaIds?: string[];
}
interface AddProductMediaToChoicesResponse {
}
interface RemoveProductMediaFromChoicesRequest {
    /** Product ID from whose choices to remove media items. */
    id: string;
    /**
     * Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product.
     * @minSize 1
     * @maxSize 10
     */
    media?: MediaAssignmentToChoice[];
}
interface RemoveProductMediaFromChoicesResponse {
}
interface DeleteProductOptionsRequest {
    /** ID of the product with options to delete. */
    id: string;
}
interface DeleteProductOptionsResponse {
}
interface RemoveProductBrandRequest {
    /** Product ID. */
    id: string;
}
interface RemoveProductBrandResponse {
}
interface CreateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @minLength 35
     * @maxLength 36
     * @readonly
     */
    id?: string | null;
    /**
     * Collection name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /**
     * Collection description.
     * @maxLength 600
     */
    description?: string | null;
    /**
     * Collection slug.
     * @minLength 1
     * @maxLength 100
     */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface CreateCollectionResponse {
    /** Collection. */
    collection?: Collection;
}
interface UpdateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
interface UpdateCollectionResponse {
    /** Updated collection. */
    collection?: Collection;
}
interface DeleteCollectionRequest {
    /**
     * ID of the collection to delete.
     * @format GUID
     */
    id: string;
}
interface DeleteCollectionResponse {
}
interface RemoveProductRibbonRequest {
    /** Product ID. */
    id: string;
}
interface RemoveProductRibbonResponse {
}
interface BulkUpdateProductsRequest {
    /**
     * Product IDs.
     * @minSize 1
     * @maxSize 100
     */
    ids: string[];
    /** Field to update. */
    set?: SetValue;
}
interface SetValue extends SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     * @max 999999999.99
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     * @max 999999999.99
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     * @max 999999999.99
     */
    weight?: number;
    /**
     * Set product ribbon. Pass empty string to remove existing ribbon.
     * @maxLength 30
     */
    ribbon?: string;
    /**
     * Set product brand. Pass empty string to remove existing brand.
     * @maxLength 50
     */
    brand?: string;
}
/** @oneof */
interface SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     * @max 999999999.99
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     * @max 999999999.99
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     * @max 999999999.99
     */
    weight?: number;
    /**
     * Set product ribbon. Pass empty string to remove existing ribbon.
     * @maxLength 30
     */
    ribbon?: string;
    /**
     * Set product brand. Pass empty string to remove existing brand.
     * @maxLength 50
     */
    brand?: string;
}
interface BulkUpdateProductsResponse {
    /** Bulk action results. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkProductResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkAdjustProductPropertiesRequest {
    /**
     * Product IDs.
     * @minSize 1
     * @maxSize 100
     */
    ids: string[];
    /** Numerical property to adjust. */
    adjust?: AdjustValue;
}
interface AdjustValue extends AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
/** @oneof */
interface AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
interface PropertyAdjustmentData extends PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /**
     * Adjust by amount.
     * @min -999999999.99
     * @max 999999999.99
     */
    amount?: number;
}
/** @oneof */
interface PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /**
     * Adjust by amount.
     * @min -999999999.99
     * @max 999999999.99
     */
    amount?: number;
}
interface PercentageData {
    /**
     * If `true`, result will be rounded to the nearest whole number.
     * If `false`, result will be rounded to 2 places after the decimal point.
     */
    roundToInt?: boolean;
    /**
     * Percentage value, as a whole number (integer) between `-100` and `1000`.
     *
     * For example:
     * + Pass `100` to increase value by 100% (multiply original value by 2).
     * + Pass `1000` to increase value by 1000% (multiply original value by 10).
     * + Pass `-50` to decrease value by 50% (original value is halved).
     * @min -100
     * @max 1000
     */
    rate?: number;
}
interface BulkAdjustProductPropertiesResponse {
    /** Bulk action results. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface Paging {
    /**
     * Amount of items to load per page
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface QueryProductsPlatformizedRequest {
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryProductsPlatformizedResponse {
    /** @maxSize 100 */
    products?: Product[];
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface GetProductRequest {
    /**
     * Requested product ID.
     * @minLength 1
     */
    id: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface GetProductResponse {
    /** Requested product data. */
    product?: Product;
}
interface GetCollectionBySlugRequest {
    /**
     * Slug of the collection to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    slug: string;
}
interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}
interface ProductOptionsAvailabilityRequest {
    /**
     * Requested product ID.
     * @minLength 1
     */
    id: string;
    /** Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`. */
    options?: Record<string, string>;
}
interface ProductOptionsAvailabilityResponse {
    /** Variant information, given that all the choices were provided. */
    selectedVariant?: VariantData;
    /** Information about media items (images, videos, etc.) associated with this choice. */
    media?: Media;
    /** Options information (color, size, etc.) for this product, with the inventory and visibility fields updated based on the provided choices. */
    productOptions?: ProductOption[];
    /** Whether all the selected choices result in a visible, in-stock variant. */
    availableForPurchase?: boolean;
}
interface VariantData {
    /** Variant price. */
    price?: PriceData;
    /**
     * Variant price data converted to currency provided in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Variant weight. */
    weight?: number | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Quantity currently in inventory (relevant only when tracking by inventory). */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
interface QueryProductVariantsRequest {
    /**
     * Requested product ID.
     * @minLength 1
     */
    id: string;
    /**
     * The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice).
     * You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (not relevant when passing variant IDs).
     */
    choices?: Record<string, string>;
    /** List of variant IDs (not relevant when passing choices). */
    variantIds?: string[];
    paging?: Paging;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
interface QueryProductVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: Variant[];
    metadata?: PagingMetadata;
    totalResults?: number;
}
interface QueryStoreVariantsRequest {
    /** Query options. */
    query?: PlatformQuery;
}
interface QueryStoreVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: StoreVariant[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
interface StoreVariant {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen: {productId}.{variantId}. */
    id?: string;
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /** Product ID. */
    productId?: string;
    /**
     * Variant name.
     * @minLength 1
     * @maxLength 80
     */
    variantName?: string;
    /**
     * Product name.
     * @minLength 1
     * @maxLength 80
     */
    productName?: string;
    /** Whether the variant is managed or represents a product. */
    managedVariant?: boolean;
    /**
     * Variant SKU (stock keeping unit).
     * @maxLength 40
     */
    sku?: string;
    /** Variant inventory status. */
    stock?: VariantStock;
    /** The selected options of this variant. For example, `{"Color": "Blue", "Size": "Large"}`. */
    choices?: Record<string, string>;
    /**
     * Collections that include this variant.
     * @format GUID
     */
    collectionIds?: string[];
    /**
     * Media items (images, videos) associated with this variant.
     * @readonly
     */
    media?: PlatformMedia;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
interface PlatformMedia extends PlatformMediaMediaOneOf {
    image?: Image;
    video?: VideoV2;
}
/** @oneof */
interface PlatformMediaMediaOneOf {
    image?: Image;
    video?: VideoV2;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface VideoV2 {
    /** WixMedia ID. */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     * @maxSize 100
     */
    resolutions?: VideoResolution[];
    /**
     * Video filename.
     * @readonly
     */
    filename?: string | null;
}
interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /**
     * A message the buyer will see when the item is out of stock and preorder is enabled.
     * @minLength 1
     * @maxLength 250
     */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * @max 100000
     */
    limit?: number | null;
}
interface GetStoreVariantRequest {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`. */
    id: string;
}
interface GetStoreVariantResponse {
    /** The requested store variant. */
    variant?: StoreVariant;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createProduct(): __PublicMethodMetaInfo<'POST', {}, CreateProductRequest$1, CreateProductRequest, CreateProductResponse$1, CreateProductResponse>;
declare function updateProduct(): __PublicMethodMetaInfo<'PATCH', {
    productId: string;
}, UpdateProductRequest$1, UpdateProductRequest, UpdateProductResponse$1, UpdateProductResponse>;
declare function deleteProduct(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteProductRequest$1, DeleteProductRequest, DeleteProductResponse$1, DeleteProductResponse>;
declare function updateProductVariants(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
}, UpdateVariantsRequest$1, UpdateVariantsRequest, UpdateVariantsResponse$1, UpdateVariantsResponse>;
declare function resetAllProductVariantData(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, ResetAllVariantDataRequest$1, ResetAllVariantDataRequest, ResetAllVariantDataResponse$1, ResetAllVariantDataResponse>;
declare function addProductsToCollection(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddProductsToCollectionRequest$1, AddProductsToCollectionRequest, AddProductsToCollectionResponse$1, AddProductsToCollectionResponse>;
declare function removeProductsFromCollection(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductsFromCollectionRequest$1, RemoveProductsFromCollectionRequest, RemoveProductsFromCollectionResponse$1, RemoveProductsFromCollectionResponse>;
declare function addProductMedia(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, AddProductMediaRequest$1, AddProductMediaRequest, AddProductMediaResponse$1, AddProductMediaResponse>;
declare function removeProductMedia(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductMediaRequest$1, RemoveProductMediaRequest, RemoveProductMediaResponse$1, RemoveProductMediaResponse>;
declare function addProductMediaToChoices(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
}, AddProductMediaToChoicesRequest$1, AddProductMediaToChoicesRequest, AddProductMediaToChoicesResponse$1, AddProductMediaToChoicesResponse>;
declare function removeProductMediaFromChoices(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductMediaFromChoicesRequest$1, RemoveProductMediaFromChoicesRequest, RemoveProductMediaFromChoicesResponse$1, RemoveProductMediaFromChoicesResponse>;
declare function deleteProductOptions(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteProductOptionsRequest$1, DeleteProductOptionsRequest, DeleteProductOptionsResponse$1, DeleteProductOptionsResponse>;
declare function removeBrand(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductBrandRequest$1, RemoveProductBrandRequest, RemoveProductBrandResponse$1, RemoveProductBrandResponse>;
declare function createCollection(): __PublicMethodMetaInfo<'POST', {}, CreateCollectionRequest$1, CreateCollectionRequest, CreateCollectionResponse$1, CreateCollectionResponse>;
declare function updateCollection(): __PublicMethodMetaInfo<'PATCH', {
    collectionId: string;
}, UpdateCollectionRequest$1, UpdateCollectionRequest, UpdateCollectionResponse$1, UpdateCollectionResponse>;
declare function deleteCollection(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteCollectionRequest$1, DeleteCollectionRequest, DeleteCollectionResponse$1, DeleteCollectionResponse>;
declare function removeRibbon(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, RemoveProductRibbonRequest$1, RemoveProductRibbonRequest, RemoveProductRibbonResponse$1, RemoveProductRibbonResponse>;
declare function bulkUpdateProductsProperty(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateProductsRequest$1, BulkUpdateProductsRequest, BulkUpdateProductsResponse$1, BulkUpdateProductsResponse>;
declare function bulkAdjustProductProperty(): __PublicMethodMetaInfo<'POST', {}, BulkAdjustProductPropertiesRequest$1, BulkAdjustProductPropertiesRequest, BulkAdjustProductPropertiesResponse$1, BulkAdjustProductPropertiesResponse>;
declare function queryProducts(): __PublicMethodMetaInfo<'GET', {}, QueryProductsPlatformizedRequest$1, QueryProductsPlatformizedRequest, QueryProductsPlatformizedResponse$1, QueryProductsPlatformizedResponse>;
declare function getProduct(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetProductRequest$1, GetProductRequest, GetProductResponse$1, GetProductResponse>;
declare function getCollectionBySlug(): __PublicMethodMetaInfo<'GET', {
    slug: string;
}, GetCollectionBySlugRequest$1, GetCollectionBySlugRequest, GetCollectionBySlugResponse$1, GetCollectionBySlugResponse>;
declare function getProductOptionsAvailability(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, ProductOptionsAvailabilityRequest$1, ProductOptionsAvailabilityRequest, ProductOptionsAvailabilityResponse$1, ProductOptionsAvailabilityResponse>;
declare function queryProductVariants(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, QueryProductVariantsRequest$1, QueryProductVariantsRequest, QueryProductVariantsResponse$1, QueryProductVariantsResponse>;
declare function queryStoreVariants(): __PublicMethodMetaInfo<'POST', {}, QueryStoreVariantsRequest$1, QueryStoreVariantsRequest, QueryStoreVariantsResponse$1, QueryStoreVariantsResponse>;
declare function getStoreVariant(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetStoreVariantRequest$1, GetStoreVariantRequest, GetStoreVariantResponse$1, GetStoreVariantResponse>;

export { type __PublicMethodMetaInfo, addProductMedia, addProductMediaToChoices, addProductsToCollection, bulkAdjustProductProperty, bulkUpdateProductsProperty, createCollection, createProduct, deleteCollection, deleteProduct, deleteProductOptions, getCollectionBySlug, getProduct, getProductOptionsAvailability, getStoreVariant, queryProductVariants, queryProducts, queryStoreVariants, removeBrand, removeProductMedia, removeProductMediaFromChoices, removeProductsFromCollection, removeRibbon, resetAllProductVariantData, updateCollection, updateProduct, updateProductVariants };
