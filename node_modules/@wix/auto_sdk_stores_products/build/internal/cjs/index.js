"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  DiscountType: () => DiscountType,
  FileType: () => FileType,
  InventoryStatus: () => InventoryStatus,
  MeasurementUnit: () => MeasurementUnit,
  MediaItemType: () => MediaItemType,
  OptionType: () => OptionType,
  ProductType: () => ProductType,
  SortOrder: () => SortOrder,
  Version: () => Version,
  WebhookIdentityType: () => WebhookIdentityType,
  addProductMedia: () => addProductMedia4,
  addProductMediaToChoices: () => addProductMediaToChoices4,
  addProductsToCollection: () => addProductsToCollection4,
  bulkAdjustProductProperty: () => bulkAdjustProductProperty3,
  bulkUpdateProductsProperty: () => bulkUpdateProductsProperty3,
  createCollection: () => createCollection4,
  createProduct: () => createProduct4,
  deleteCollection: () => deleteCollection4,
  deleteProduct: () => deleteProduct4,
  deleteProductOptions: () => deleteProductOptions4,
  getCollectionBySlug: () => getCollectionBySlug4,
  getProduct: () => getProduct4,
  getProductOptionsAvailability: () => getProductOptionsAvailability3,
  getStoreVariant: () => getStoreVariant4,
  onProductChanged: () => onProductChanged2,
  onProductCollectionChanged: () => onProductCollectionChanged2,
  onProductCollectionCreated: () => onProductCollectionCreated2,
  onProductCollectionDeleted: () => onProductCollectionDeleted2,
  onProductCreated: () => onProductCreated2,
  onProductDeleted: () => onProductDeleted2,
  onProductVariantsChanged: () => onProductVariantsChanged2,
  queryProductVariants: () => queryProductVariants4,
  queryProducts: () => queryProducts3,
  queryStoreVariants: () => queryStoreVariants4,
  removeBrand: () => removeBrand4,
  removeProductMedia: () => removeProductMedia4,
  removeProductMediaFromChoices: () => removeProductMediaFromChoices4,
  removeProductsFromCollection: () => removeProductsFromCollection4,
  removeRibbon: () => removeRibbon4,
  resetAllProductVariantData: () => resetAllProductVariantData3,
  updateCollection: () => updateCollection4,
  updateProduct: () => updateProduct4,
  updateProductVariants: () => updateProductVariants3
});
module.exports = __toCommonJS(index_exports);

// src/stores-catalog-v1-product-products.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_float3 = require("@wix/sdk-runtime/transformations/float");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/stores-catalog-v1-product-products.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/stores-catalog-v1-product-products.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixCatalogApiV1CatalogReadApiUrl(opts) {
  const domainToMappings = {
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      },
      {
        srcPath: "/catalog-read-proxy",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores-reader/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores-reader/v1/variants",
        destPath: "/v1/variants"
      },
      {
        srcPath: "/stores-reader/api/v1/products",
        destPath: "/api/v1/products"
      },
      {
        srcPath: "/stores-reader/v1/collections",
        destPath: "/v1/collections"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/catalog-read-proxy",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
function resolveWixCatalogApiV1CatalogWriteApiUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/collections",
        destPath: "/v1/collections"
      },
      {
        srcPath: "/stores/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores/v1/variants",
        destPath: "/v1/variants"
      },
      {
        srcPath: "/stores/v1/bulk/products",
        destPath: "/v1/bulk/products"
      },
      {
        srcPath: "/stores/v1/products-digital",
        destPath: "/v1/products-digital"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      },
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_products";
function createProduct(payload) {
  function __createProduct({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "product.weight" },
          { path: "product.price.price" },
          { path: "product.price.pricePerUnit" },
          { path: "product.priceData.price" },
          { path: "product.priceData.pricePerUnit" },
          { path: "product.convertedPriceData.price" },
          { path: "product.convertedPriceData.pricePerUnit" },
          { path: "product.costAndProfitData.itemCost" },
          { path: "product.variants.variant.priceData.price" },
          { path: "product.variants.variant.priceData.pricePerUnit" },
          { path: "product.variants.variant.convertedPriceData.price" },
          { path: "product.variants.variant.convertedPriceData.pricePerUnit" },
          { path: "product.variants.variant.costAndProfitData.itemCost" },
          { path: "product.weightRange.minValue" },
          { path: "product.weightRange.maxValue" },
          { path: "product.price.discountedPrice" },
          { path: "product.priceData.discountedPrice" },
          { path: "product.convertedPriceData.discountedPrice" },
          { path: "product.priceRange.minValue" },
          { path: "product.priceRange.maxValue" },
          { path: "product.costAndProfitData.profit" },
          { path: "product.costAndProfitData.profitMargin" },
          { path: "product.costRange.minValue" },
          { path: "product.costRange.maxValue" },
          { path: "product.pricePerUnitData.totalQuantity" },
          { path: "product.pricePerUnitData.baseQuantity" },
          { path: "product.discount.value" },
          { path: "product.variants.variant.weight" },
          { path: "product.variants.variant.priceData.discountedPrice" },
          {
            path: "product.variants.variant.convertedPriceData.discountedPrice"
          },
          { path: "product.variants.variant.costAndProfitData.profit" },
          { path: "product.variants.variant.costAndProfitData.profitMargin" }
        ]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "product.lastUpdated" },
          { path: "product.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.CreateProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createProduct;
}
function updateProduct(payload) {
  function __updateProduct({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "product.weight" },
          { path: "product.price.price" },
          { path: "product.price.pricePerUnit" },
          { path: "product.priceData.price" },
          { path: "product.priceData.pricePerUnit" },
          { path: "product.convertedPriceData.price" },
          { path: "product.convertedPriceData.pricePerUnit" },
          { path: "product.costAndProfitData.itemCost" },
          { path: "product.variants.variant.priceData.price" },
          { path: "product.variants.variant.priceData.pricePerUnit" },
          { path: "product.variants.variant.convertedPriceData.price" },
          { path: "product.variants.variant.convertedPriceData.pricePerUnit" },
          { path: "product.variants.variant.costAndProfitData.itemCost" },
          { path: "product.weightRange.minValue" },
          { path: "product.weightRange.maxValue" },
          { path: "product.price.discountedPrice" },
          { path: "product.priceData.discountedPrice" },
          { path: "product.convertedPriceData.discountedPrice" },
          { path: "product.priceRange.minValue" },
          { path: "product.priceRange.maxValue" },
          { path: "product.costAndProfitData.profit" },
          { path: "product.costAndProfitData.profitMargin" },
          { path: "product.costRange.minValue" },
          { path: "product.costRange.maxValue" },
          { path: "product.pricePerUnitData.totalQuantity" },
          { path: "product.pricePerUnitData.baseQuantity" },
          { path: "product.discount.value" },
          { path: "product.variants.variant.weight" },
          { path: "product.variants.variant.priceData.discountedPrice" },
          {
            path: "product.variants.variant.convertedPriceData.discountedPrice"
          },
          { path: "product.variants.variant.costAndProfitData.profit" },
          { path: "product.variants.variant.costAndProfitData.profitMargin" }
        ]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "product.lastUpdated" },
          { path: "product.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{product.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateProduct;
}
function deleteProduct(payload) {
  function __deleteProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteProduct;
}
function updateVariants(payload) {
  function __updateVariants({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "variants.price" },
          { path: "variants.cost" },
          { path: "variants.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/variants",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.variant.weight" },
            { path: "variants.variant.priceData.discountedPrice" },
            { path: "variants.variant.convertedPriceData.discountedPrice" },
            { path: "variants.variant.costAndProfitData.profit" },
            { path: "variants.variant.costAndProfitData.profitMargin" },
            { path: "variants.variant.priceData.price" },
            { path: "variants.variant.priceData.pricePerUnit" },
            { path: "variants.variant.convertedPriceData.price" },
            { path: "variants.variant.convertedPriceData.pricePerUnit" },
            { path: "variants.variant.costAndProfitData.itemCost" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateVariants;
}
function resetAllVariantData(payload) {
  function __resetAllVariantData({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.ResetAllVariantData",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/variants/resetToDefault",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __resetAllVariantData;
}
function addProductsToCollection(payload) {
  function __addProductsToCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductsToCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}/productIds",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductsToCollection;
}
function removeProductsFromCollection(payload) {
  function __removeProductsFromCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductsFromCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}/productIds/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductsFromCollection;
}
function addProductMedia(payload) {
  function __addProductMedia({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductMedia",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/media",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductMedia;
}
function removeProductMedia(payload) {
  function __removeProductMedia({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductMedia",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/media/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductMedia;
}
function addProductMediaToChoices(payload) {
  function __addProductMediaToChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductMediaToChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/choices/media",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductMediaToChoices;
}
function removeProductMediaFromChoices(payload) {
  function __removeProductMediaFromChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductMediaFromChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/choices/media/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductMediaFromChoices;
}
function deleteProductOptions(payload) {
  function __deleteProductOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteProductOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/options",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteProductOptions;
}
function removeBrand(payload) {
  function __removeBrand({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveBrand",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/remove-brand",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeBrand;
}
function createCollection(payload) {
  function __createCollection({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "collection.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.CreateCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __createCollection;
}
function updateCollection(payload) {
  function __updateCollection({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "collection.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{collection.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __updateCollection;
}
function deleteCollection(payload) {
  function __deleteCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteCollection;
}
function removeRibbon(payload) {
  function __removeRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/remove-ribbon",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeRibbon;
}
function bulkUpdateProducts(payload) {
  function __bulkUpdateProducts({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "set.price" },
          { path: "set.cost" },
          { path: "set.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.BulkUpdateProducts",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/bulk/products/update",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkUpdateProducts;
}
function bulkAdjustProductProperties(payload) {
  function __bulkAdjustProductProperties({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "adjust.price.amount" },
          { path: "adjust.cost.amount" },
          { path: "adjust.weight.amount" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.BulkAdjustProductProperties",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/bulk/products/adjust-properties",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkAdjustProductProperties;
}
function queryProductsPlatformized(payload) {
  function __queryProductsPlatformized({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryProductsPlatformized",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/query-platformized",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "products.weight" },
            { path: "products.price.price" },
            { path: "products.price.pricePerUnit" },
            { path: "products.priceData.price" },
            { path: "products.priceData.pricePerUnit" },
            { path: "products.convertedPriceData.price" },
            { path: "products.convertedPriceData.pricePerUnit" },
            { path: "products.costAndProfitData.itemCost" },
            { path: "products.variants.variant.priceData.price" },
            { path: "products.variants.variant.priceData.pricePerUnit" },
            { path: "products.variants.variant.convertedPriceData.price" },
            {
              path: "products.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "products.variants.variant.costAndProfitData.itemCost" },
            { path: "products.weightRange.minValue" },
            { path: "products.weightRange.maxValue" },
            { path: "products.price.discountedPrice" },
            { path: "products.priceData.discountedPrice" },
            { path: "products.convertedPriceData.discountedPrice" },
            { path: "products.priceRange.minValue" },
            { path: "products.priceRange.maxValue" },
            { path: "products.costAndProfitData.profit" },
            { path: "products.costAndProfitData.profitMargin" },
            { path: "products.costRange.minValue" },
            { path: "products.costRange.maxValue" },
            { path: "products.pricePerUnitData.totalQuantity" },
            { path: "products.pricePerUnitData.baseQuantity" },
            { path: "products.discount.value" },
            { path: "products.variants.variant.weight" },
            { path: "products.variants.variant.priceData.discountedPrice" },
            {
              path: "products.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "products.variants.variant.costAndProfitData.profit" },
            {
              path: "products.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "products.lastUpdated" },
            { path: "products.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixCatalogApiV1CatalogReadApiUrl({
            protoPath: "/v1/products/query-platformized",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryProductsPlatformized;
}
function getProduct(payload) {
  function __getProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "GET",
          url: resolveWixCatalogApiV1CatalogReadApiUrl({
            protoPath: "/v1/products/{id}",
            data: payload,
            host
          }),
          params: (0, import_rest_modules.toURLSearchParams)(payload)
        }
      ]
    };
    return metadata;
  }
  return __getProduct;
}
function getCollectionBySlug(payload) {
  function __getCollectionBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetCollectionBySlug",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/collections/slug/{slug}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __getCollectionBySlug;
}
function productOptionsAvailability(payload) {
  function __productOptionsAvailability({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.ProductOptionsAvailability",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}/productOptionsAvailability",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "selectedVariant.weight" },
            { path: "selectedVariant.price.price" },
            { path: "selectedVariant.price.pricePerUnit" },
            { path: "selectedVariant.convertedPriceData.price" },
            { path: "selectedVariant.convertedPriceData.pricePerUnit" },
            { path: "selectedVariant.price.discountedPrice" },
            { path: "selectedVariant.convertedPriceData.discountedPrice" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __productOptionsAvailability;
}
function queryProductVariants(payload) {
  function __queryProductVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryProductVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}/variants/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.variant.weight" },
            { path: "variants.variant.priceData.discountedPrice" },
            { path: "variants.variant.convertedPriceData.discountedPrice" },
            { path: "variants.variant.costAndProfitData.profit" },
            { path: "variants.variant.costAndProfitData.profitMargin" },
            { path: "variants.variant.priceData.price" },
            { path: "variants.variant.priceData.pricePerUnit" },
            { path: "variants.variant.convertedPriceData.price" },
            { path: "variants.variant.convertedPriceData.pricePerUnit" },
            { path: "variants.variant.costAndProfitData.itemCost" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryProductVariants;
}
function queryStoreVariants(payload) {
  function __queryStoreVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryStoreVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/variants/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "variants.media.image.urlExpirationDate" },
            { path: "variants.media.video.urlExpirationDate" },
            { path: "variants.media.video.resolutions.urlExpirationDate" },
            {
              path: "variants.media.video.resolutions.poster.urlExpirationDate"
            },
            { path: "variants.media.video.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.media.image.focalPoint.x" },
            { path: "variants.media.image.focalPoint.y" },
            { path: "variants.media.video.resolutions.poster.focalPoint.x" },
            { path: "variants.media.video.resolutions.poster.focalPoint.y" },
            { path: "variants.media.video.posters.focalPoint.x" },
            { path: "variants.media.video.posters.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryStoreVariants;
}
function getStoreVariant(payload) {
  function __getStoreVariant({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetStoreVariant",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/variants/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "variant.media.image.urlExpirationDate" },
            { path: "variant.media.video.urlExpirationDate" },
            { path: "variant.media.video.resolutions.urlExpirationDate" },
            {
              path: "variant.media.video.resolutions.poster.urlExpirationDate"
            },
            { path: "variant.media.video.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "variant.media.image.focalPoint.x" },
            { path: "variant.media.image.focalPoint.y" },
            { path: "variant.media.video.resolutions.poster.focalPoint.x" },
            { path: "variant.media.video.resolutions.poster.focalPoint.y" },
            { path: "variant.media.video.posters.focalPoint.x" },
            { path: "variant.media.video.posters.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getStoreVariant;
}

// src/stores-catalog-v1-product-products.universal.ts
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_video_v2 = require("@wix/sdk-runtime/transformations/video-v2");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var ProductType = /* @__PURE__ */ ((ProductType2) => {
  ProductType2["unspecified_product_type"] = "unspecified_product_type";
  ProductType2["physical"] = "physical";
  ProductType2["digital"] = "digital";
  return ProductType2;
})(ProductType || {});
var InventoryStatus = /* @__PURE__ */ ((InventoryStatus2) => {
  InventoryStatus2["IN_STOCK"] = "IN_STOCK";
  InventoryStatus2["OUT_OF_STOCK"] = "OUT_OF_STOCK";
  InventoryStatus2["PARTIALLY_OUT_OF_STOCK"] = "PARTIALLY_OUT_OF_STOCK";
  return InventoryStatus2;
})(InventoryStatus || {});
var MeasurementUnit = /* @__PURE__ */ ((MeasurementUnit2) => {
  MeasurementUnit2["UNSPECIFIED"] = "UNSPECIFIED";
  MeasurementUnit2["ML"] = "ML";
  MeasurementUnit2["CL"] = "CL";
  MeasurementUnit2["L"] = "L";
  MeasurementUnit2["CBM"] = "CBM";
  MeasurementUnit2["MG"] = "MG";
  MeasurementUnit2["G"] = "G";
  MeasurementUnit2["KG"] = "KG";
  MeasurementUnit2["MM"] = "MM";
  MeasurementUnit2["CM"] = "CM";
  MeasurementUnit2["M"] = "M";
  MeasurementUnit2["SQM"] = "SQM";
  MeasurementUnit2["OZ"] = "OZ";
  MeasurementUnit2["LB"] = "LB";
  MeasurementUnit2["FLOZ"] = "FLOZ";
  MeasurementUnit2["PT"] = "PT";
  MeasurementUnit2["QT"] = "QT";
  MeasurementUnit2["GAL"] = "GAL";
  MeasurementUnit2["IN"] = "IN";
  MeasurementUnit2["FT"] = "FT";
  MeasurementUnit2["YD"] = "YD";
  MeasurementUnit2["SQFT"] = "SQFT";
  return MeasurementUnit2;
})(MeasurementUnit || {});
var MediaItemType = /* @__PURE__ */ ((MediaItemType2) => {
  MediaItemType2["unspecified_media_item_type"] = "unspecified_media_item_type";
  MediaItemType2["image"] = "image";
  MediaItemType2["video"] = "video";
  MediaItemType2["audio"] = "audio";
  MediaItemType2["document"] = "document";
  MediaItemType2["zip"] = "zip";
  return MediaItemType2;
})(MediaItemType || {});
var OptionType = /* @__PURE__ */ ((OptionType2) => {
  OptionType2["unspecified_option_type"] = "unspecified_option_type";
  OptionType2["drop_down"] = "drop_down";
  OptionType2["color"] = "color";
  return OptionType2;
})(OptionType || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["UNDEFINED"] = "UNDEFINED";
  DiscountType2["NONE"] = "NONE";
  DiscountType2["AMOUNT"] = "AMOUNT";
  DiscountType2["PERCENT"] = "PERCENT";
  return DiscountType2;
})(DiscountType || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var Version = /* @__PURE__ */ ((Version2) => {
  Version2["V1_CATALOG"] = "V1_CATALOG";
  Version2["V3_CATALOG"] = "V3_CATALOG";
  Version2["STORES_NOT_INSTALLED"] = "STORES_NOT_INSTALLED";
  return Version2;
})(Version || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createProduct2(product) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ product });
  const reqOpts = createProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { product: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["product"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateProduct2(_id, product) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    product: { ...product, id: _id }
  });
  const reqOpts = updateProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { product: "$[1]" },
        explicitPathsToArguments: { "product.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "product"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteProduct2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateProductVariants(_id, variants) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    variants
  });
  const reqOpts = updateVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", variants: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "variants"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function resetAllProductVariantData(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = resetAllVariantData(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addProductsToCollection2(_id, productIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    productIds
  });
  const reqOpts = addProductsToCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", productIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "productIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeProductsFromCollection2(_id, productIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    productIds
  });
  const reqOpts = removeProductsFromCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", productIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "productIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addProductMedia2(_id, media) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    media
  });
  const reqOpts = addProductMedia(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", media: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "media"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeProductMedia2(_id, mediaIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    mediaIds
  });
  const reqOpts = removeProductMedia(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", mediaIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "mediaIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addProductMediaToChoices2(_id, media) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    media
  });
  const reqOpts = addProductMediaToChoices(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", media: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "media"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeProductMediaFromChoices2(_id, media) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    media
  });
  const reqOpts = removeProductMediaFromChoices(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", media: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "media"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteProductOptions2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteProductOptions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeBrand2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = removeBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createCollection2(collection) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    collection
  });
  const reqOpts = createCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { collection: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["collection"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCollection2(_id, collection) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    collection: { ...collection, id: _id }
  });
  const reqOpts = updateCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { collection: "$[1]" },
        explicitPathsToArguments: { "collection.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "collection"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCollection2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeRibbon2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = removeRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateProductsProperty(ids, set) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ ids, set });
  const reqOpts = bulkUpdateProducts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ids: "$[0]", set: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["ids", "set"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkAdjustProductProperty(adjust, ids) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    adjust,
    ids
  });
  const reqOpts = bulkAdjustProductProperties(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { adjust: "$[0]", ids: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["adjust", "ids"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryProducts() {
  const { httpClient, sideEffects } = arguments[0];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryProductsPlatformized(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [])
      );
      return {
        items: transformedData?.products,
        pagingMetadata: transformedData?.metadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "OFFSET",
    transformationPaths: {}
  });
}
async function getProduct2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    includeMerchantSpecificData: options?.includeMerchantSpecificData
  });
  const reqOpts = getProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          includeMerchantSpecificData: "$[1].includeMerchantSpecificData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCollectionBySlug2(slug) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ slug });
  const reqOpts = getCollectionBySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { slug: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["slug"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getProductOptionsAvailability(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    options
  });
  const reqOpts = productOptionsAvailability(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", options: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryProductVariants2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    choices: options?.choices,
    variantIds: options?.variantIds,
    paging: options?.paging,
    includeMerchantSpecificData: options?.includeMerchantSpecificData
  });
  const reqOpts = queryProductVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          choices: "$[1].choices",
          variantIds: "$[1].variantIds",
          paging: "$[1].paging",
          includeMerchantSpecificData: "$[1].includeMerchantSpecificData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryStoreVariants2(query) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ query });
  const reqOpts = queryStoreVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image.transformRESTImageToSDKImage,
          paths: [{ path: "variants.media.image" }]
        },
        {
          transformFn: import_video_v2.transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "variants.media.video" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["query"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getStoreVariant2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getStoreVariant(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_image.transformRESTImageToSDKImage,
          paths: [{ path: "variant.media.image" }]
        },
        {
          transformFn: import_video_v2.transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "variant.media.video" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v1-product-products.public.ts
function createProduct3(httpClient) {
  return (product) => createProduct2(
    product,
    // @ts-ignore
    { httpClient }
  );
}
function updateProduct3(httpClient) {
  return (_id, product) => updateProduct2(
    _id,
    product,
    // @ts-ignore
    { httpClient }
  );
}
function deleteProduct3(httpClient) {
  return (_id) => deleteProduct2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateProductVariants2(httpClient) {
  return (_id, variants) => updateProductVariants(
    _id,
    variants,
    // @ts-ignore
    { httpClient }
  );
}
function resetAllProductVariantData2(httpClient) {
  return (_id) => resetAllProductVariantData(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function addProductsToCollection3(httpClient) {
  return (_id, productIds) => addProductsToCollection2(
    _id,
    productIds,
    // @ts-ignore
    { httpClient }
  );
}
function removeProductsFromCollection3(httpClient) {
  return (_id, productIds) => removeProductsFromCollection2(
    _id,
    productIds,
    // @ts-ignore
    { httpClient }
  );
}
function addProductMedia3(httpClient) {
  return (_id, media) => addProductMedia2(
    _id,
    media,
    // @ts-ignore
    { httpClient }
  );
}
function removeProductMedia3(httpClient) {
  return (_id, mediaIds) => removeProductMedia2(
    _id,
    mediaIds,
    // @ts-ignore
    { httpClient }
  );
}
function addProductMediaToChoices3(httpClient) {
  return (_id, media) => addProductMediaToChoices2(
    _id,
    media,
    // @ts-ignore
    { httpClient }
  );
}
function removeProductMediaFromChoices3(httpClient) {
  return (_id, media) => removeProductMediaFromChoices2(
    _id,
    media,
    // @ts-ignore
    { httpClient }
  );
}
function deleteProductOptions3(httpClient) {
  return (_id) => deleteProductOptions2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeBrand3(httpClient) {
  return (_id) => removeBrand2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function createCollection3(httpClient) {
  return (collection) => createCollection2(
    collection,
    // @ts-ignore
    { httpClient }
  );
}
function updateCollection3(httpClient) {
  return (_id, collection) => updateCollection2(
    _id,
    collection,
    // @ts-ignore
    { httpClient }
  );
}
function deleteCollection3(httpClient) {
  return (_id) => deleteCollection2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeRibbon3(httpClient) {
  return (_id) => removeRibbon2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateProductsProperty2(httpClient) {
  return (ids, set) => bulkUpdateProductsProperty(
    ids,
    set,
    // @ts-ignore
    { httpClient }
  );
}
function bulkAdjustProductProperty2(httpClient) {
  return (adjust, ids) => bulkAdjustProductProperty(
    adjust,
    ids,
    // @ts-ignore
    { httpClient }
  );
}
function queryProducts2(httpClient) {
  return () => queryProducts(
    // @ts-ignore
    { httpClient }
  );
}
function getProduct3(httpClient) {
  return (_id, options) => getProduct2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getCollectionBySlug3(httpClient) {
  return (slug) => getCollectionBySlug2(
    slug,
    // @ts-ignore
    { httpClient }
  );
}
function getProductOptionsAvailability2(httpClient) {
  return (_id, options) => getProductOptionsAvailability(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryProductVariants3(httpClient) {
  return (_id, options) => queryProductVariants2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryStoreVariants3(httpClient) {
  return (query) => queryStoreVariants2(
    query,
    // @ts-ignore
    { httpClient }
  );
}
function getStoreVariant3(httpClient) {
  return (_id) => getStoreVariant2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
var onProductCollectionChanged = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.CollectionChanged",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(event)
)();
var onProductCollectionCreated = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.CollectionCreated",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(event)
)();
var onProductCollectionDeleted = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.CollectionDeleted",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(event)
)();
var onProductChanged = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.ProductChanged",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(event)
)();
var onProductCreated = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.ProductCreated",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_float3.transformRESTFloatToSDKFloat,
        paths: [
          { path: "data.price.price" },
          { path: "data.price.pricePerUnit" },
          { path: "data.costAndProfitData.itemCost" },
          { path: "data.price.discountedPrice" },
          { path: "data.costAndProfitData.profit" },
          { path: "data.costAndProfitData.profitMargin" }
        ]
      }
    ])
  )
)();
var onProductDeleted = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.ProductDeleted",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(event)
)();
var onProductVariantsChanged = (0, import_sdk_types.EventDefinition)(
  "com.wix.ecommerce.catalog.api.v1.VariantsChanged",
  false,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(event)
)();

// src/stores-catalog-v1-product-products.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createProduct4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createProduct3);
var updateProduct4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateProduct3);
var deleteProduct4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteProduct3);
var updateProductVariants3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateProductVariants2);
var resetAllProductVariantData3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(resetAllProductVariantData2);
var addProductsToCollection4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addProductsToCollection3);
var removeProductsFromCollection4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeProductsFromCollection3);
var addProductMedia4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addProductMedia3);
var removeProductMedia4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeProductMedia3);
var addProductMediaToChoices4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(addProductMediaToChoices3);
var removeProductMediaFromChoices4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeProductMediaFromChoices3);
var deleteProductOptions4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteProductOptions3);
var removeBrand4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeBrand3);
var createCollection4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createCollection3);
var updateCollection4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateCollection3);
var deleteCollection4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteCollection3);
var removeRibbon4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(removeRibbon3);
var bulkUpdateProductsProperty3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkUpdateProductsProperty2);
var bulkAdjustProductProperty3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkAdjustProductProperty2);
var queryProducts3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryProducts2);
var getProduct4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getProduct3);
var getCollectionBySlug4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getCollectionBySlug3);
var getProductOptionsAvailability3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getProductOptionsAvailability2);
var queryProductVariants4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryProductVariants3);
var queryStoreVariants4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryStoreVariants3);
var getStoreVariant4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getStoreVariant3);
var onProductCollectionChanged2 = (0, import_event_definition_modules.createEventModule)(onProductCollectionChanged);
var onProductCollectionCreated2 = (0, import_event_definition_modules.createEventModule)(onProductCollectionCreated);
var onProductCollectionDeleted2 = (0, import_event_definition_modules.createEventModule)(onProductCollectionDeleted);
var onProductChanged2 = (0, import_event_definition_modules.createEventModule)(onProductChanged);
var onProductCreated2 = (0, import_event_definition_modules.createEventModule)(onProductCreated);
var onProductDeleted2 = (0, import_event_definition_modules.createEventModule)(onProductDeleted);
var onProductVariantsChanged2 = (0, import_event_definition_modules.createEventModule)(onProductVariantsChanged);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DiscountType,
  FileType,
  InventoryStatus,
  MeasurementUnit,
  MediaItemType,
  OptionType,
  ProductType,
  SortOrder,
  Version,
  WebhookIdentityType,
  addProductMedia,
  addProductMediaToChoices,
  addProductsToCollection,
  bulkAdjustProductProperty,
  bulkUpdateProductsProperty,
  createCollection,
  createProduct,
  deleteCollection,
  deleteProduct,
  deleteProductOptions,
  getCollectionBySlug,
  getProduct,
  getProductOptionsAvailability,
  getStoreVariant,
  onProductChanged,
  onProductCollectionChanged,
  onProductCollectionCreated,
  onProductCollectionDeleted,
  onProductCreated,
  onProductDeleted,
  onProductVariantsChanged,
  queryProductVariants,
  queryProducts,
  queryStoreVariants,
  removeBrand,
  removeProductMedia,
  removeProductMediaFromChoices,
  removeProductsFromCollection,
  removeRibbon,
  resetAllProductVariantData,
  updateCollection,
  updateProduct,
  updateProductVariants
});
//# sourceMappingURL=index.js.map