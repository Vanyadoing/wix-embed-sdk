// src/stores-catalog-v1-product-products.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixCatalogApiV1CatalogReadApiUrl(opts) {
  const domainToMappings = {
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      },
      {
        srcPath: "/catalog-read-proxy",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores-reader/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores-reader/v1/variants",
        destPath: "/v1/variants"
      },
      {
        srcPath: "/stores-reader/api/v1/products",
        destPath: "/api/v1/products"
      },
      {
        srcPath: "/stores-reader/v1/collections",
        destPath: "/v1/collections"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/catalog-read-proxy",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveWixCatalogApiV1CatalogWriteApiUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/collections",
        destPath: "/v1/collections"
      },
      {
        srcPath: "/stores/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores/v1/variants",
        destPath: "/v1/variants"
      },
      {
        srcPath: "/stores/v1/bulk/products",
        destPath: "/v1/bulk/products"
      },
      {
        srcPath: "/stores/v1/products-digital",
        destPath: "/v1/products-digital"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      },
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_products";
function createProduct(payload) {
  function __createProduct({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "product.weight" },
          { path: "product.price.price" },
          { path: "product.price.pricePerUnit" },
          { path: "product.priceData.price" },
          { path: "product.priceData.pricePerUnit" },
          { path: "product.convertedPriceData.price" },
          { path: "product.convertedPriceData.pricePerUnit" },
          { path: "product.costAndProfitData.itemCost" },
          { path: "product.variants.variant.priceData.price" },
          { path: "product.variants.variant.priceData.pricePerUnit" },
          { path: "product.variants.variant.convertedPriceData.price" },
          { path: "product.variants.variant.convertedPriceData.pricePerUnit" },
          { path: "product.variants.variant.costAndProfitData.itemCost" },
          { path: "product.weightRange.minValue" },
          { path: "product.weightRange.maxValue" },
          { path: "product.price.discountedPrice" },
          { path: "product.priceData.discountedPrice" },
          { path: "product.convertedPriceData.discountedPrice" },
          { path: "product.priceRange.minValue" },
          { path: "product.priceRange.maxValue" },
          { path: "product.costAndProfitData.profit" },
          { path: "product.costAndProfitData.profitMargin" },
          { path: "product.costRange.minValue" },
          { path: "product.costRange.maxValue" },
          { path: "product.pricePerUnitData.totalQuantity" },
          { path: "product.pricePerUnitData.baseQuantity" },
          { path: "product.discount.value" },
          { path: "product.variants.variant.weight" },
          { path: "product.variants.variant.priceData.discountedPrice" },
          {
            path: "product.variants.variant.convertedPriceData.discountedPrice"
          },
          { path: "product.variants.variant.costAndProfitData.profit" },
          { path: "product.variants.variant.costAndProfitData.profitMargin" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "product.lastUpdated" },
          { path: "product.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.CreateProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createProduct;
}
function updateProduct(payload) {
  function __updateProduct({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "product.weight" },
          { path: "product.price.price" },
          { path: "product.price.pricePerUnit" },
          { path: "product.priceData.price" },
          { path: "product.priceData.pricePerUnit" },
          { path: "product.convertedPriceData.price" },
          { path: "product.convertedPriceData.pricePerUnit" },
          { path: "product.costAndProfitData.itemCost" },
          { path: "product.variants.variant.priceData.price" },
          { path: "product.variants.variant.priceData.pricePerUnit" },
          { path: "product.variants.variant.convertedPriceData.price" },
          { path: "product.variants.variant.convertedPriceData.pricePerUnit" },
          { path: "product.variants.variant.costAndProfitData.itemCost" },
          { path: "product.weightRange.minValue" },
          { path: "product.weightRange.maxValue" },
          { path: "product.price.discountedPrice" },
          { path: "product.priceData.discountedPrice" },
          { path: "product.convertedPriceData.discountedPrice" },
          { path: "product.priceRange.minValue" },
          { path: "product.priceRange.maxValue" },
          { path: "product.costAndProfitData.profit" },
          { path: "product.costAndProfitData.profitMargin" },
          { path: "product.costRange.minValue" },
          { path: "product.costRange.maxValue" },
          { path: "product.pricePerUnitData.totalQuantity" },
          { path: "product.pricePerUnitData.baseQuantity" },
          { path: "product.discount.value" },
          { path: "product.variants.variant.weight" },
          { path: "product.variants.variant.priceData.discountedPrice" },
          {
            path: "product.variants.variant.convertedPriceData.discountedPrice"
          },
          { path: "product.variants.variant.costAndProfitData.profit" },
          { path: "product.variants.variant.costAndProfitData.profitMargin" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "product.lastUpdated" },
          { path: "product.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{product.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateProduct;
}
function deleteProduct(payload) {
  function __deleteProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteProduct;
}
function updateVariants(payload) {
  function __updateVariants({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "variants.price" },
          { path: "variants.cost" },
          { path: "variants.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/variants",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.variant.weight" },
            { path: "variants.variant.priceData.discountedPrice" },
            { path: "variants.variant.convertedPriceData.discountedPrice" },
            { path: "variants.variant.costAndProfitData.profit" },
            { path: "variants.variant.costAndProfitData.profitMargin" },
            { path: "variants.variant.priceData.price" },
            { path: "variants.variant.priceData.pricePerUnit" },
            { path: "variants.variant.convertedPriceData.price" },
            { path: "variants.variant.convertedPriceData.pricePerUnit" },
            { path: "variants.variant.costAndProfitData.itemCost" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateVariants;
}
function resetAllVariantData(payload) {
  function __resetAllVariantData({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.ResetAllVariantData",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/variants/resetToDefault",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __resetAllVariantData;
}
function addProductsToCollection(payload) {
  function __addProductsToCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductsToCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}/productIds",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductsToCollection;
}
function removeProductsFromCollection(payload) {
  function __removeProductsFromCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductsFromCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}/productIds/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductsFromCollection;
}
function addProductMedia(payload) {
  function __addProductMedia({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductMedia",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/media",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductMedia;
}
function removeProductMedia(payload) {
  function __removeProductMedia({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductMedia",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/media/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductMedia;
}
function addProductMediaToChoices(payload) {
  function __addProductMediaToChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductMediaToChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/choices/media",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductMediaToChoices;
}
function removeProductMediaFromChoices(payload) {
  function __removeProductMediaFromChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductMediaFromChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/choices/media/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductMediaFromChoices;
}
function deleteProductOptions(payload) {
  function __deleteProductOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteProductOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/options",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteProductOptions;
}
function removeBrand(payload) {
  function __removeBrand({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveBrand",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/remove-brand",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeBrand;
}
function createCollection(payload) {
  function __createCollection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "collection.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.CreateCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __createCollection;
}
function updateCollection(payload) {
  function __updateCollection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "collection.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{collection.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __updateCollection;
}
function deleteCollection(payload) {
  function __deleteCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteCollection;
}
function removeRibbon(payload) {
  function __removeRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/remove-ribbon",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeRibbon;
}
function bulkUpdateProducts(payload) {
  function __bulkUpdateProducts({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "set.price" },
          { path: "set.cost" },
          { path: "set.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.BulkUpdateProducts",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/bulk/products/update",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkUpdateProducts;
}
function bulkAdjustProductProperties(payload) {
  function __bulkAdjustProductProperties({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "adjust.price.amount" },
          { path: "adjust.cost.amount" },
          { path: "adjust.weight.amount" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.BulkAdjustProductProperties",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/bulk/products/adjust-properties",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkAdjustProductProperties;
}
function queryProductsPlatformized(payload) {
  function __queryProductsPlatformized({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryProductsPlatformized",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/query-platformized",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "products.weight" },
            { path: "products.price.price" },
            { path: "products.price.pricePerUnit" },
            { path: "products.priceData.price" },
            { path: "products.priceData.pricePerUnit" },
            { path: "products.convertedPriceData.price" },
            { path: "products.convertedPriceData.pricePerUnit" },
            { path: "products.costAndProfitData.itemCost" },
            { path: "products.variants.variant.priceData.price" },
            { path: "products.variants.variant.priceData.pricePerUnit" },
            { path: "products.variants.variant.convertedPriceData.price" },
            {
              path: "products.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "products.variants.variant.costAndProfitData.itemCost" },
            { path: "products.weightRange.minValue" },
            { path: "products.weightRange.maxValue" },
            { path: "products.price.discountedPrice" },
            { path: "products.priceData.discountedPrice" },
            { path: "products.convertedPriceData.discountedPrice" },
            { path: "products.priceRange.minValue" },
            { path: "products.priceRange.maxValue" },
            { path: "products.costAndProfitData.profit" },
            { path: "products.costAndProfitData.profitMargin" },
            { path: "products.costRange.minValue" },
            { path: "products.costRange.maxValue" },
            { path: "products.pricePerUnitData.totalQuantity" },
            { path: "products.pricePerUnitData.baseQuantity" },
            { path: "products.discount.value" },
            { path: "products.variants.variant.weight" },
            { path: "products.variants.variant.priceData.discountedPrice" },
            {
              path: "products.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "products.variants.variant.costAndProfitData.profit" },
            {
              path: "products.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "products.lastUpdated" },
            { path: "products.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixCatalogApiV1CatalogReadApiUrl({
            protoPath: "/v1/products/query-platformized",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryProductsPlatformized;
}
function getProduct(payload) {
  function __getProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "GET",
          url: resolveWixCatalogApiV1CatalogReadApiUrl({
            protoPath: "/v1/products/{id}",
            data: payload,
            host
          }),
          params: toURLSearchParams(payload)
        }
      ]
    };
    return metadata;
  }
  return __getProduct;
}
function getCollectionBySlug(payload) {
  function __getCollectionBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetCollectionBySlug",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/collections/slug/{slug}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __getCollectionBySlug;
}
function productOptionsAvailability(payload) {
  function __productOptionsAvailability({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.ProductOptionsAvailability",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}/productOptionsAvailability",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "selectedVariant.weight" },
            { path: "selectedVariant.price.price" },
            { path: "selectedVariant.price.pricePerUnit" },
            { path: "selectedVariant.convertedPriceData.price" },
            { path: "selectedVariant.convertedPriceData.pricePerUnit" },
            { path: "selectedVariant.price.discountedPrice" },
            { path: "selectedVariant.convertedPriceData.discountedPrice" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __productOptionsAvailability;
}
function queryProductVariants(payload) {
  function __queryProductVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryProductVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}/variants/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.variant.weight" },
            { path: "variants.variant.priceData.discountedPrice" },
            { path: "variants.variant.convertedPriceData.discountedPrice" },
            { path: "variants.variant.costAndProfitData.profit" },
            { path: "variants.variant.costAndProfitData.profitMargin" },
            { path: "variants.variant.priceData.price" },
            { path: "variants.variant.priceData.pricePerUnit" },
            { path: "variants.variant.convertedPriceData.price" },
            { path: "variants.variant.convertedPriceData.pricePerUnit" },
            { path: "variants.variant.costAndProfitData.itemCost" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryProductVariants;
}
function queryStoreVariants(payload) {
  function __queryStoreVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryStoreVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/variants/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "variants.media.image.urlExpirationDate" },
            { path: "variants.media.video.urlExpirationDate" },
            { path: "variants.media.video.resolutions.urlExpirationDate" },
            {
              path: "variants.media.video.resolutions.poster.urlExpirationDate"
            },
            { path: "variants.media.video.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.media.image.focalPoint.x" },
            { path: "variants.media.image.focalPoint.y" },
            { path: "variants.media.video.resolutions.poster.focalPoint.x" },
            { path: "variants.media.video.resolutions.poster.focalPoint.y" },
            { path: "variants.media.video.posters.focalPoint.x" },
            { path: "variants.media.video.posters.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryStoreVariants;
}
function getStoreVariant(payload) {
  function __getStoreVariant({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetStoreVariant",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/variants/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "variant.media.image.urlExpirationDate" },
            { path: "variant.media.video.urlExpirationDate" },
            { path: "variant.media.video.resolutions.urlExpirationDate" },
            {
              path: "variant.media.video.resolutions.poster.urlExpirationDate"
            },
            { path: "variant.media.video.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variant.media.image.focalPoint.x" },
            { path: "variant.media.image.focalPoint.y" },
            { path: "variant.media.video.resolutions.poster.focalPoint.x" },
            { path: "variant.media.video.resolutions.poster.focalPoint.y" },
            { path: "variant.media.video.posters.focalPoint.x" },
            { path: "variant.media.video.posters.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getStoreVariant;
}

// src/stores-catalog-v1-product-products.meta.ts
function createProduct2() {
  const payload = {};
  const getRequestOptions = createProduct(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateProduct2() {
  const payload = { product: { id: ":productId" } };
  const getRequestOptions = updateProduct(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/products/{product.id}",
    pathParams: { productId: "productId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteProduct2() {
  const payload = { id: ":id" };
  const getRequestOptions = deleteProduct(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/products/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateProductVariants() {
  const payload = { id: ":id" };
  const getRequestOptions = updateVariants(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/products/{id}/variants",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function resetAllProductVariantData() {
  const payload = { id: ":id" };
  const getRequestOptions = resetAllVariantData(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/variants/resetToDefault",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function addProductsToCollection2() {
  const payload = { id: ":id" };
  const getRequestOptions = addProductsToCollection(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/collections/{id}/productIds",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeProductsFromCollection2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeProductsFromCollection(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/collections/{id}/productIds/delete",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function addProductMedia2() {
  const payload = { id: ":id" };
  const getRequestOptions = addProductMedia(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/media",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeProductMedia2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeProductMedia(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/media/delete",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function addProductMediaToChoices2() {
  const payload = { id: ":id" };
  const getRequestOptions = addProductMediaToChoices(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/products/{id}/choices/media",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeProductMediaFromChoices2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeProductMediaFromChoices(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/choices/media/delete",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteProductOptions2() {
  const payload = { id: ":id" };
  const getRequestOptions = deleteProductOptions(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/products/{id}/options",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeBrand2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeBrand(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/remove-brand",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createCollection2() {
  const payload = {};
  const getRequestOptions = createCollection(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/collections",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateCollection2() {
  const payload = { collection: { id: ":collectionId" } };
  const getRequestOptions = updateCollection(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/collections/{collection.id}",
    pathParams: { collectionId: "collectionId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteCollection2() {
  const payload = { id: ":id" };
  const getRequestOptions = deleteCollection(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/collections/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function removeRibbon2() {
  const payload = { id: ":id" };
  const getRequestOptions = removeRibbon(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/remove-ribbon",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkUpdateProductsProperty() {
  const payload = {};
  const getRequestOptions = bulkUpdateProducts(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/bulk/products/update",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkAdjustProductProperty() {
  const payload = {};
  const getRequestOptions = bulkAdjustProductProperties(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/bulk/products/adjust-properties",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function queryProducts() {
  const payload = {};
  const getRequestOptions = queryProductsPlatformized(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/products/query-platformized",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getProduct2() {
  const payload = { id: ":id" };
  const getRequestOptions = getProduct(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/products/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getCollectionBySlug2() {
  const payload = { slug: ":slug" };
  const getRequestOptions = getCollectionBySlug(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/collections/slug/{slug}",
    pathParams: { slug: "slug" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getProductOptionsAvailability() {
  const payload = { id: ":id" };
  const getRequestOptions = productOptionsAvailability(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/productOptionsAvailability",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function queryProductVariants2() {
  const payload = { id: ":id" };
  const getRequestOptions = queryProductVariants(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/products/{id}/variants/query",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function queryStoreVariants2() {
  const payload = {};
  const getRequestOptions = queryStoreVariants(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/variants/query",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getStoreVariant2() {
  const payload = { id: ":id" };
  const getRequestOptions = getStoreVariant(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/variants/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
export {
  addProductMedia2 as addProductMedia,
  addProductMediaToChoices2 as addProductMediaToChoices,
  addProductsToCollection2 as addProductsToCollection,
  bulkAdjustProductProperty,
  bulkUpdateProductsProperty,
  createCollection2 as createCollection,
  createProduct2 as createProduct,
  deleteCollection2 as deleteCollection,
  deleteProduct2 as deleteProduct,
  deleteProductOptions2 as deleteProductOptions,
  getCollectionBySlug2 as getCollectionBySlug,
  getProduct2 as getProduct,
  getProductOptionsAvailability,
  getStoreVariant2 as getStoreVariant,
  queryProductVariants2 as queryProductVariants,
  queryProducts,
  queryStoreVariants2 as queryStoreVariants,
  removeBrand2 as removeBrand,
  removeProductMedia2 as removeProductMedia,
  removeProductMediaFromChoices2 as removeProductMediaFromChoices,
  removeProductsFromCollection2 as removeProductsFromCollection,
  removeRibbon2 as removeRibbon,
  resetAllProductVariantData,
  updateCollection2 as updateCollection,
  updateProduct2 as updateProduct,
  updateProductVariants
};
//# sourceMappingURL=meta.mjs.map