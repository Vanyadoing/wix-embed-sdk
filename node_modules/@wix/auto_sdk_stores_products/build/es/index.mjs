// src/stores-catalog-v1-product-products.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTFloatToSDKFloat as transformRESTFloatToSDKFloat2 } from "@wix/sdk-runtime/transformations/float";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/stores-catalog-v1-product-products.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v1-product-products.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixCatalogApiV1CatalogReadApiUrl(opts) {
  const domainToMappings = {
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      },
      {
        srcPath: "/catalog-read-proxy",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/catalog-reader-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores-reader/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores-reader/v1/variants",
        destPath: "/v1/variants"
      },
      {
        srcPath: "/stores-reader/api/v1/products",
        destPath: "/api/v1/products"
      },
      {
        srcPath: "/stores-reader/v1/collections",
        destPath: "/v1/collections"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/catalog-read-proxy",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/catalog-read-proxy",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveWixCatalogApiV1CatalogWriteApiUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/collections",
        destPath: "/v1/collections"
      },
      {
        srcPath: "/stores/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores/v1/variants",
        destPath: "/v1/variants"
      },
      {
        srcPath: "/stores/v1/bulk/products",
        destPath: "/v1/bulk/products"
      },
      {
        srcPath: "/stores/v1/products-digital",
        destPath: "/v1/products-digital"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      },
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/catalog-write-api-proxy",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_products";
function createProduct(payload) {
  function __createProduct({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "product.weight" },
          { path: "product.price.price" },
          { path: "product.price.pricePerUnit" },
          { path: "product.priceData.price" },
          { path: "product.priceData.pricePerUnit" },
          { path: "product.convertedPriceData.price" },
          { path: "product.convertedPriceData.pricePerUnit" },
          { path: "product.costAndProfitData.itemCost" },
          { path: "product.variants.variant.priceData.price" },
          { path: "product.variants.variant.priceData.pricePerUnit" },
          { path: "product.variants.variant.convertedPriceData.price" },
          { path: "product.variants.variant.convertedPriceData.pricePerUnit" },
          { path: "product.variants.variant.costAndProfitData.itemCost" },
          { path: "product.weightRange.minValue" },
          { path: "product.weightRange.maxValue" },
          { path: "product.price.discountedPrice" },
          { path: "product.priceData.discountedPrice" },
          { path: "product.convertedPriceData.discountedPrice" },
          { path: "product.priceRange.minValue" },
          { path: "product.priceRange.maxValue" },
          { path: "product.costAndProfitData.profit" },
          { path: "product.costAndProfitData.profitMargin" },
          { path: "product.costRange.minValue" },
          { path: "product.costRange.maxValue" },
          { path: "product.pricePerUnitData.totalQuantity" },
          { path: "product.pricePerUnitData.baseQuantity" },
          { path: "product.discount.value" },
          { path: "product.variants.variant.weight" },
          { path: "product.variants.variant.priceData.discountedPrice" },
          {
            path: "product.variants.variant.convertedPriceData.discountedPrice"
          },
          { path: "product.variants.variant.costAndProfitData.profit" },
          { path: "product.variants.variant.costAndProfitData.profitMargin" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "product.lastUpdated" },
          { path: "product.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.CreateProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createProduct;
}
function updateProduct(payload) {
  function __updateProduct({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "product.weight" },
          { path: "product.price.price" },
          { path: "product.price.pricePerUnit" },
          { path: "product.priceData.price" },
          { path: "product.priceData.pricePerUnit" },
          { path: "product.convertedPriceData.price" },
          { path: "product.convertedPriceData.pricePerUnit" },
          { path: "product.costAndProfitData.itemCost" },
          { path: "product.variants.variant.priceData.price" },
          { path: "product.variants.variant.priceData.pricePerUnit" },
          { path: "product.variants.variant.convertedPriceData.price" },
          { path: "product.variants.variant.convertedPriceData.pricePerUnit" },
          { path: "product.variants.variant.costAndProfitData.itemCost" },
          { path: "product.weightRange.minValue" },
          { path: "product.weightRange.maxValue" },
          { path: "product.price.discountedPrice" },
          { path: "product.priceData.discountedPrice" },
          { path: "product.convertedPriceData.discountedPrice" },
          { path: "product.priceRange.minValue" },
          { path: "product.priceRange.maxValue" },
          { path: "product.costAndProfitData.profit" },
          { path: "product.costAndProfitData.profitMargin" },
          { path: "product.costRange.minValue" },
          { path: "product.costRange.maxValue" },
          { path: "product.pricePerUnitData.totalQuantity" },
          { path: "product.pricePerUnitData.baseQuantity" },
          { path: "product.discount.value" },
          { path: "product.variants.variant.weight" },
          { path: "product.variants.variant.priceData.discountedPrice" },
          {
            path: "product.variants.variant.convertedPriceData.discountedPrice"
          },
          { path: "product.variants.variant.costAndProfitData.profit" },
          { path: "product.variants.variant.costAndProfitData.profitMargin" }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "product.lastUpdated" },
          { path: "product.createdDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{product.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateProduct;
}
function deleteProduct(payload) {
  function __deleteProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteProduct;
}
function updateVariants(payload) {
  function __updateVariants({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "variants.price" },
          { path: "variants.cost" },
          { path: "variants.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/variants",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.variant.weight" },
            { path: "variants.variant.priceData.discountedPrice" },
            { path: "variants.variant.convertedPriceData.discountedPrice" },
            { path: "variants.variant.costAndProfitData.profit" },
            { path: "variants.variant.costAndProfitData.profitMargin" },
            { path: "variants.variant.priceData.price" },
            { path: "variants.variant.priceData.pricePerUnit" },
            { path: "variants.variant.convertedPriceData.price" },
            { path: "variants.variant.convertedPriceData.pricePerUnit" },
            { path: "variants.variant.costAndProfitData.itemCost" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateVariants;
}
function resetAllVariantData(payload) {
  function __resetAllVariantData({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.ResetAllVariantData",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/variants/resetToDefault",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __resetAllVariantData;
}
function addProductsToCollection(payload) {
  function __addProductsToCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductsToCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}/productIds",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductsToCollection;
}
function removeProductsFromCollection(payload) {
  function __removeProductsFromCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductsFromCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}/productIds/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductsFromCollection;
}
function addProductMedia(payload) {
  function __addProductMedia({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductMedia",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/media",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductMedia;
}
function removeProductMedia(payload) {
  function __removeProductMedia({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductMedia",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/media/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductMedia;
}
function addProductMediaToChoices(payload) {
  function __addProductMediaToChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.AddProductMediaToChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/choices/media",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __addProductMediaToChoices;
}
function removeProductMediaFromChoices(payload) {
  function __removeProductMediaFromChoices({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveProductMediaFromChoices",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/choices/media/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeProductMediaFromChoices;
}
function deleteProductOptions(payload) {
  function __deleteProductOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteProductOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/options",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteProductOptions;
}
function removeBrand(payload) {
  function __removeBrand({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveBrand",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/remove-brand",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeBrand;
}
function createCollection(payload) {
  function __createCollection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "collection.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.CreateCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __createCollection;
}
function updateCollection(payload) {
  function __updateCollection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "collection.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "PATCH",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.UpdateCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{collection.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __updateCollection;
}
function deleteCollection(payload) {
  function __deleteCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "DELETE",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.DeleteCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/collections/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteCollection;
}
function removeRibbon(payload) {
  function __removeRibbon({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.RemoveRibbon",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/products/{id}/remove-ribbon",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __removeRibbon;
}
function bulkUpdateProducts(payload) {
  function __bulkUpdateProducts({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "set.price" },
          { path: "set.cost" },
          { path: "set.weight" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.BulkUpdateProducts",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/bulk/products/update",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkUpdateProducts;
}
function bulkAdjustProductProperties(payload) {
  function __bulkAdjustProductProperties({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "adjust.price.amount" },
          { path: "adjust.cost.amount" },
          { path: "adjust.weight.amount" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogWriteApi.BulkAdjustProductProperties",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogWriteApiUrl({
        protoPath: "/v1/bulk/products/adjust-properties",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkAdjustProductProperties;
}
function queryProductsPlatformized(payload) {
  function __queryProductsPlatformized({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryProductsPlatformized",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/query-platformized",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "products.weight" },
            { path: "products.price.price" },
            { path: "products.price.pricePerUnit" },
            { path: "products.priceData.price" },
            { path: "products.priceData.pricePerUnit" },
            { path: "products.convertedPriceData.price" },
            { path: "products.convertedPriceData.pricePerUnit" },
            { path: "products.costAndProfitData.itemCost" },
            { path: "products.variants.variant.priceData.price" },
            { path: "products.variants.variant.priceData.pricePerUnit" },
            { path: "products.variants.variant.convertedPriceData.price" },
            {
              path: "products.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "products.variants.variant.costAndProfitData.itemCost" },
            { path: "products.weightRange.minValue" },
            { path: "products.weightRange.maxValue" },
            { path: "products.price.discountedPrice" },
            { path: "products.priceData.discountedPrice" },
            { path: "products.convertedPriceData.discountedPrice" },
            { path: "products.priceRange.minValue" },
            { path: "products.priceRange.maxValue" },
            { path: "products.costAndProfitData.profit" },
            { path: "products.costAndProfitData.profitMargin" },
            { path: "products.costRange.minValue" },
            { path: "products.costRange.maxValue" },
            { path: "products.pricePerUnitData.totalQuantity" },
            { path: "products.pricePerUnitData.baseQuantity" },
            { path: "products.discount.value" },
            { path: "products.variants.variant.weight" },
            { path: "products.variants.variant.priceData.discountedPrice" },
            {
              path: "products.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "products.variants.variant.costAndProfitData.profit" },
            {
              path: "products.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "products.lastUpdated" },
            { path: "products.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixCatalogApiV1CatalogReadApiUrl({
            protoPath: "/v1/products/query-platformized",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryProductsPlatformized;
}
function getProduct(payload) {
  function __getProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "product.weight" },
            { path: "product.price.price" },
            { path: "product.price.pricePerUnit" },
            { path: "product.priceData.price" },
            { path: "product.priceData.pricePerUnit" },
            { path: "product.convertedPriceData.price" },
            { path: "product.convertedPriceData.pricePerUnit" },
            { path: "product.costAndProfitData.itemCost" },
            { path: "product.variants.variant.priceData.price" },
            { path: "product.variants.variant.priceData.pricePerUnit" },
            { path: "product.variants.variant.convertedPriceData.price" },
            {
              path: "product.variants.variant.convertedPriceData.pricePerUnit"
            },
            { path: "product.variants.variant.costAndProfitData.itemCost" },
            { path: "product.weightRange.minValue" },
            { path: "product.weightRange.maxValue" },
            { path: "product.price.discountedPrice" },
            { path: "product.priceData.discountedPrice" },
            { path: "product.convertedPriceData.discountedPrice" },
            { path: "product.priceRange.minValue" },
            { path: "product.priceRange.maxValue" },
            { path: "product.costAndProfitData.profit" },
            { path: "product.costAndProfitData.profitMargin" },
            { path: "product.costRange.minValue" },
            { path: "product.costRange.maxValue" },
            { path: "product.pricePerUnitData.totalQuantity" },
            { path: "product.pricePerUnitData.baseQuantity" },
            { path: "product.discount.value" },
            { path: "product.variants.variant.weight" },
            { path: "product.variants.variant.priceData.discountedPrice" },
            {
              path: "product.variants.variant.convertedPriceData.discountedPrice"
            },
            { path: "product.variants.variant.costAndProfitData.profit" },
            {
              path: "product.variants.variant.costAndProfitData.profitMargin"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "product.lastUpdated" },
            { path: "product.createdDate" }
          ]
        }
      ]),
      fallback: [
        {
          method: "GET",
          url: resolveWixCatalogApiV1CatalogReadApiUrl({
            protoPath: "/v1/products/{id}",
            data: payload,
            host
          }),
          params: toURLSearchParams(payload)
        }
      ]
    };
    return metadata;
  }
  return __getProduct;
}
function getCollectionBySlug(payload) {
  function __getCollectionBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetCollectionBySlug",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/collections/slug/{slug}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __getCollectionBySlug;
}
function productOptionsAvailability(payload) {
  function __productOptionsAvailability({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.ProductOptionsAvailability",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}/productOptionsAvailability",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "selectedVariant.weight" },
            { path: "selectedVariant.price.price" },
            { path: "selectedVariant.price.pricePerUnit" },
            { path: "selectedVariant.convertedPriceData.price" },
            { path: "selectedVariant.convertedPriceData.pricePerUnit" },
            { path: "selectedVariant.price.discountedPrice" },
            { path: "selectedVariant.convertedPriceData.discountedPrice" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __productOptionsAvailability;
}
function queryProductVariants(payload) {
  function __queryProductVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryProductVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/products/{id}/variants/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.variant.weight" },
            { path: "variants.variant.priceData.discountedPrice" },
            { path: "variants.variant.convertedPriceData.discountedPrice" },
            { path: "variants.variant.costAndProfitData.profit" },
            { path: "variants.variant.costAndProfitData.profitMargin" },
            { path: "variants.variant.priceData.price" },
            { path: "variants.variant.priceData.pricePerUnit" },
            { path: "variants.variant.convertedPriceData.price" },
            { path: "variants.variant.convertedPriceData.pricePerUnit" },
            { path: "variants.variant.costAndProfitData.itemCost" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryProductVariants;
}
function queryStoreVariants(payload) {
  function __queryStoreVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "POST",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.QueryStoreVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/variants/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "variants.media.image.urlExpirationDate" },
            { path: "variants.media.video.urlExpirationDate" },
            { path: "variants.media.video.resolutions.urlExpirationDate" },
            {
              path: "variants.media.video.resolutions.poster.urlExpirationDate"
            },
            { path: "variants.media.video.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variants.media.image.focalPoint.x" },
            { path: "variants.media.image.focalPoint.y" },
            { path: "variants.media.video.resolutions.poster.focalPoint.x" },
            { path: "variants.media.video.resolutions.poster.focalPoint.y" },
            { path: "variants.media.video.posters.focalPoint.x" },
            { path: "variants.media.video.posters.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryStoreVariants;
}
function getStoreVariant(payload) {
  function __getStoreVariant({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.product",
      method: "GET",
      methodFqn: "wix.catalog.api.v1.CatalogReadApi.GetStoreVariant",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV1CatalogReadApiUrl({
        protoPath: "/v1/variants/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "variant.media.image.urlExpirationDate" },
            { path: "variant.media.video.urlExpirationDate" },
            { path: "variant.media.video.resolutions.urlExpirationDate" },
            {
              path: "variant.media.video.resolutions.poster.urlExpirationDate"
            },
            { path: "variant.media.video.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "variant.media.image.focalPoint.x" },
            { path: "variant.media.image.focalPoint.y" },
            { path: "variant.media.video.resolutions.poster.focalPoint.x" },
            { path: "variant.media.video.resolutions.poster.focalPoint.y" },
            { path: "variant.media.video.posters.focalPoint.x" },
            { path: "variant.media.video.posters.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getStoreVariant;
}

// src/stores-catalog-v1-product-products.universal.ts
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTVideoV2ToSDKVideoV2 } from "@wix/sdk-runtime/transformations/video-v2";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var ProductType = /* @__PURE__ */ ((ProductType2) => {
  ProductType2["unspecified_product_type"] = "unspecified_product_type";
  ProductType2["physical"] = "physical";
  ProductType2["digital"] = "digital";
  return ProductType2;
})(ProductType || {});
var InventoryStatus = /* @__PURE__ */ ((InventoryStatus2) => {
  InventoryStatus2["IN_STOCK"] = "IN_STOCK";
  InventoryStatus2["OUT_OF_STOCK"] = "OUT_OF_STOCK";
  InventoryStatus2["PARTIALLY_OUT_OF_STOCK"] = "PARTIALLY_OUT_OF_STOCK";
  return InventoryStatus2;
})(InventoryStatus || {});
var MeasurementUnit = /* @__PURE__ */ ((MeasurementUnit2) => {
  MeasurementUnit2["UNSPECIFIED"] = "UNSPECIFIED";
  MeasurementUnit2["ML"] = "ML";
  MeasurementUnit2["CL"] = "CL";
  MeasurementUnit2["L"] = "L";
  MeasurementUnit2["CBM"] = "CBM";
  MeasurementUnit2["MG"] = "MG";
  MeasurementUnit2["G"] = "G";
  MeasurementUnit2["KG"] = "KG";
  MeasurementUnit2["MM"] = "MM";
  MeasurementUnit2["CM"] = "CM";
  MeasurementUnit2["M"] = "M";
  MeasurementUnit2["SQM"] = "SQM";
  MeasurementUnit2["OZ"] = "OZ";
  MeasurementUnit2["LB"] = "LB";
  MeasurementUnit2["FLOZ"] = "FLOZ";
  MeasurementUnit2["PT"] = "PT";
  MeasurementUnit2["QT"] = "QT";
  MeasurementUnit2["GAL"] = "GAL";
  MeasurementUnit2["IN"] = "IN";
  MeasurementUnit2["FT"] = "FT";
  MeasurementUnit2["YD"] = "YD";
  MeasurementUnit2["SQFT"] = "SQFT";
  return MeasurementUnit2;
})(MeasurementUnit || {});
var MediaItemType = /* @__PURE__ */ ((MediaItemType2) => {
  MediaItemType2["unspecified_media_item_type"] = "unspecified_media_item_type";
  MediaItemType2["image"] = "image";
  MediaItemType2["video"] = "video";
  MediaItemType2["audio"] = "audio";
  MediaItemType2["document"] = "document";
  MediaItemType2["zip"] = "zip";
  return MediaItemType2;
})(MediaItemType || {});
var OptionType = /* @__PURE__ */ ((OptionType2) => {
  OptionType2["unspecified_option_type"] = "unspecified_option_type";
  OptionType2["drop_down"] = "drop_down";
  OptionType2["color"] = "color";
  return OptionType2;
})(OptionType || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["UNDEFINED"] = "UNDEFINED";
  DiscountType2["NONE"] = "NONE";
  DiscountType2["AMOUNT"] = "AMOUNT";
  DiscountType2["PERCENT"] = "PERCENT";
  return DiscountType2;
})(DiscountType || {});
var FileType = /* @__PURE__ */ ((FileType2) => {
  FileType2["UNSPECIFIED"] = "UNSPECIFIED";
  FileType2["SECURE_PICTURE"] = "SECURE_PICTURE";
  FileType2["SECURE_VIDEO"] = "SECURE_VIDEO";
  FileType2["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
  FileType2["SECURE_MUSIC"] = "SECURE_MUSIC";
  FileType2["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
  return FileType2;
})(FileType || {});
var Version = /* @__PURE__ */ ((Version2) => {
  Version2["V1_CATALOG"] = "V1_CATALOG";
  Version2["V3_CATALOG"] = "V3_CATALOG";
  Version2["STORES_NOT_INSTALLED"] = "STORES_NOT_INSTALLED";
  return Version2;
})(Version || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createProduct2(product) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ product });
  const reqOpts = createProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { product: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["product"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateProduct2(_id, product) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    product: { ...product, id: _id }
  });
  const reqOpts = updateProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { product: "$[1]" },
        explicitPathsToArguments: { "product.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "product"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteProduct2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateProductVariants(_id, variants) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    variants
  });
  const reqOpts = updateVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", variants: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "variants"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function resetAllProductVariantData(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = resetAllVariantData(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addProductsToCollection2(_id, productIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    productIds
  });
  const reqOpts = addProductsToCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", productIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "productIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeProductsFromCollection2(_id, productIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    productIds
  });
  const reqOpts = removeProductsFromCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", productIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "productIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addProductMedia2(_id, media) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    media
  });
  const reqOpts = addProductMedia(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", media: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "media"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeProductMedia2(_id, mediaIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    mediaIds
  });
  const reqOpts = removeProductMedia(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", mediaIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "mediaIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function addProductMediaToChoices2(_id, media) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    media
  });
  const reqOpts = addProductMediaToChoices(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", media: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "media"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeProductMediaFromChoices2(_id, media) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    media
  });
  const reqOpts = removeProductMediaFromChoices(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", media: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "media"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteProductOptions2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteProductOptions(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeBrand2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = removeBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createCollection2(collection) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    collection
  });
  const reqOpts = createCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { collection: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["collection"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCollection2(_id, collection) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    collection: { ...collection, id: _id }
  });
  const reqOpts = updateCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { collection: "$[1]" },
        explicitPathsToArguments: { "collection.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "collection"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteCollection2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function removeRibbon2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = removeRibbon(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateProductsProperty(ids, set) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({ ids, set });
  const reqOpts = bulkUpdateProducts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ids: "$[0]", set: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["ids", "set"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkAdjustProductProperty(adjust, ids) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    adjust,
    ids
  });
  const reqOpts = bulkAdjustProductProperties(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { adjust: "$[0]", ids: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["adjust", "ids"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryProducts() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryProductsPlatformized(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.products,
        pagingMetadata: transformedData?.metadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "OFFSET",
    transformationPaths: {}
  });
}
async function getProduct2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    includeMerchantSpecificData: options?.includeMerchantSpecificData
  });
  const reqOpts = getProduct(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          includeMerchantSpecificData: "$[1].includeMerchantSpecificData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCollectionBySlug2(slug) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ slug });
  const reqOpts = getCollectionBySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { slug: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["slug"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getProductOptionsAvailability(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    options
  });
  const reqOpts = productOptionsAvailability(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", options: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryProductVariants2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    choices: options?.choices,
    variantIds: options?.variantIds,
    paging: options?.paging,
    includeMerchantSpecificData: options?.includeMerchantSpecificData
  });
  const reqOpts = queryProductVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          choices: "$[1].choices",
          variantIds: "$[1].variantIds",
          paging: "$[1].paging",
          includeMerchantSpecificData: "$[1].includeMerchantSpecificData"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryStoreVariants2(query) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ query });
  const reqOpts = queryStoreVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "variants.media.image" }]
        },
        {
          transformFn: transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "variants.media.video" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["query"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getStoreVariant2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getStoreVariant(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "variant.media.image" }]
        },
        {
          transformFn: transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "variant.media.video" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v1-product-products.public.ts
function createProduct3(httpClient) {
  return (product) => createProduct2(
    product,
    // @ts-ignore
    { httpClient }
  );
}
function updateProduct3(httpClient) {
  return (_id, product) => updateProduct2(
    _id,
    product,
    // @ts-ignore
    { httpClient }
  );
}
function deleteProduct3(httpClient) {
  return (_id) => deleteProduct2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function updateProductVariants2(httpClient) {
  return (_id, variants) => updateProductVariants(
    _id,
    variants,
    // @ts-ignore
    { httpClient }
  );
}
function resetAllProductVariantData2(httpClient) {
  return (_id) => resetAllProductVariantData(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function addProductsToCollection3(httpClient) {
  return (_id, productIds) => addProductsToCollection2(
    _id,
    productIds,
    // @ts-ignore
    { httpClient }
  );
}
function removeProductsFromCollection3(httpClient) {
  return (_id, productIds) => removeProductsFromCollection2(
    _id,
    productIds,
    // @ts-ignore
    { httpClient }
  );
}
function addProductMedia3(httpClient) {
  return (_id, media) => addProductMedia2(
    _id,
    media,
    // @ts-ignore
    { httpClient }
  );
}
function removeProductMedia3(httpClient) {
  return (_id, mediaIds) => removeProductMedia2(
    _id,
    mediaIds,
    // @ts-ignore
    { httpClient }
  );
}
function addProductMediaToChoices3(httpClient) {
  return (_id, media) => addProductMediaToChoices2(
    _id,
    media,
    // @ts-ignore
    { httpClient }
  );
}
function removeProductMediaFromChoices3(httpClient) {
  return (_id, media) => removeProductMediaFromChoices2(
    _id,
    media,
    // @ts-ignore
    { httpClient }
  );
}
function deleteProductOptions3(httpClient) {
  return (_id) => deleteProductOptions2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeBrand3(httpClient) {
  return (_id) => removeBrand2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function createCollection3(httpClient) {
  return (collection) => createCollection2(
    collection,
    // @ts-ignore
    { httpClient }
  );
}
function updateCollection3(httpClient) {
  return (_id, collection) => updateCollection2(
    _id,
    collection,
    // @ts-ignore
    { httpClient }
  );
}
function deleteCollection3(httpClient) {
  return (_id) => deleteCollection2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function removeRibbon3(httpClient) {
  return (_id) => removeRibbon2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateProductsProperty2(httpClient) {
  return (ids, set) => bulkUpdateProductsProperty(
    ids,
    set,
    // @ts-ignore
    { httpClient }
  );
}
function bulkAdjustProductProperty2(httpClient) {
  return (adjust, ids) => bulkAdjustProductProperty(
    adjust,
    ids,
    // @ts-ignore
    { httpClient }
  );
}
function queryProducts2(httpClient) {
  return () => queryProducts(
    // @ts-ignore
    { httpClient }
  );
}
function getProduct3(httpClient) {
  return (_id, options) => getProduct2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getCollectionBySlug3(httpClient) {
  return (slug) => getCollectionBySlug2(
    slug,
    // @ts-ignore
    { httpClient }
  );
}
function getProductOptionsAvailability2(httpClient) {
  return (_id, options) => getProductOptionsAvailability(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryProductVariants3(httpClient) {
  return (_id, options) => queryProductVariants2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryStoreVariants3(httpClient) {
  return (query) => queryStoreVariants2(
    query,
    // @ts-ignore
    { httpClient }
  );
}
function getStoreVariant3(httpClient) {
  return (_id) => getStoreVariant2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
var onProductCollectionChanged = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.CollectionChanged",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(event)
)();
var onProductCollectionCreated = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.CollectionCreated",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(event)
)();
var onProductCollectionDeleted = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.CollectionDeleted",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(event)
)();
var onProductChanged = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.ProductChanged",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(event)
)();
var onProductCreated = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.ProductCreated",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          { path: "data.price.price" },
          { path: "data.price.pricePerUnit" },
          { path: "data.costAndProfitData.itemCost" },
          { path: "data.price.discountedPrice" },
          { path: "data.costAndProfitData.profit" },
          { path: "data.costAndProfitData.profitMargin" }
        ]
      }
    ])
  )
)();
var onProductDeleted = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.ProductDeleted",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(event)
)();
var onProductVariantsChanged = EventDefinition(
  "com.wix.ecommerce.catalog.api.v1.VariantsChanged",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(event)
)();

// src/stores-catalog-v1-product-products.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createProduct4 = /* @__PURE__ */ createRESTModule(createProduct3);
var updateProduct4 = /* @__PURE__ */ createRESTModule(updateProduct3);
var deleteProduct4 = /* @__PURE__ */ createRESTModule(deleteProduct3);
var updateProductVariants3 = /* @__PURE__ */ createRESTModule(updateProductVariants2);
var resetAllProductVariantData3 = /* @__PURE__ */ createRESTModule(resetAllProductVariantData2);
var addProductsToCollection4 = /* @__PURE__ */ createRESTModule(addProductsToCollection3);
var removeProductsFromCollection4 = /* @__PURE__ */ createRESTModule(removeProductsFromCollection3);
var addProductMedia4 = /* @__PURE__ */ createRESTModule(addProductMedia3);
var removeProductMedia4 = /* @__PURE__ */ createRESTModule(removeProductMedia3);
var addProductMediaToChoices4 = /* @__PURE__ */ createRESTModule(addProductMediaToChoices3);
var removeProductMediaFromChoices4 = /* @__PURE__ */ createRESTModule(removeProductMediaFromChoices3);
var deleteProductOptions4 = /* @__PURE__ */ createRESTModule(deleteProductOptions3);
var removeBrand4 = /* @__PURE__ */ createRESTModule(removeBrand3);
var createCollection4 = /* @__PURE__ */ createRESTModule(createCollection3);
var updateCollection4 = /* @__PURE__ */ createRESTModule(updateCollection3);
var deleteCollection4 = /* @__PURE__ */ createRESTModule(deleteCollection3);
var removeRibbon4 = /* @__PURE__ */ createRESTModule(removeRibbon3);
var bulkUpdateProductsProperty3 = /* @__PURE__ */ createRESTModule(bulkUpdateProductsProperty2);
var bulkAdjustProductProperty3 = /* @__PURE__ */ createRESTModule(bulkAdjustProductProperty2);
var queryProducts3 = /* @__PURE__ */ createRESTModule(queryProducts2);
var getProduct4 = /* @__PURE__ */ createRESTModule(getProduct3);
var getCollectionBySlug4 = /* @__PURE__ */ createRESTModule(getCollectionBySlug3);
var getProductOptionsAvailability3 = /* @__PURE__ */ createRESTModule(getProductOptionsAvailability2);
var queryProductVariants4 = /* @__PURE__ */ createRESTModule(queryProductVariants3);
var queryStoreVariants4 = /* @__PURE__ */ createRESTModule(queryStoreVariants3);
var getStoreVariant4 = /* @__PURE__ */ createRESTModule(getStoreVariant3);
var onProductCollectionChanged2 = createEventModule(onProductCollectionChanged);
var onProductCollectionCreated2 = createEventModule(onProductCollectionCreated);
var onProductCollectionDeleted2 = createEventModule(onProductCollectionDeleted);
var onProductChanged2 = createEventModule(onProductChanged);
var onProductCreated2 = createEventModule(onProductCreated);
var onProductDeleted2 = createEventModule(onProductDeleted);
var onProductVariantsChanged2 = createEventModule(onProductVariantsChanged);
export {
  DiscountType,
  FileType,
  InventoryStatus,
  MeasurementUnit,
  MediaItemType,
  OptionType,
  ProductType,
  SortOrder,
  Version,
  WebhookIdentityType,
  addProductMedia4 as addProductMedia,
  addProductMediaToChoices4 as addProductMediaToChoices,
  addProductsToCollection4 as addProductsToCollection,
  bulkAdjustProductProperty3 as bulkAdjustProductProperty,
  bulkUpdateProductsProperty3 as bulkUpdateProductsProperty,
  createCollection4 as createCollection,
  createProduct4 as createProduct,
  deleteCollection4 as deleteCollection,
  deleteProduct4 as deleteProduct,
  deleteProductOptions4 as deleteProductOptions,
  getCollectionBySlug4 as getCollectionBySlug,
  getProduct4 as getProduct,
  getProductOptionsAvailability3 as getProductOptionsAvailability,
  getStoreVariant4 as getStoreVariant,
  onProductChanged2 as onProductChanged,
  onProductCollectionChanged2 as onProductCollectionChanged,
  onProductCollectionCreated2 as onProductCollectionCreated,
  onProductCollectionDeleted2 as onProductCollectionDeleted,
  onProductCreated2 as onProductCreated,
  onProductDeleted2 as onProductDeleted,
  onProductVariantsChanged2 as onProductVariantsChanged,
  queryProductVariants4 as queryProductVariants,
  queryProducts3 as queryProducts,
  queryStoreVariants4 as queryStoreVariants,
  removeBrand4 as removeBrand,
  removeProductMedia4 as removeProductMedia,
  removeProductMediaFromChoices4 as removeProductMediaFromChoices,
  removeProductsFromCollection4 as removeProductsFromCollection,
  removeRibbon4 as removeRibbon,
  resetAllProductVariantData3 as resetAllProductVariantData,
  updateCollection4 as updateCollection,
  updateProduct4 as updateProduct,
  updateProductVariants3 as updateProductVariants
};
//# sourceMappingURL=index.mjs.map