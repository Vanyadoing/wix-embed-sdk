// src/stores-catalog-v3-stores-location-stores-locations-v-3.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v3-stores-location-stores-locations-v-3.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixStoresCatalogLocationV3StoresLocationServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/location",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/location",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/location",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/locations",
        destPath: "/v3/locations"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_stores-locations-v-3";
function getStoresLocation(payload) {
  function __getStoresLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.stores_location",
      method: "GET",
      methodFqn: "wix.stores.catalog.location.v3.StoresLocationService.GetStoresLocation",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogLocationV3StoresLocationServiceUrl({
        protoPath: "/v3/locations/{storesLocationId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "storesLocation.createdDate" },
            { path: "storesLocation.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getStoresLocation;
}
function queryStoresLocations(payload) {
  function __queryStoresLocations({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.stores_location",
      method: "POST",
      methodFqn: "wix.stores.catalog.location.v3.StoresLocationService.QueryStoresLocations",
      packageName: PACKAGE_NAME,
      url: resolveWixStoresCatalogLocationV3StoresLocationServiceUrl({
        protoPath: "/v3/locations/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "storesLocations.createdDate" },
            { path: "storesLocations.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryStoresLocations;
}

// src/stores-catalog-v3-stores-location-stores-locations-v-3.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var LocationType = /* @__PURE__ */ ((LocationType2) => {
  LocationType2["UNKNOWN_LOCATION_TYPE"] = "UNKNOWN_LOCATION_TYPE";
  LocationType2["VIRTUAL"] = "VIRTUAL";
  LocationType2["PHYSICAL"] = "PHYSICAL";
  return LocationType2;
})(LocationType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function getStoresLocation2(storesLocationId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    storesLocationId
  });
  const reqOpts = getStoresLocation(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.storesLocation;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { storesLocationId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["storesLocationId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryStoresLocations2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryStoresLocations(
        payload
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.storesLocations,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}

// src/stores-catalog-v3-stores-location-stores-locations-v-3.public.ts
function getStoresLocation3(httpClient) {
  return (storesLocationId) => getStoresLocation2(
    storesLocationId,
    // @ts-ignore
    { httpClient }
  );
}
function queryStoresLocations3(httpClient) {
  return () => queryStoresLocations2(
    // @ts-ignore
    { httpClient }
  );
}

// src/stores-catalog-v3-stores-location-stores-locations-v-3.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var getStoresLocation4 = /* @__PURE__ */ createRESTModule(getStoresLocation3);
var queryStoresLocations4 = /* @__PURE__ */ createRESTModule(queryStoresLocations3);
export {
  LocationType,
  SortOrder,
  WebhookIdentityType,
  getStoresLocation4 as getStoresLocation,
  queryStoresLocations4 as queryStoresLocations
};
//# sourceMappingURL=index.mjs.map