// src/iam-recovery-v1-recovery-recovery.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/iam-recovery-v1-recovery-recovery.http.ts
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTBytesToSDKBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixIamRecoveryV1RecoveryServiceUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_iam/recovery",
        destPath: ""
      },
      {
        srcPath: "/_api/iam/recovery",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/_api/iam/recovery",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_identity_recovery";
function sendRecoveryEmail(payload) {
  function __sendRecoveryEmail({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.recovery.v1.recovery",
      method: "POST",
      methodFqn: "wix.iam.recovery.v1.RecoveryService.SendRecoveryEmail",
      packageName: PACKAGE_NAME,
      url: resolveWixIamRecoveryV1RecoveryServiceUrl({
        protoPath: "/v1/send-email",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __sendRecoveryEmail;
}
function sendActivationEmail(payload) {
  function __sendActivationEmail({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.recovery.v1.recovery",
      method: "POST",
      methodFqn: "wix.iam.recovery.v1.RecoveryService.SendActivationEmail",
      packageName: PACKAGE_NAME,
      url: resolveWixIamRecoveryV1RecoveryServiceUrl({
        protoPath: "/v1/activation-email",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __sendActivationEmail;
}
function recover(payload) {
  function __recover({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.recovery.v1.recovery",
      method: "POST",
      methodFqn: "wix.iam.recovery.v1.RecoveryService.Recover",
      packageName: PACKAGE_NAME,
      url: resolveWixIamRecoveryV1RecoveryServiceUrl({
        protoPath: "/v1/recover",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __recover;
}

// src/iam-recovery-v1-recovery-recovery.universal.ts
import { transformRESTAddressToSDKAddress } from "@wix/sdk-runtime/transformations/address";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var TenantType = /* @__PURE__ */ ((TenantType2) => {
  TenantType2["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
  TenantType2["ACCOUNT"] = "ACCOUNT";
  TenantType2["SITE"] = "SITE";
  TenantType2["ROOT"] = "ROOT";
  return TenantType2;
})(TenantType || {});
var StateType = /* @__PURE__ */ ((StateType2) => {
  StateType2["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  StateType2["SUCCESS"] = "SUCCESS";
  StateType2["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
  StateType2["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
  StateType2["STATUS_CHECK"] = "STATUS_CHECK";
  return StateType2;
})(StateType || {});
var PrivacyStatus = /* @__PURE__ */ ((PrivacyStatus2) => {
  PrivacyStatus2["UNDEFINED"] = "UNDEFINED";
  PrivacyStatus2["PUBLIC"] = "PUBLIC";
  PrivacyStatus2["PRIVATE"] = "PRIVATE";
  return PrivacyStatus2;
})(PrivacyStatus || {});
var EmailTag = /* @__PURE__ */ ((EmailTag2) => {
  EmailTag2["UNTAGGED"] = "UNTAGGED";
  EmailTag2["MAIN"] = "MAIN";
  EmailTag2["HOME"] = "HOME";
  EmailTag2["WORK"] = "WORK";
  return EmailTag2;
})(EmailTag || {});
var PhoneTag = /* @__PURE__ */ ((PhoneTag2) => {
  PhoneTag2["UNTAGGED"] = "UNTAGGED";
  PhoneTag2["MAIN"] = "MAIN";
  PhoneTag2["HOME"] = "HOME";
  PhoneTag2["MOBILE"] = "MOBILE";
  PhoneTag2["WORK"] = "WORK";
  PhoneTag2["FAX"] = "FAX";
  return PhoneTag2;
})(PhoneTag || {});
var AddressTag = /* @__PURE__ */ ((AddressTag2) => {
  AddressTag2["UNTAGGED"] = "UNTAGGED";
  AddressTag2["HOME"] = "HOME";
  AddressTag2["WORK"] = "WORK";
  AddressTag2["BILLING"] = "BILLING";
  AddressTag2["SHIPPING"] = "SHIPPING";
  return AddressTag2;
})(AddressTag || {});
var StatusName = /* @__PURE__ */ ((StatusName2) => {
  StatusName2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  StatusName2["PENDING"] = "PENDING";
  StatusName2["ACTIVE"] = "ACTIVE";
  StatusName2["DELETED"] = "DELETED";
  StatusName2["BLOCKED"] = "BLOCKED";
  StatusName2["OFFLINE"] = "OFFLINE";
  return StatusName2;
})(StatusName || {});
var Reason = /* @__PURE__ */ ((Reason2) => {
  Reason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  Reason2["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
  Reason2["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
  return Reason2;
})(Reason || {});
var FactorType = /* @__PURE__ */ ((FactorType2) => {
  FactorType2["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
  FactorType2["PASSWORD"] = "PASSWORD";
  FactorType2["SMS"] = "SMS";
  FactorType2["CALL"] = "CALL";
  FactorType2["EMAIL"] = "EMAIL";
  FactorType2["TOTP"] = "TOTP";
  FactorType2["PUSH"] = "PUSH";
  FactorType2["WEBAUTHN"] = "WEBAUTHN";
  return FactorType2;
})(FactorType || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["INACTIVE"] = "INACTIVE";
  Status2["ACTIVE"] = "ACTIVE";
  Status2["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
  return Status2;
})(Status || {});
var FactorStatus = /* @__PURE__ */ ((FactorStatus2) => {
  FactorStatus2["UNKNOWN_FACTOR_STATUS"] = "UNKNOWN_FACTOR_STATUS";
  FactorStatus2["ENABLED"] = "ENABLED";
  FactorStatus2["REQUIRE_ACTIVATION"] = "REQUIRE_ACTIVATION";
  FactorStatus2["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
  FactorStatus2["ENABLED_BY_RULE"] = "ENABLED_BY_RULE";
  FactorStatus2["DISABLED_BY_RULE"] = "DISABLED_BY_RULE";
  return FactorStatus2;
})(FactorStatus || {});
var MfaReason = /* @__PURE__ */ ((MfaReason2) => {
  MfaReason2["UNKNOWN_MFA_REASON"] = "UNKNOWN_MFA_REASON";
  MfaReason2["USER_SETTINGS"] = "USER_SETTINGS";
  MfaReason2["HIGH_RISK_LOGIN"] = "HIGH_RISK_LOGIN";
  return MfaReason2;
})(MfaReason || {});
var UserVerificationRequirement = /* @__PURE__ */ ((UserVerificationRequirement2) => {
  UserVerificationRequirement2["USER_VERIFICATION_UNSPECIFIED"] = "USER_VERIFICATION_UNSPECIFIED";
  UserVerificationRequirement2["USER_VERIFICATION_REQUIRED"] = "USER_VERIFICATION_REQUIRED";
  UserVerificationRequirement2["USER_VERIFICATION_PREFERRED"] = "USER_VERIFICATION_PREFERRED";
  UserVerificationRequirement2["USER_VERIFICATION_DISCOURAGED"] = "USER_VERIFICATION_DISCOURAGED";
  return UserVerificationRequirement2;
})(UserVerificationRequirement || {});
async function sendRecoveryEmail2(email, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    email,
    language: options?.language,
    redirect: options?.redirect
  });
  const reqOpts = sendRecoveryEmail(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          email: "$[0]",
          language: "$[1].language",
          redirect: "$[1].redirect"
        },
        singleArgumentUnchanged: false
      },
      ["email", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function sendActivationEmail2(identityId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    identityId,
    emailOptions: options?.emailOptions
  });
  const reqOpts = sendActivationEmail(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          identityId: "$[0]",
          emailOptions: "$[1].emailOptions"
        },
        singleArgumentUnchanged: false
      },
      ["identityId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function recover2(recoveryToken, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    recoveryToken,
    password: options?.password
  });
  const reqOpts = recover(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTAddressToSDKAddress,
          paths: [{ path: "identity.identityProfile.addresses.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          recoveryToken: "$[0]",
          password: "$[1].password"
        },
        singleArgumentUnchanged: false
      },
      ["recoveryToken", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/iam-recovery-v1-recovery-recovery.public.ts
function sendRecoveryEmail3(httpClient) {
  return (email, options) => sendRecoveryEmail2(
    email,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function sendActivationEmail3(httpClient) {
  return (identityId, options) => sendActivationEmail2(
    identityId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function recover3(httpClient) {
  return (recoveryToken, options) => recover2(
    recoveryToken,
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/iam-recovery-v1-recovery-recovery.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var sendRecoveryEmail4 = /* @__PURE__ */ createRESTModule(sendRecoveryEmail3);
var sendActivationEmail4 = /* @__PURE__ */ createRESTModule(sendActivationEmail3);
var recover4 = /* @__PURE__ */ createRESTModule(recover3);
export {
  AddressTag,
  EmailTag,
  FactorStatus,
  FactorType,
  MfaReason,
  PhoneTag,
  PrivacyStatus,
  Reason,
  StateType,
  Status,
  StatusName,
  TenantType,
  UserVerificationRequirement,
  recover4 as recover,
  sendActivationEmail4 as sendActivationEmail,
  sendRecoveryEmail4 as sendRecoveryEmail
};
//# sourceMappingURL=index.mjs.map