"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// meta.ts
var meta_exports = {};
__export(meta_exports, {
  recover: () => recover2,
  sendActivationEmail: () => sendActivationEmail2,
  sendRecoveryEmail: () => sendRecoveryEmail2
});
module.exports = __toCommonJS(meta_exports);

// src/iam-recovery-v1-recovery-recovery.http.ts
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_bytes = require("@wix/sdk-runtime/transformations/bytes");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
function resolveWixIamRecoveryV1RecoveryServiceUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_iam/recovery",
        destPath: ""
      },
      {
        srcPath: "/_api/iam/recovery",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/_api/iam/recovery",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_identity_recovery";
function sendRecoveryEmail(payload) {
  function __sendRecoveryEmail({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.recovery.v1.recovery",
      method: "POST",
      methodFqn: "wix.iam.recovery.v1.RecoveryService.SendRecoveryEmail",
      packageName: PACKAGE_NAME,
      url: resolveWixIamRecoveryV1RecoveryServiceUrl({
        protoPath: "/v1/send-email",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __sendRecoveryEmail;
}
function sendActivationEmail(payload) {
  function __sendActivationEmail({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.recovery.v1.recovery",
      method: "POST",
      methodFqn: "wix.iam.recovery.v1.RecoveryService.SendActivationEmail",
      packageName: PACKAGE_NAME,
      url: resolveWixIamRecoveryV1RecoveryServiceUrl({
        protoPath: "/v1/activation-email",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __sendActivationEmail;
}
function recover(payload) {
  function __recover({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.recovery.v1.recovery",
      method: "POST",
      methodFqn: "wix.iam.recovery.v1.RecoveryService.Recover",
      packageName: PACKAGE_NAME,
      url: resolveWixIamRecoveryV1RecoveryServiceUrl({
        protoPath: "/v1/recover",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: import_float.transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __recover;
}

// src/iam-recovery-v1-recovery-recovery.meta.ts
function sendRecoveryEmail2() {
  const payload = {};
  const getRequestOptions = sendRecoveryEmail(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/send-email",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function sendActivationEmail2() {
  const payload = {};
  const getRequestOptions = sendActivationEmail(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/activation-email",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function recover2() {
  const payload = {};
  const getRequestOptions = recover(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/recover",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  recover,
  sendActivationEmail,
  sendRecoveryEmail
});
//# sourceMappingURL=meta.js.map