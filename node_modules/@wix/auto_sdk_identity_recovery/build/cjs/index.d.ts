import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { S as SendRecoveryEmailOptions, a as SendActivationEmailOptions, R as RecoverOptions, b as StateMachineResponse } from './iam-recovery-v1-recovery-recovery.universal-BeHNNSd3.js';
export { G as Address, A as AddressTag, D as AddressWrapper, a3 as AuthenticationExtensionInputs, a4 as AuthenticationExtensionInputsLargeBlobOperationOneOf, t as AuthenticatorConnection, C as Connection, r as ConnectionTypeOneOf, a5 as CreateRecoveryTokenRequest, a6 as CreateRecoveryTokenResponse, v as CustomField, N as CustomValue, O as CustomValueValueOneOf, J as Email, n as EmailOptions, E as EmailTag, L as Factor, h as FactorStatus, F as FactorType, I as Identity, u as IdentityProfile, s as IdpConnection, Q as ListValue, W as MapValue, H as Metadata, Z as MfaChallengeData, M as MfaReason, B as Phone, d as PhoneTag, P as PrivacyStatus, a2 as PublicKeyCredentialDescriptor, a0 as PushChallengeData, f as Reason, p as RecoverRequest, i as RecoveryToken, k as Redirect, X as RequireMfaData, z as SecondaryEmail, m as SendActivationEmailRequest, o as SendActivationEmailResponse, j as SendRecoveryEmailRequest, l as SendRecoveryEmailResponse, q as StateMachineResponseStateDataOneOf, c as StateType, g as Status, e as StatusName, K as StatusV2, T as TenantType, U as UserVerificationRequirement, V as V1CustomValue, w as V1CustomValueValueOneOf, Y as V1Factor, x as V1ListValue, y as V1MapValue, _ as VerificationChallenge, $ as VerificationChallengeFactorChallengeDataOneOf, a1 as WebAuthnChallengeData } from './iam-recovery-v1-recovery-recovery.universal-BeHNNSd3.js';

declare function sendRecoveryEmail$1(httpClient: HttpClient): SendRecoveryEmailSignature;
interface SendRecoveryEmailSignature {
    /**
     * Sends a member an email containing a customized link to a Wix-managed page
     * where the member can reset the password for their account.
     * @param - Email address associated with the account to recover.
     */
    (email: string, options?: SendRecoveryEmailOptions | undefined): Promise<void>;
}
declare function sendActivationEmail$1(httpClient: HttpClient): SendActivationEmailSignature;
interface SendActivationEmailSignature {
    /**
     * Sends an activation email with an activation token
     * making the transition from initial contact to a site member
     * @param - Id of the activating user
     */
    (identityId: string, options?: SendActivationEmailOptions | undefined): Promise<void>;
}
declare function recover$1(httpClient: HttpClient): RecoverSignature;
interface RecoverSignature {
    /** @param - recovery token */
    (recoveryToken: string, options?: RecoverOptions | undefined): Promise<StateMachineResponse>;
}

declare const sendRecoveryEmail: MaybeContext<BuildRESTFunction<typeof sendRecoveryEmail$1> & typeof sendRecoveryEmail$1>;
declare const sendActivationEmail: MaybeContext<BuildRESTFunction<typeof sendActivationEmail$1> & typeof sendActivationEmail$1>;
declare const recover: MaybeContext<BuildRESTFunction<typeof recover$1> & typeof recover$1>;

export { RecoverOptions, SendActivationEmailOptions, SendRecoveryEmailOptions, StateMachineResponse, recover, sendActivationEmail, sendRecoveryEmail };
