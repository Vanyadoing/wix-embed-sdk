interface InventoryItemV2 {
    /** Inventory item ID. */
    _id?: string | null;
    /**
     * @internal
     * @internal
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /**
     * Product ID.
     * @readonly
     */
    productId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventoryâ€™s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
interface InventoryVariantV2 {
    /** Variant ID. */
    variantId?: string;
    /** Whether the product is listed as in stock. */
    inStock?: boolean | null;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /**
     * Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level.
     * @readonly
     */
    availableForPreorder?: boolean;
}
interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /**
     * A message the buyer will see when the item is out of stock and preorder is enabled.
     * @minLength 1
     * @maxLength 250
     */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * @max 100000
     */
    limit?: number | null;
}
interface UpdateInventoryVariantsRequest {
    /** Inventory item. */
    inventoryItem: InventoryItemV2;
}
declare enum ReasonType {
    /** Unknown reason. */
    UNKNOWN = "UNKNOWN",
    /** Order related. */
    ORDER = "ORDER",
    /** Manual adjustment. */
    MANUAL = "MANUAL",
    /** Reverting an inventory change. */
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
interface UpdateInventoryVariantsResponse {
}
interface BulkUpdateInventoryVariantsRequest extends BulkUpdateInventoryVariantsRequestActionOneOf {
    /** Change availability. */
    setInStock?: boolean | null;
    /** Set new quantity. */
    setQuantity?: number | null;
    /**
     * Number to increment inventory by.
     * @min 1
     */
    incrementBy?: number | null;
    /**
     * Number to decrement inventory by.
     * @min 1
     */
    decrementBy?: number | null;
    /** Variants filter. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
}
/** @oneof */
interface BulkUpdateInventoryVariantsRequestActionOneOf {
    /** Change availability. */
    setInStock?: boolean | null;
    /** Set new quantity. */
    setQuantity?: number | null;
    /**
     * Number to increment inventory by.
     * @min 1
     */
    incrementBy?: number | null;
    /**
     * Number to decrement inventory by.
     * @min 1
     */
    decrementBy?: number | null;
}
interface BulkUpdateInventoryVariantsResponse {
}
interface BulkUpdateInventoryItemsRequest {
    /** Variants filter */
    variantsFilter?: Record<string, any> | null;
    /** Whether inventory is being tracked. */
    trackInventory?: boolean | null;
}
interface BulkUpdateInventoryItemsResponse {
}
interface DecrementInventoryRequest {
    /**
     * Item or product to decrement.
     * @minSize 1
     * @maxSize 300
     */
    decrementData?: DecrementData[];
}
interface DecrementData extends DecrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @maxLength 36
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Number to decrement inventory by.
     * @min 1
     */
    decrementBy?: number;
    /**
     * Whether the request to decrement the item's inventory was made as part of a purchase that includes preorder items.
     * If true and the item is available for preorder, we allow negative inventory.
     * If false and the item is not available for preorder, we allow regular buy flow (no negative inventory).
     */
    preorderRequest?: boolean;
}
/** @oneof */
interface DecrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @maxLength 36
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
}
interface DecrementInventoryResponse {
}
interface IncrementInventoryRequest {
    /**
     * Item or product to increment.
     * @minSize 1
     * @maxSize 300
     */
    incrementData?: IncrementData[];
}
interface IncrementData extends IncrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Number to increment inventory by.
     * @min 1
     */
    incrementBy?: number;
}
/** @oneof */
interface IncrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
}
interface IncrementInventoryResponse {
}
interface InventoryItemChanged {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Whether inventory is being tracked. */
    trackInventory?: boolean;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
    /** Field mask of updated fields. */
    fieldMask?: string[];
    /** Date and time the inventory item was last updated. */
    _updatedDate?: Date | null;
}
interface InventoryVariantsChanged {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Information about changed variants. */
    variants?: ChangedInventoryVariant[];
    /** Date and time the inventory variant item was last updated. */
    _updatedDate?: Date | null;
}
interface ChangedInventoryVariant {
    /** Variant ID. */
    _id?: string;
    /** Previous inventory variant data. */
    oldValue?: ChangedInventoryVariantData;
    /** Current inventory variant data. */
    newValue?: ChangedInventoryVariantData;
}
interface ChangedInventoryVariantData {
    /** Inventory variant quantity. */
    quantity?: number | null;
    /** Whether the product variant is in stock. */
    inStock?: boolean;
    /** Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level. */
    availableForPreorder?: boolean;
}
interface GetInventoryVariantsRequest extends GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
/** @oneof */
interface GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface GetInventoryVariantsResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItemV2;
}
interface GetInventoryItemsRequest {
    /** Product IDs */
    productIds?: string[];
}
interface GetInventoryItemsResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
}
interface QueryInventoryRequest {
    /** Information about paging, filters, sorting. */
    query?: Query;
}
interface Query {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
interface Paging {
    /**
     * Amount of items to load per page
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
interface QueryInventoryResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
    /** Display metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface InventoryItemChangedEnvelope {
    data: InventoryItemChanged;
    metadata: BaseEventMetadata;
}
interface InventoryVariantsChangedEnvelope {
    data: InventoryVariantsChanged;
    metadata: BaseEventMetadata;
}
interface UpdateInventoryVariantsInventoryItem {
    /** Inventory item ID. */
    _id?: string | null;
    /**
     * @internal
     * @internal
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventoryâ€™s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
interface GetInventoryVariantsOptions extends GetInventoryVariantsOptionsIdOneOf {
    /**
     * @internal
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
/** @oneof */
interface GetInventoryVariantsOptionsIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * @internal
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
interface QueryInventoryOptions {
    /** Information about paging, filters, sorting. */
    query?: Query;
}

export { type Query as A, type BulkUpdateInventoryVariantsRequest as B, type ChangedInventoryVariant as C, type DecrementData as D, type Paging as E, type PagingMetadata as F, type GetInventoryVariantsOptions as G, type IdentificationData as H, type IncrementData as I, type IdentificationDataIdOneOf as J, type BaseEventMetadata as K, type GetInventoryVariantsOptionsIdOneOf as L, type MessageEnvelope as M, type PreorderInfo as P, type QueryInventoryOptions as Q, ReasonType as R, type UpdateInventoryVariantsInventoryItem as U, WebhookIdentityType as W, type GetInventoryVariantsResponse as a, type QueryInventoryResponse as b, type InventoryItemChangedEnvelope as c, type InventoryVariantsChangedEnvelope as d, type InventoryItemV2 as e, type InventoryVariantV2 as f, type UpdateInventoryVariantsRequest as g, type UpdateInventoryVariantsResponse as h, type BulkUpdateInventoryVariantsRequestActionOneOf as i, type BulkUpdateInventoryVariantsResponse as j, type BulkUpdateInventoryItemsRequest as k, type BulkUpdateInventoryItemsResponse as l, type DecrementInventoryRequest as m, type DecrementDataIdOneOf as n, type DecrementInventoryResponse as o, type IncrementInventoryRequest as p, type IncrementDataIdOneOf as q, type IncrementInventoryResponse as r, type InventoryItemChanged as s, type InventoryVariantsChanged as t, type ChangedInventoryVariantData as u, type GetInventoryVariantsRequest as v, type GetInventoryVariantsRequestIdOneOf as w, type GetInventoryItemsRequest as x, type GetInventoryItemsResponse as y, type QueryInventoryRequest as z };
