// src/stores-v2-inventory-inventory.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTFieldMaskToSDKFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/stores-v2-inventory-inventory.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-v2-inventory-inventory.http.ts
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixInventoryApiV1InventoryReadApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores-reader/v2/collections",
        destPath: "/v2/collections"
      },
      {
        srcPath: "/stores-reader/v2/inventoryItems",
        destPath: "/v2/inventoryItems"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/stores-reader/v2/inventoryItems",
        destPath: "/v2/inventoryItems"
      },
      {
        srcPath: "/stores-reader/v2/collections",
        destPath: "/v2/collections"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveWixInventoryApiV1InventoryWriteApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-web",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      },
      {
        srcPath: "/wix-ecommerce-catalog",
        destPath: ""
      }
    ],
    "ecom._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "*.pub.wix-code.com": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/inventoryItems",
        destPath: "/v1/inventoryItems"
      },
      {
        srcPath: "/stores/v2/inventoryItems",
        destPath: "/v2/inventoryItems"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog",
        destPath: ""
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "www.wixgateway.com": [
      {
        srcPath: "/stores/v1/products",
        destPath: "/v1/products"
      },
      {
        srcPath: "/stores/v1/collections",
        destPath: "/v1/collections"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/catalog-server",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_inventory";
function updateInventoryVariants(payload) {
  function __updateInventoryVariants({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "inventoryItem.lastUpdated" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v2.inventory",
      method: "PATCH",
      methodFqn: "wix.inventory.api.v1.InventoryWriteApi.UpdateInventoryVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixInventoryApiV1InventoryWriteApiUrl({
        protoPath: "/v2/inventoryItems/product/{inventoryItem.productId}",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __updateInventoryVariants;
}
function decrementInventory(payload) {
  function __decrementInventory({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v2.inventory",
      method: "POST",
      methodFqn: "wix.inventory.api.v1.InventoryWriteApi.DecrementInventory",
      packageName: PACKAGE_NAME,
      url: resolveWixInventoryApiV1InventoryWriteApiUrl({
        protoPath: "/v2/inventoryItems/decrement",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __decrementInventory;
}
function incrementInventory(payload) {
  function __incrementInventory({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v2.inventory",
      method: "POST",
      methodFqn: "wix.inventory.api.v1.InventoryWriteApi.IncrementInventory",
      packageName: PACKAGE_NAME,
      url: resolveWixInventoryApiV1InventoryWriteApiUrl({
        protoPath: "/v2/inventoryItems/increment",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __incrementInventory;
}
function getInventoryVariants(payload) {
  function __getInventoryVariants({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v2.inventory",
      method: "POST",
      methodFqn: "wix.inventory.api.v1.InventoryReadApi.GetInventoryVariants",
      packageName: PACKAGE_NAME,
      url: resolveWixInventoryApiV1InventoryReadApiUrl({
        protoPath: "/v2/inventoryItems/{inventoryId}/getVariants",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "inventoryItem.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __getInventoryVariants;
}
function queryInventory(payload) {
  function __queryInventory({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v2.inventory",
      method: "POST",
      methodFqn: "wix.inventory.api.v1.InventoryReadApi.QueryInventory",
      packageName: PACKAGE_NAME,
      url: resolveWixInventoryApiV1InventoryReadApiUrl({
        protoPath: "/v2/inventoryItems/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "inventoryItems.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __queryInventory;
}

// src/stores-v2-inventory-inventory.universal.ts
var ReasonType = /* @__PURE__ */ ((ReasonType2) => {
  ReasonType2["UNKNOWN"] = "UNKNOWN";
  ReasonType2["ORDER"] = "ORDER";
  ReasonType2["MANUAL"] = "MANUAL";
  ReasonType2["REVERT_INVENTORY_CHANGE"] = "REVERT_INVENTORY_CHANGE";
  return ReasonType2;
})(ReasonType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function updateInventoryVariants2(productId, inventoryItem) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItem: { ...inventoryItem, productId }
  });
  const reqOpts = updateInventoryVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { inventoryItem: "$[1]" },
        explicitPathsToArguments: { "inventoryItem.productId": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["productId", "inventoryItem"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function decrementInventory2(decrementData) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    decrementData
  });
  const reqOpts = decrementInventory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { decrementData: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["decrementData"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function incrementInventory2(incrementData) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    incrementData
  });
  const reqOpts = incrementInventory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { incrementData: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["incrementData"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getInventoryVariants2(inventoryId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryId,
    externalId: options?.externalId,
    productId: options?.productId,
    variantIds: options?.variantIds
  });
  const reqOpts = getInventoryVariants(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          inventoryId: "$[0]",
          externalId: "$[1].externalId",
          productId: "$[1].productId",
          variantIds: "$[1].variantIds"
        },
        singleArgumentUnchanged: false
      },
      ["inventoryId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryInventory2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    query: options?.query
  });
  const reqOpts = queryInventory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0].query" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-v2-inventory-inventory.public.ts
function updateInventoryVariants3(httpClient) {
  return (productId, inventoryItem) => updateInventoryVariants2(
    productId,
    inventoryItem,
    // @ts-ignore
    { httpClient }
  );
}
function decrementInventory3(httpClient) {
  return (decrementData) => decrementInventory2(
    decrementData,
    // @ts-ignore
    { httpClient }
  );
}
function incrementInventory3(httpClient) {
  return (incrementData) => incrementInventory2(
    incrementData,
    // @ts-ignore
    { httpClient }
  );
}
function getInventoryVariants3(httpClient) {
  return (inventoryId, options) => getInventoryVariants2(
    inventoryId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryInventory3(httpClient) {
  return (options) => queryInventory2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onInventoryItemChanged = EventDefinition(
  "com.wix.ecommerce.inventory.api.v1.InventoryItemChanged",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTFieldMaskToSDKFieldMask,
        paths: [{ path: "data.fieldMask" }]
      },
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [{ path: "data.updatedDate" }]
      }
    ])
  )
)();
var onInventoryVariantsChanged = EventDefinition(
  "com.wix.ecommerce.inventory.api.v1.InventoryVariantsChanged",
  false,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [{ path: "data.updatedDate" }]
      }
    ])
  )
)();

// src/stores-v2-inventory-inventory.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var updateInventoryVariants4 = /* @__PURE__ */ createRESTModule(updateInventoryVariants3);
var decrementInventory4 = /* @__PURE__ */ createRESTModule(decrementInventory3);
var incrementInventory4 = /* @__PURE__ */ createRESTModule(incrementInventory3);
var getInventoryVariants4 = /* @__PURE__ */ createRESTModule(getInventoryVariants3);
var queryInventory4 = /* @__PURE__ */ createRESTModule(queryInventory3);
var onInventoryItemChanged2 = createEventModule(onInventoryItemChanged);
var onInventoryVariantsChanged2 = createEventModule(onInventoryVariantsChanged);
export {
  ReasonType,
  WebhookIdentityType,
  decrementInventory4 as decrementInventory,
  getInventoryVariants4 as getInventoryVariants,
  incrementInventory4 as incrementInventory,
  onInventoryItemChanged2 as onInventoryItemChanged,
  onInventoryVariantsChanged2 as onInventoryVariantsChanged,
  queryInventory4 as queryInventory,
  updateInventoryVariants4 as updateInventoryVariants
};
//# sourceMappingURL=index.mjs.map