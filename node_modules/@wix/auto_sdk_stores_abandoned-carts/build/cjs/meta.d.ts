import { G as GetAbandonedCartRequest$1, h as GetAbandonedCartResponse$1, Q as QueryAbandonedCartsRequest$1, j as QueryAbandonedCartsResponse$1 } from './stores-v1-abandoned-cart-abandoned-carts.universal-BXSQFiSw.js';

interface AbandonedCart {
    /**
     * Original cart ID
     * @format GUID
     */
    id?: string;
    /** Cart status */
    status?: StatusWithLiterals;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonTime?: Date | null;
    /** Buyer information */
    buyerInfo?: BuyerInfo;
    /** Cart total including currency symbol */
    total?: string | null;
    /**
     * History activities
     * @readonly
     */
    activities?: Activity[];
}
declare enum Status {
    ABANDONED = "ABANDONED",
    RECOVERED = "RECOVERED"
}
/** @enumType */
type StatusWithLiterals = Status | 'ABANDONED' | 'RECOVERED';
interface BuyerInfo {
    /**
     * Wix customer ID
     * @format GUID
     */
    id?: string;
    /** Customer information */
    identityType?: IdentityWithLiterals;
    /**
     * Customer's email address
     * @maxLength 50
     * @format EMAIL
     */
    email?: string | null;
    /**
     * Customer's phone number
     * @format PHONE
     */
    phone?: string | null;
    /** Customer's first name */
    firstName?: string | null;
    /** Customer's last name */
    lastName?: string | null;
}
declare enum Identity {
    /** Customer is the site owner */
    ADMIN = "ADMIN",
    /** Customer is logged in */
    MEMBER = "MEMBER",
    /** Customer is not logged in */
    VISITOR = "VISITOR",
    /** Contact was created for the customer */
    CONTACT = "CONTACT"
}
/** @enumType */
type IdentityWithLiterals = Identity | 'ADMIN' | 'MEMBER' | 'VISITOR' | 'CONTACT';
interface Activity {
    /**
     * Log item type
     * @readonly
     */
    activityType?: ActivityTypeWithLiterals;
    /**
     * Comment added to Log item
     * @maxLength 1000
     * @readonly
     */
    message?: string | null;
    /**
     * Log item occurrence timestamp
     * @readonly
     */
    timestamp?: Date | null;
    /** Custom data for un-typed activities */
    customData?: CustomData;
}
declare enum ActivityType {
    UNRECOGNIZED_TYPE = "UNRECOGNIZED_TYPE",
    SCHEDULED = "SCHEDULED",
    EMAIL_SENT = "EMAIL_SENT",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    TASK_CREATED = "TASK_CREATED",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY"
}
/** @enumType */
type ActivityTypeWithLiterals = ActivityType | 'UNRECOGNIZED_TYPE' | 'SCHEDULED' | 'EMAIL_SENT' | 'EMAIL_NOT_SENT' | 'NOTIFICATION_SENT' | 'TASK_CREATED' | 'CUSTOM_ACTIVITY';
interface CustomData {
    /**
     * Activity unique namespace
     * @maxLength 50
     */
    namespace?: string | null;
    /** Custom json field for any desired data */
    customValue?: Record<string, any> | null;
}
interface GetAbandonedCartRequest {
    /**
     * Cart ID
     * @format GUID
     */
    id: string;
}
interface GetAbandonedCartResponse {
    /** Cart details */
    abandonedCart?: AbandonedCart;
}
interface QueryAbandonedCartsRequest {
    /** Query details */
    query?: Query;
}
interface Query {
    paging?: Paging;
    /** A filter string, for more information see the intro section */
    filter?: string | null;
    /** Sort string, for more information see the intro section */
    sort?: string | null;
}
interface Paging {
    /**
     * The number of items to load
     * @max 100
     */
    limit?: number | null;
    /** The offset since the beginning of the collection */
    offset?: number | null;
}
interface QueryAbandonedCartsResponse {
    /** Abandoned carts list */
    abandonedCarts?: AbandonedCart[];
    /** Total number of carts */
    totalResults?: number;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getAbandonedCart(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetAbandonedCartRequest$1, GetAbandonedCartRequest, GetAbandonedCartResponse$1, GetAbandonedCartResponse>;
declare function queryAbandonedCarts(): __PublicMethodMetaInfo<'POST', {}, QueryAbandonedCartsRequest$1, QueryAbandonedCartsRequest, QueryAbandonedCartsResponse$1, QueryAbandonedCartsResponse>;

export { type __PublicMethodMetaInfo, getAbandonedCart, queryAbandonedCarts };
