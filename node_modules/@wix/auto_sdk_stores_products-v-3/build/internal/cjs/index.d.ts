import { HttpClient, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { V as V3Product, C as CreateProductOptions, P as ProductWithInventory, a as CreateProductWithInventoryOptions, b as CreateProductWithInventoryResponse, U as UpdateProduct, c as UpdateProductOptions, d as UpdateProductWithInventoryProduct, e as UpdateProductWithInventoryOptions, f as UpdateProductWithInventoryResponse, B as BulkCreateProductsOptions, g as BulkCreateProductsResponse, h as BulkCreateProductsWithInventoryOptions, i as BulkCreateProductsWithInventoryResponse, j as V3MaskedProduct, k as BulkUpdateProductsOptions, l as BulkUpdateProductsResponse, M as MaskedProductWithInventory, m as BulkUpdateProductsWithInventoryOptions, n as BulkUpdateProductsWithInventoryResponse, o as BulkUpdateProductsByFilterOptions, p as V3BulkUpdateProductsByFilterResponse, q as UpdateExtendedFieldsOptions, r as V3UpdateExtendedFieldsResponse, s as V3BulkDeleteProductsResponse, t as BulkDeleteProductsByFilterOptions, u as V3BulkDeleteProductsByFilterResponse, G as GetProductOptions, v as GetProductBySlugOptions, w as V3GetProductBySlugResponse, x as V3ProductSearch, S as SearchProductsOptions, y as V3SearchProductsResponse, Q as QueryProductsOptions, z as ProductsQueryBuilder, A as CountProductsOptions, D as V3CountProductsResponse, E as BulkUpdateProductVariantsByFilterOptions, F as BulkUpdateProductVariantsByFilterResponse, H as BulkAdjustProductVariantsByFilterOptions, I as V3BulkAdjustProductVariantsByFilterResponse, J as BulkAddInfoSectionsToProductsByFilterOptions, K as V3BulkAddInfoSectionsToProductsByFilterResponse, L as V3ProductIdWithRevision, N as BulkAddInfoSectionsToProductsOptions, O as V3BulkAddInfoSectionsToProductsResponse, R as BulkRemoveInfoSectionsFromProductsByFilterOptions, T as V3BulkRemoveInfoSectionsFromProductsByFilterResponse, W as BulkRemoveInfoSectionsFromProductsOptions, X as V3BulkRemoveInfoSectionsFromProductsResponse, Y as BulkAddProductsToCategoriesByFilterOptions, Z as BulkAddProductsToCategoriesByFilterResponse, _ as BulkRemoveProductsFromCategoriesByFilterOptions, $ as BulkRemoveProductsFromCategoriesByFilterResponse, a0 as GetAllProductsCategoryResponse, a1 as ProductCreatedEnvelope, a2 as ProductDeletedEnvelope, a3 as ProductUpdatedEnvelope } from './stores-catalog-v3-product-products-v-3.universal-DM48wRhS.js';
export { e3 as ActionEvent, gd as AdjustValue, ge as AdjustValueAdjustValueOneOf, ex as Aggregation, eO as AggregationData, hD as AggregationDataAggregationResults, hE as AggregationDataAggregationResultsResultOneOf, hr as AggregationDataAggregationResultsScalarResult, ft as AggregationDateHistogramAggregation, bh as AggregationDateHistogramAggregationInterval, ey as AggregationKindOneOf, fw as AggregationNestedAggregation, he as AggregationNestedAggregationNestedAggregationItem, hf as AggregationNestedAggregationNestedAggregationItemKindOneOf, bg as AggregationNestedAggregationNestedAggregationType, fr as AggregationRangeAggregation, h7 as AggregationRangeAggregationRangeBucket, f5 as AggregationResults, hB as AggregationResultsDateHistogramResults, hA as AggregationResultsGroupByValueResults, hn as AggregationResultsNestedAggregationResults, ho as AggregationResultsNestedAggregationResultsResultOneOf, hC as AggregationResultsNestedResults, hq as AggregationResultsRangeResults, f6 as AggregationResultsResultOneOf, eV as AggregationResultsScalarResult, hp as AggregationResultsValueResults, fs as AggregationScalarAggregation, aW as AggregationType, fp as AggregationValueAggregation, h8 as AggregationValueAggregationIncludeMissingValuesOptions, be as AggregationValueAggregationMissingValues, fq as AggregationValueAggregationOptionsOneOf, bd as AggregationValueAggregationSortDirection, bc as AggregationValueAggregationSortType, ac as Alignment, ck as AnchorData, eb as App, cq as AppEmbedData, cr as AppEmbedDataAppDataOneOf, at as AppType, fO as ApplicationError, cF as AudioData, b8 as AvailabilityStatus, ca as Background, cb as BackgroundBackgroundOneOf, aq as BackgroundType, hY as BaseEventMetadata, cI as BlockquoteData, cs as BookingData, bq as Border, cD as BorderColors, d9 as Brand, dq as BreadCrumb, dp as BreadcrumbsInfo, fP as BulkActionMetadata, g0 as BulkAddInfoSectionsToProductsByFilterRequest, g1 as BulkAddInfoSectionsToProductsByFilterResponse, g3 as BulkAddInfoSectionsToProductsRequest, g5 as BulkAddInfoSectionsToProductsResponse, hU as BulkAddProductsToCategoriesByFilterRequest, gc as BulkAdjustProductVariantsByFilterRequest, bj as BulkAdjustProductVariantsByFilterRequestRoundingStrategy, gh as BulkAdjustProductVariantsByFilterResponse, gK as BulkCreateProductsRequest, gO as BulkCreateProductsWithInventoryRequest, fY as BulkDeleteProductsByFilterRequest, fZ as BulkDeleteProductsByFilterResponse, fV as BulkDeleteProductsRequest, fW as BulkDeleteProductsResponse, gY as BulkDeleteProductsResponseBulkProductResult, gi as BulkInventoryItemAction, gE as BulkInventoryItemResult, gD as BulkInventoryItemResults, fX as BulkProductResult, gP as BulkProductResults, g6 as BulkRemoveInfoSectionsFromProductsByFilterRequest, g7 as BulkRemoveInfoSectionsFromProductsByFilterResponse, g8 as BulkRemoveInfoSectionsFromProductsRequest, g9 as BulkRemoveInfoSectionsFromProductsResponse, hV as BulkRemoveProductsFromCategoriesByFilterRequest, hK as BulkUpdateProductVariantsByFilterRequest, fT as BulkUpdateProductsByFilterRequest, fU as BulkUpdateProductsByFilterResponse, gQ as BulkUpdateProductsRequest, gR as BulkUpdateProductsWithInventoryRequest, ga as BulkUpdateVariantsByFilterRequest, gb as BulkUpdateVariantsByFilterResponse, cH as BulletedListData, bp as ButtonData, gn as CalculateProductInventorPreorderStatusAsyncRequest, go as CalculateProductInventorPreorderStatusAsyncResponse, cJ as CaptionData, gL as CatalogV3BulkProductResult, cC as CellStyle, aA as ChoiceType, c$ as ChoicesSettings, bB as CodeBlockData, cy as CollapsibleListData, cl as ColorData, br as Colors, fl as CommonAggregation, hk as CommonAggregationData, hd as CommonAggregationDateHistogramAggregation, fm as CommonAggregationKindOneOf, hg as CommonAggregationNestedAggregation, hb as CommonAggregationRangeAggregation, hc as CommonAggregationScalarAggregation, b4 as CommonAggregationType, h9 as CommonAggregationValueAggregation, ha as CommonAggregationValueAggregationOptionsOneOf, gG as CommonBulkActionMetadata, hh as CommonCursorPaging, hi as CommonCursorPagingMetadata, hG as CommonCursorQuery, hH as CommonCursorQueryPagingMethodOneOf, h2 as CommonCursorSearch, h3 as CommonCursorSearchPagingMethodOneOf, hj as CommonCursors, fN as CommonItemMetadata, b1 as CommonScalarType, fz as CommonSearchDetails, ba as CommonSearchDetailsMode, aZ as CommonSortOrder, fk as CommonSorting, d3 as ConnectedModifier, d7 as ConnectedModifierChoice, d8 as ConnectedModifierChoiceValueOneOf, d4 as ConnectedModifierModifierSettingsOneOf, cZ as ConnectedOption, d0 as ConnectedOptionChoice, d1 as ConnectedOptionChoiceValueOneOf, c_ as ConnectedOptionOptionSettingsOneOf, fI as CountProductsRequest, fJ as CountProductsResponse, gp as CreateProductRequest, gq as CreateProductResponse, gt as CreateProductWithInventoryRequest, ag as Crop, eK as CursorPaging, eM as CursorPagingMetadata, fc as CursorQuery, fd as CursorQueryPagingMethodOneOf, eu as CursorSearch, ev as CursorSearchPagingMethodOneOf, eN as Cursors, ef as CustomTag, eF as DateHistogramAggregation, b3 as DateHistogramAggregationInterval, f1 as DateHistogramResult, f3 as DateHistogramResults, hz as DateHistogramResultsDateHistogramResult, ci as Decoration, cj as DecorationDataOneOf, ar as DecorationType, dW as DeleteByFilterOperation, dV as DeleteByIdsOperation, er as DeleteProductRequest, es as DeleteProductResponse, fh as DeprecatedSearchProductsWithOffsetRequest, fB as DeprecatedSearchProductsWithOffsetResponse, cg as Design, cA as Dimensions, av as Direction, aK as DiscountType, bD as DividerData, fK as DoNotCallBulkCreateProductsRequest, fL as DoNotCallBulkCreateProductsResponse, fQ as DoNotCallBulkUpdateProductsRequest, fS as DoNotCallBulkUpdateProductsResponse, eg as DoNotCallCreateProductRequest, eh as DoNotCallCreateProductResponse, en as DoNotCallUpdateProductRequest, eo as DoNotCallUpdateProductResponse, dU as DocumentImage, dT as DocumentPayload, cM as DocumentStyle, dR as DocumentUpdateOperation, dZ as DomainEvent, d_ as DomainEventBodyOneOf, ei as DuplicateMediaIdAssignedToProduct, cw as EmbedData, e4 as Empty, d$ as EntityCreatedEvent, e2 as EntityDeletedEvent, e1 as EntityUpdatedEvent, aL as Enum, ct as EventData, hZ as EventMetadata, b9 as EventType, fb as EventuallyConsistentQueryProductsRequest, fe as EventuallyConsistentQueryProductsResponse, dH as ExtendedFields, ee as File, bE as FileData, bF as FileSource, bG as FileSourceDataOneOf, aI as FileType, dg as FixedMonetaryAmount, co as FontSizeData, as as FontType, d5 as FreeTextSettings, g2 as FulfillerDeleted, bT as GIF, bS as GIFData, ai as GIFType, bI as GalleryData, bO as GalleryOptions, hW as GetAllProductsCategoryRequest, el as GetProductBySlugRequest, em as GetProductBySlugResponse, ej as GetProductRequest, ek as GetProductResponse, c9 as Gradient, fx as GroupByAggregation, fy as GroupByAggregationKindOneOf, f2 as GroupByValueResults, hs as GroupByValueResultsNestedValueAggregationResult, bV as HTMLData, bW as HTMLDataDataOneOf, bU as HeadingData, bw as Height, e7 as IdentificationData, e8 as IdentificationDataIdOneOf, bK as Image, bX as ImageData, bZ as ImageDataStyles, eA as IncludeMissingValuesOptions, dS as IndexDocument, da as InfoSection, au as InitialExpandedItems, aV as Interval, gN as InvalidDigitalFileIds, e9 as InvalidateCache, ea as InvalidateCacheGetByOneOf, dh as Inventory, aC as InventoryAvailabilityStatus, gj as InventoryItem, gy as InventoryItemComposite, gz as InventoryItemCompositeTrackingMethodOneOf, gk as InventoryItemTrackingMethodOneOf, dG as InventoryStatus, bM as Item, bN as ItemDataOneOf, gF as ItemMetadata, bQ as ItemStyle, cW as Keyword, bP as Layout, cK as LayoutCellData, ae as LayoutType, aa as LineStyle, by as Link, cm as LinkData, bz as LinkDataOneOf, b_ as LinkPreviewData, b$ as LinkPreviewDataStyles, cE as ListValue, c0 as MapData, c1 as MapSettings, al as MapType, fR as MaskedProduct, aG as MeasurementUnit, cO as Media, cU as MediaItemsInfo, ay as MediaType, cn as MentionData, e6 as MessageEnvelope, cL as Metadata, dO as MinVariantPriceInfo, aS as MissingValues, aX as Mode, d6 as ModifierChoicesSettings, aB as ModifierRenderType, d2 as MultipleColors, eI as NestedAggregation, eG as NestedAggregationItem, eH as NestedAggregationItemKindOneOf, fu as NestedAggregationNestedAggregationItem, fv as NestedAggregationNestedAggregationItemKindOneOf, b2 as NestedAggregationNestedAggregationType, eR as NestedAggregationResults, eS as NestedAggregationResultsResultOneOf, aU as NestedAggregationType, e_ as NestedResultValue, e$ as NestedResultValueResultOneOf, f4 as NestedResults, hw as NestedResultsNestedResultValue, hx as NestedResultsNestedResultValueResultOneOf, hu as NestedResultsRangeResult, hy as NestedResultsResults, hv as NestedResultsScalarResult, ht as NestedResultsValueResult, eW as NestedValueAggregationResult, bm as Node, bn as NodeDataOneOf, bo as NodeStyle, a4 as NodeType, ax as NullValue, cx as Oembed, c5 as Option, du as OptionChoice, dv as OptionChoiceIds, dw as OptionChoiceNames, gA as OptionChoiceReferences, cd as OptionDesign, c8 as OptionLayout, cG as OrderedListData, af as Orientation, bH as PDFSettings, ec as Page, fC as PagingMetadata, c2 as ParagraphData, c4 as Permissions, di as PhysicalProperties, fi as PlatformOffsetSearch, fj as PlatformOffsetSearchPagingMethodOneOf, fA as PlatformPaging, cv as PlaybackOptions, bs as PluginContainerData, a6 as PluginContainerDataAlignment, bt as PluginContainerDataWidth, bu as PluginContainerDataWidthDataOneOf, ce as Poll, c3 as PollData, cf as PollDataLayout, cc as PollDesign, c7 as PollLayout, ap as PollLayoutDirection, ao as PollLayoutType, c6 as PollSettings, ak as Position, gl as PreorderInfo, aD as PreorderStatus, dx as PriceInfo, dA as PricePerUnit, dl as PricePerUnitRange, dm as PricePerUnitRangePricePerUnit, dj as PricePerUnitSettings, df as PriceRange, gm as Product, dc as ProductCategoriesInfo, dd as ProductCategory, de as ProductCategoryIdsInfo, g4 as ProductIdWithRevision, cP as ProductMedia, cR as ProductMediaMediaOneOf, cQ as ProductMediaSetByOneOf, az as ProductOptionRenderType, aE as ProductPreorderAvailability, aF as ProductType, fE as ProductVariantIds, fH as ProductVariants, gu as ProductWithInventoryTypedPropertiesOneOf, h$ as ProductsQueryResult, ff as QueryProductsRequest, fg as QueryProductsResponse, eD as RangeAggregation, fn as RangeAggregationRangeBucket, eQ as RangeAggregationResult, ez as RangeBucket, eY as RangeResult, eU as RangeResults, hm as RangeResultsRangeAggregationResult, bA as Rel, aY as RequestedFields, e0 as RestoreInfo, f0 as Results, fD as RetrieveVariantsRequest, fG as RetrieveVariantsResponse, dy as RevenueDetails, db as Ribbon, bl as RichContent, b7 as RoundingStrategy, eE as ScalarAggregation, eZ as ScalarResult, aT as ScalarType, eJ as SearchDetails, b5 as SearchDetailsMode, e5 as SearchIndexingNotification, et as SearchProductsRequest, eL as SearchProductsResponse, f8 as SearchRelated, f9 as SearchRelatedDetails, f7 as SearchRelatedProductsRequest, fa as SearchRelatedProductsResponse, dC as SecuredMedia, cV as SeoSchema, cY as Settings, aO as SingleEntityOpsRequestedFields, aR as SortDirection, aP as SortOrder, aQ as SortType, ew as Sorting, aj as Source, bv as Spoiler, cp as SpoilerData, aM as State, bx as Styles, bY as StylesBorder, dJ as Subscription, dK as SubscriptionCyclesOneOf, dI as SubscriptionDetails, dL as SubscriptionDiscount, dM as SubscriptionDiscountDiscountOneOf, aJ as SubscriptionFrequency, dE as SubscriptionPrice, dF as SubscriptionPricePerUnit, dD as SubscriptionPricesInfo, cB as TableCellData, cz as TableData, cX as Tag, a8 as Target, a9 as TextAlignment, ch as TextData, cN as TextNodeStyle, bC as TextStyle, cT as Thumbnail, bR as Thumbnails, ah as ThumbnailsAlignment, hX as TreeReference, a7 as Type, ed as URI, gf as UnsignedAdjustValue, gg as UnsignedAdjustValueAdjustValueOneOf, eq as UnsupportedFieldMasks, dX as UpdateByFilterOperation, dP as UpdateDocumentsEvent, dQ as UpdateDocumentsEventOperationOneOf, dY as UpdateExistingOperation, f_ as UpdateExtendedFieldsRequest, f$ as UpdateExtendedFieldsResponse, gH as UpdateProductRequest, gI as UpdateProductResponse, gJ as UpdateProductWithInventoryRequest, bJ as V1Media, hM as V3AdjustValue, hN as V3AdjustValueAdjustValueOneOf, hQ as V3BulkAddInfoSectionsToProductsByFilterRequest, hR as V3BulkAddInfoSectionsToProductsRequest, hL as V3BulkAdjustProductVariantsByFilterRequest, gZ as V3BulkDeleteProductsByFilterRequest, gX as V3BulkDeleteProductsRequest, fM as V3BulkProductResult, hS as V3BulkRemoveInfoSectionsFromProductsByFilterRequest, hT as V3BulkRemoveInfoSectionsFromProductsRequest, gS as V3BulkUpdateProductsByFilterRequest, hJ as V3CountProductsRequest, gV as V3DeleteProductRequest, gW as V3DeleteProductResponse, h0 as V3GetProductBySlugRequest, g_ as V3GetProductRequest, g$ as V3GetProductResponse, gB as V3OptionChoiceIds, gC as V3OptionChoiceNames, h_ as V3ProductSearchSpec, bk as V3ProductTypedPropertiesOneOf, hF as V3QueryProductsRequest, hI as V3QueryProductsResponse, h1 as V3SearchProductsRequest, hO as V3UnsignedAdjustValue, hP as V3UnsignedAdjustValueAdjustValueOneOf, gU as V3UpdateExtendedFieldsRequest, gv as V3VariantsInfo, eB as ValueAggregation, fo as ValueAggregationIncludeMissingValuesOptions, b0 as ValueAggregationMissingValues, eC as ValueAggregationOptionsOneOf, eP as ValueAggregationResult, a$ as ValueAggregationSortDirection, a_ as ValueAggregationSortType, eX as ValueResult, eT as ValueResults, hl as ValueResultsValueAggregationResult, ds as Variant, dB as VariantDigitalProperties, gs as VariantNotAlignedWithProduct, dz as VariantPhysicalProperties, dN as VariantSummary, dt as VariantTypedPropertiesOneOf, gw as VariantWithInventory, gx as VariantWithInventoryTypedPropertiesOneOf, fF as VariantsCursorPaging, dr as VariantsInfo, gr as VariantsNotAlignedWithProduct, b6 as VariantsOpsRequestedFields, ep as VariantsRemoved, aw as VerticalAlignment, bL as Video, cu as VideoData, cS as VideoResolution, ad as ViewMode, am as ViewRole, an as VoteRole, aN as WebhookIdentityType, dn as WeightMeasurementUnitInfo, dk as WeightRange, aH as WeightUnit, ab as Width, a5 as WidthType, h5 as WixCommonAggregation, h6 as WixCommonAggregationKindOneOf, bi as WixCommonAggregationType, gM as WixCommonItemMetadata, bf as WixCommonScalarType, gT as WixCommonSearchDetails, bb as WixCommonSortOrder, h4 as WixCommonSorting } from './stores-catalog-v3-product-products-v-3.universal-DM48wRhS.js';

declare function createProduct$1(httpClient: HttpClient): CreateProductSignature;
interface CreateProductSignature {
    /**
     * Creates a new product.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     * @returns Created product.
     */
    (product: V3Product, options?: CreateProductOptions | undefined): Promise<V3Product>;
}
declare function createProductWithInventory$1(httpClient: HttpClient): CreateProductWithInventorySignature;
interface CreateProductWithInventorySignature {
    /**
     * Creates a new product, and can create the product's inventory in the variants' default locations.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    (product: ProductWithInventory, options?: CreateProductWithInventoryOptions | undefined): Promise<CreateProductWithInventoryResponse>;
}
declare function updateProduct$1(httpClient: HttpClient): UpdateProductSignature;
interface UpdateProductSignature {
    /**
     * Updates a product.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + If `variantsInfo.variants` are passed, they will replace all existing variants.
     * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     * @returns Updated product.
     */
    (_id: string, product: UpdateProduct, options?: UpdateProductOptions | undefined): Promise<V3Product>;
}
declare function updateProductWithInventory$1(httpClient: HttpClient): UpdateProductWithInventorySignature;
interface UpdateProductWithInventorySignature {
    /**
     * Updates a new product, and can update the product's inventory.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + Passing `variantsInfo.variants` will replace all existing variants.
     * > + To update existing `variantsInfo.variants`, pass `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     */
    (_id: string, product: UpdateProductWithInventoryProduct, options?: UpdateProductWithInventoryOptions | undefined): Promise<UpdateProductWithInventoryResponse>;
}
declare function bulkCreateProducts$1(httpClient: HttpClient): BulkCreateProductsSignature;
interface BulkCreateProductsSignature {
    /**
     * Creates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create.
     */
    (products: V3Product[], options?: BulkCreateProductsOptions | undefined): Promise<BulkCreateProductsResponse>;
}
declare function bulkCreateProductsWithInventory$1(httpClient: HttpClient): BulkCreateProductsWithInventorySignature;
interface BulkCreateProductsWithInventorySignature {
    /**
     * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create with inventory.
     */
    (products: ProductWithInventory[], options?: BulkCreateProductsWithInventoryOptions | undefined): Promise<BulkCreateProductsWithInventoryResponse>;
}
declare function bulkUpdateProducts$1(httpClient: HttpClient): BulkUpdateProductsSignature;
interface BulkUpdateProductsSignature {
    /**
     * Updates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: V3MaskedProduct[], options?: BulkUpdateProductsOptions | undefined): Promise<BulkUpdateProductsResponse>;
}
declare function bulkUpdateProductsWithInventory$1(httpClient: HttpClient): BulkUpdateProductsWithInventorySignature;
interface BulkUpdateProductsWithInventorySignature {
    /**
     * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: MaskedProductWithInventory[], options?: BulkUpdateProductsWithInventoryOptions | undefined): Promise<BulkUpdateProductsWithInventoryResponse>;
}
declare function bulkUpdateProductsByFilter$1(httpClient: HttpClient): BulkUpdateProductsByFilterSignature;
interface BulkUpdateProductsByFilterSignature {
    /**
     * Updates multiple products, given the provided filter.
     *
     * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
     *
     * > **Note:**
     * > The following fields cannot be updated with this endpoint:
     * > + `slug`
     * > + `options`
     * > + `modifiers`
     * > + `variantsInfo`
     * >
     * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
     */
    (options?: BulkUpdateProductsByFilterOptions | undefined): Promise<V3BulkUpdateProductsByFilterResponse>;
}
declare function updateExtendedFields$1(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates a product's extended fields.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must first be configured in the app dashboard.
     * @param - Product ID.
     * @param - App namespace.
     * @deprecated
     */
    (productId: string, namespace: string, options?: UpdateExtendedFieldsOptions | undefined): Promise<V3UpdateExtendedFieldsResponse>;
}
declare function deleteProduct$1(httpClient: HttpClient): DeleteProductSignature;
interface DeleteProductSignature {
    /**
     * Deletes a product and all its variants.
     * @param - Product ID.
     */
    (productId: string): Promise<void>;
}
declare function bulkDeleteProducts$1(httpClient: HttpClient): BulkDeleteProductsSignature;
interface BulkDeleteProductsSignature {
    /**
     * Deletes multiple products.
     * @param - IDs of products to delete.
     */
    (productIds: string[]): Promise<V3BulkDeleteProductsResponse>;
}
declare function bulkDeleteProductsByFilter$1(httpClient: HttpClient): BulkDeleteProductsByFilterSignature;
interface BulkDeleteProductsByFilterSignature {
    /**
     * Delete multiple products, given the provided filter.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkDeleteProductsByFilterOptions | undefined): Promise<V3BulkDeleteProductsByFilterResponse>;
}
declare function getProduct$1(httpClient: HttpClient): GetProductSignature;
interface GetProductSignature {
    /**
     * Retrieves a product.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product ID.
     * @returns Product.
     */
    (productId: string, options?: GetProductOptions | undefined): Promise<V3Product>;
}
declare function getProductBySlug$1(httpClient: HttpClient): GetProductBySlugSignature;
interface GetProductBySlugSignature {
    /**
     * Retrieves a product by slug.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product slug.
     */
    (slug: string, options?: GetProductBySlugOptions | undefined): Promise<V3GetProductBySlugResponse>;
}
declare function searchProducts$1(httpClient: HttpClient): SearchProductsSignature;
interface SearchProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, search expression, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Notes:**
     * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
     * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Search options.
     */
    (search: V3ProductSearch, options?: SearchProductsOptions | undefined): Promise<V3SearchProductsResponse>;
}
declare function queryProducts$1(httpClient: HttpClient): QueryProductsSignature;
interface QueryProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Notes:**
     * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
     * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    (options?: QueryProductsOptions | undefined): ProductsQueryBuilder;
}
declare function countProducts$1(httpClient: HttpClient): CountProductsSignature;
interface CountProductsSignature {
    /**
     * Counts the number of products that match the provided filtering.
     */
    (options?: CountProductsOptions | undefined): Promise<V3CountProductsResponse>;
}
declare function bulkUpdateProductVariantsByFilter$1(httpClient: HttpClient): BulkUpdateProductVariantsByFilterSignature;
interface BulkUpdateProductVariantsByFilterSignature {
    /**
     * Updates a variant of multiple products, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be updated:
     * + `visible`
     * + `price`
     * + `revenueDetails.cost`
     * + `physicalOptions`
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkUpdateProductVariantsByFilterOptions | undefined): Promise<BulkUpdateProductVariantsByFilterResponse>;
}
declare function bulkAdjustProductVariantsByFilter$1(httpClient: HttpClient): BulkAdjustProductVariantsByFilterSignature;
interface BulkAdjustProductVariantsByFilterSignature {
    /**
     * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be increased/decreased by amount or percentage:
     * + `compareAtPrice`
     * + `actualPrice`
     * + `cost`
     * + `compareAtPriceDiscount`
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkAdjustProductVariantsByFilterOptions | undefined): Promise<V3BulkAdjustProductVariantsByFilterResponse>;
}
declare function bulkAddInfoSectionsToProductsByFilter$1(httpClient: HttpClient): BulkAddInfoSectionsToProductsByFilterSignature;
interface BulkAddInfoSectionsToProductsByFilterSignature {
    /**
     * Adds info sections to multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkAddInfoSectionsToProductsByFilterOptions | undefined): Promise<V3BulkAddInfoSectionsToProductsByFilterResponse>;
}
declare function bulkAddInfoSectionsToProducts$1(httpClient: HttpClient): BulkAddInfoSectionsToProductsSignature;
interface BulkAddInfoSectionsToProductsSignature {
    /**
     * Adds info sections to multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: BulkAddInfoSectionsToProductsOptions | undefined): Promise<V3BulkAddInfoSectionsToProductsResponse>;
}
declare function bulkRemoveInfoSectionsFromProductsByFilter$1(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsByFilterSignature;
interface BulkRemoveInfoSectionsFromProductsByFilterSignature {
    /**
     * Removes info sections from multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkRemoveInfoSectionsFromProductsByFilterOptions | undefined): Promise<V3BulkRemoveInfoSectionsFromProductsByFilterResponse>;
}
declare function bulkRemoveInfoSectionsFromProducts$1(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsSignature;
interface BulkRemoveInfoSectionsFromProductsSignature {
    /**
     * Removes info sections from multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: BulkRemoveInfoSectionsFromProductsOptions | undefined): Promise<V3BulkRemoveInfoSectionsFromProductsResponse>;
}
declare function bulkAddProductsToCategoriesByFilter$1(httpClient: HttpClient): BulkAddProductsToCategoriesByFilterSignature;
interface BulkAddProductsToCategoriesByFilterSignature {
    /**
     * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: BulkAddProductsToCategoriesByFilterOptions | undefined): Promise<BulkAddProductsToCategoriesByFilterResponse>;
}
declare function bulkRemoveProductsFromCategoriesByFilter$1(httpClient: HttpClient): BulkRemoveProductsFromCategoriesByFilterSignature;
interface BulkRemoveProductsFromCategoriesByFilterSignature {
    /**
     * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: BulkRemoveProductsFromCategoriesByFilterOptions | undefined): Promise<BulkRemoveProductsFromCategoriesByFilterResponse>;
}
declare function getAllProductsCategory$1(httpClient: HttpClient): GetAllProductsCategorySignature;
interface GetAllProductsCategorySignature {
    /**
     * Retrieves the id of "All Products" category which is automatically assigned to all products.
     */
    (): Promise<GetAllProductsCategoryResponse>;
}
declare const onProductCreated$1: EventDefinition<ProductCreatedEnvelope, "wix.stores.catalog.v3.product_created">;
declare const onProductDeleted$1: EventDefinition<ProductDeletedEnvelope, "wix.stores.catalog.v3.product_deleted">;
declare const onProductUpdated$1: EventDefinition<ProductUpdatedEnvelope, "wix.stores.catalog.v3.product_updated">;

declare const createProduct: MaybeContext<BuildRESTFunction<typeof createProduct$1> & typeof createProduct$1>;
declare const createProductWithInventory: MaybeContext<BuildRESTFunction<typeof createProductWithInventory$1> & typeof createProductWithInventory$1>;
declare const updateProduct: MaybeContext<BuildRESTFunction<typeof updateProduct$1> & typeof updateProduct$1>;
declare const updateProductWithInventory: MaybeContext<BuildRESTFunction<typeof updateProductWithInventory$1> & typeof updateProductWithInventory$1>;
declare const bulkCreateProducts: MaybeContext<BuildRESTFunction<typeof bulkCreateProducts$1> & typeof bulkCreateProducts$1>;
declare const bulkCreateProductsWithInventory: MaybeContext<BuildRESTFunction<typeof bulkCreateProductsWithInventory$1> & typeof bulkCreateProductsWithInventory$1>;
declare const bulkUpdateProducts: MaybeContext<BuildRESTFunction<typeof bulkUpdateProducts$1> & typeof bulkUpdateProducts$1>;
declare const bulkUpdateProductsWithInventory: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsWithInventory$1> & typeof bulkUpdateProductsWithInventory$1>;
declare const bulkUpdateProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductsByFilter$1> & typeof bulkUpdateProductsByFilter$1>;
declare const updateExtendedFields: MaybeContext<BuildRESTFunction<typeof updateExtendedFields$1> & typeof updateExtendedFields$1>;
declare const deleteProduct: MaybeContext<BuildRESTFunction<typeof deleteProduct$1> & typeof deleteProduct$1>;
declare const bulkDeleteProducts: MaybeContext<BuildRESTFunction<typeof bulkDeleteProducts$1> & typeof bulkDeleteProducts$1>;
declare const bulkDeleteProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkDeleteProductsByFilter$1> & typeof bulkDeleteProductsByFilter$1>;
declare const getProduct: MaybeContext<BuildRESTFunction<typeof getProduct$1> & typeof getProduct$1>;
declare const getProductBySlug: MaybeContext<BuildRESTFunction<typeof getProductBySlug$1> & typeof getProductBySlug$1>;
declare const searchProducts: MaybeContext<BuildRESTFunction<typeof searchProducts$1> & typeof searchProducts$1>;
declare const queryProducts: MaybeContext<BuildRESTFunction<typeof queryProducts$1> & typeof queryProducts$1>;
declare const countProducts: MaybeContext<BuildRESTFunction<typeof countProducts$1> & typeof countProducts$1>;
declare const bulkUpdateProductVariantsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateProductVariantsByFilter$1> & typeof bulkUpdateProductVariantsByFilter$1>;
declare const bulkAdjustProductVariantsByFilter: MaybeContext<BuildRESTFunction<typeof bulkAdjustProductVariantsByFilter$1> & typeof bulkAdjustProductVariantsByFilter$1>;
declare const bulkAddInfoSectionsToProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkAddInfoSectionsToProductsByFilter$1> & typeof bulkAddInfoSectionsToProductsByFilter$1>;
declare const bulkAddInfoSectionsToProducts: MaybeContext<BuildRESTFunction<typeof bulkAddInfoSectionsToProducts$1> & typeof bulkAddInfoSectionsToProducts$1>;
declare const bulkRemoveInfoSectionsFromProductsByFilter: MaybeContext<BuildRESTFunction<typeof bulkRemoveInfoSectionsFromProductsByFilter$1> & typeof bulkRemoveInfoSectionsFromProductsByFilter$1>;
declare const bulkRemoveInfoSectionsFromProducts: MaybeContext<BuildRESTFunction<typeof bulkRemoveInfoSectionsFromProducts$1> & typeof bulkRemoveInfoSectionsFromProducts$1>;
declare const bulkAddProductsToCategoriesByFilter: MaybeContext<BuildRESTFunction<typeof bulkAddProductsToCategoriesByFilter$1> & typeof bulkAddProductsToCategoriesByFilter$1>;
declare const bulkRemoveProductsFromCategoriesByFilter: MaybeContext<BuildRESTFunction<typeof bulkRemoveProductsFromCategoriesByFilter$1> & typeof bulkRemoveProductsFromCategoriesByFilter$1>;
declare const getAllProductsCategory: MaybeContext<BuildRESTFunction<typeof getAllProductsCategory$1> & typeof getAllProductsCategory$1>;
/** */
declare const onProductCreated: BuildEventDefinition<typeof onProductCreated$1>;
/**
 * Triggered when a product is deleted.
 */
declare const onProductDeleted: BuildEventDefinition<typeof onProductDeleted$1>;
/**
 * Triggered when a product is updated.
 */
declare const onProductUpdated: BuildEventDefinition<typeof onProductUpdated$1>;

export { BulkAddInfoSectionsToProductsByFilterOptions, BulkAddInfoSectionsToProductsOptions, BulkAddProductsToCategoriesByFilterOptions, BulkAddProductsToCategoriesByFilterResponse, BulkAdjustProductVariantsByFilterOptions, BulkCreateProductsOptions, BulkCreateProductsResponse, BulkCreateProductsWithInventoryOptions, BulkCreateProductsWithInventoryResponse, BulkDeleteProductsByFilterOptions, BulkRemoveInfoSectionsFromProductsByFilterOptions, BulkRemoveInfoSectionsFromProductsOptions, BulkRemoveProductsFromCategoriesByFilterOptions, BulkRemoveProductsFromCategoriesByFilterResponse, BulkUpdateProductVariantsByFilterOptions, BulkUpdateProductVariantsByFilterResponse, BulkUpdateProductsByFilterOptions, BulkUpdateProductsOptions, BulkUpdateProductsResponse, BulkUpdateProductsWithInventoryOptions, BulkUpdateProductsWithInventoryResponse, CountProductsOptions, CreateProductOptions, CreateProductWithInventoryOptions, CreateProductWithInventoryResponse, GetAllProductsCategoryResponse, GetProductBySlugOptions, GetProductOptions, MaskedProductWithInventory, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductUpdatedEnvelope, ProductWithInventory, ProductsQueryBuilder, QueryProductsOptions, SearchProductsOptions, UpdateExtendedFieldsOptions, UpdateProduct, UpdateProductOptions, UpdateProductWithInventoryOptions, UpdateProductWithInventoryProduct, UpdateProductWithInventoryResponse, V3BulkAddInfoSectionsToProductsByFilterResponse, V3BulkAddInfoSectionsToProductsResponse, V3BulkAdjustProductVariantsByFilterResponse, V3BulkDeleteProductsByFilterResponse, V3BulkDeleteProductsResponse, V3BulkRemoveInfoSectionsFromProductsByFilterResponse, V3BulkRemoveInfoSectionsFromProductsResponse, V3BulkUpdateProductsByFilterResponse, V3CountProductsResponse, V3GetProductBySlugResponse, V3MaskedProduct, V3Product, V3ProductIdWithRevision, V3SearchProductsResponse, V3UpdateExtendedFieldsResponse, bulkAddInfoSectionsToProducts, bulkAddInfoSectionsToProductsByFilter, bulkAddProductsToCategoriesByFilter, bulkAdjustProductVariantsByFilter, bulkCreateProducts, bulkCreateProductsWithInventory, bulkDeleteProducts, bulkDeleteProductsByFilter, bulkRemoveInfoSectionsFromProducts, bulkRemoveInfoSectionsFromProductsByFilter, bulkRemoveProductsFromCategoriesByFilter, bulkUpdateProductVariantsByFilter, bulkUpdateProducts, bulkUpdateProductsByFilter, bulkUpdateProductsWithInventory, countProducts, createProduct, createProductWithInventory, deleteProduct, getAllProductsCategory, getProduct, getProductBySlug, onProductCreated, onProductDeleted, onProductUpdated, queryProducts, searchProducts, updateExtendedFields, updateProduct, updateProductWithInventory };
