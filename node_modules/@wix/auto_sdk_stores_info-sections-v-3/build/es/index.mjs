// src/stores-catalog-v3-info-section-info-sections-v-3.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTFloatToSDKFloat as transformRESTFloatToSDKFloat2 } from "@wix/sdk-runtime/transformations/float";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/stores-catalog-v3-info-section-info-sections-v-3.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v3-info-section-info-sections-v-3.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/info-sections",
        destPath: "/v3/info-sections"
      },
      {
        srcPath: "/stores/v3/bulk/info-sections",
        destPath: "/v3/bulk/info-sections"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/info-sections",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/info-section",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/info-section",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/info-section",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/info-section",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/info-section",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_info-sections-v-3";
function createInfoSection(payload) {
  function __createInfoSection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "infoSection.createdDate" },
          { path: "infoSection.updatedDate" },
          { path: "infoSection.description.metadata.createdTimestamp" },
          { path: "infoSection.description.metadata.updatedTimestamp" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "infoSection.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.options.item.ratio"
          },
          { path: "infoSection.description.nodes.imageData.image.duration" },
          { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
          { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
          {
            path: "infoSection.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "infoSection.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
          },
          { path: "infoSection.description.nodes.appEmbedData.image.duration" },
          { path: "infoSection.description.nodes.videoData.video.duration" },
          {
            path: "infoSection.description.nodes.videoData.thumbnail.duration"
          },
          { path: "infoSection.description.nodes.audioData.audio.duration" },
          {
            path: "infoSection.description.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.CreateInfoSection",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/info-sections",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "infoSection.createdDate" },
            { path: "infoSection.updatedDate" },
            { path: "infoSection.description.metadata.createdTimestamp" },
            { path: "infoSection.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "infoSection.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "infoSection.description.nodes.imageData.image.duration"
            },
            { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
            { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
            {
              path: "infoSection.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "infoSection.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.video.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.audio.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createInfoSection;
}
function getInfoSection(payload) {
  function __getInfoSection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "GET",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.GetInfoSection",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/info-sections/{infoSectionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "infoSection.createdDate" },
            { path: "infoSection.updatedDate" },
            { path: "infoSection.description.metadata.createdTimestamp" },
            { path: "infoSection.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "infoSection.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "infoSection.description.nodes.imageData.image.duration"
            },
            { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
            { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
            {
              path: "infoSection.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "infoSection.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.video.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.audio.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getInfoSection;
}
function getOrCreateInfoSection(payload) {
  function __getOrCreateInfoSection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "infoSection.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.options.item.ratio"
          },
          { path: "infoSection.description.nodes.imageData.image.duration" },
          { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
          { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
          {
            path: "infoSection.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "infoSection.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
          },
          { path: "infoSection.description.nodes.appEmbedData.image.duration" },
          { path: "infoSection.description.nodes.videoData.video.duration" },
          {
            path: "infoSection.description.nodes.videoData.thumbnail.duration"
          },
          { path: "infoSection.description.nodes.audioData.audio.duration" },
          {
            path: "infoSection.description.nodes.audioData.coverImage.duration"
          }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "infoSection.description.metadata.createdTimestamp" },
          { path: "infoSection.description.metadata.updatedTimestamp" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.GetOrCreateInfoSection",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/info-sections/get-or-create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "infoSection.createdDate" },
            { path: "infoSection.updatedDate" },
            { path: "infoSection.description.metadata.createdTimestamp" },
            { path: "infoSection.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "infoSection.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "infoSection.description.nodes.imageData.image.duration"
            },
            { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
            { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
            {
              path: "infoSection.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "infoSection.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.video.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.audio.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrCreateInfoSection;
}
function bulkGetOrCreateInfoSections(payload) {
  function __bulkGetOrCreateInfoSections({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "infoSections.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "infoSections.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "infoSections.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "infoSections.description.nodes.galleryData.options.item.ratio"
          },
          { path: "infoSections.description.nodes.imageData.image.duration" },
          { path: "infoSections.description.nodes.mapData.mapSettings.lat" },
          { path: "infoSections.description.nodes.mapData.mapSettings.lng" },
          {
            path: "infoSections.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "infoSections.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "infoSections.description.nodes.pollData.design.poll.background.image.duration"
          },
          {
            path: "infoSections.description.nodes.appEmbedData.image.duration"
          },
          { path: "infoSections.description.nodes.videoData.video.duration" },
          {
            path: "infoSections.description.nodes.videoData.thumbnail.duration"
          },
          { path: "infoSections.description.nodes.audioData.audio.duration" },
          {
            path: "infoSections.description.nodes.audioData.coverImage.duration"
          }
        ]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "infoSections.description.metadata.createdTimestamp" },
          { path: "infoSections.description.metadata.updatedTimestamp" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkGetOrCreateInfoSections",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/bulk/info-sections/get-or-create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.description.metadata.createdTimestamp" },
            { path: "results.item.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.item.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "results.item.description.nodes.imageData.image.duration"
            },
            {
              path: "results.item.description.nodes.mapData.mapSettings.lat"
            },
            {
              path: "results.item.description.nodes.mapData.mapSettings.lng"
            },
            {
              path: "results.item.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "results.item.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "results.item.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "results.item.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "results.item.description.nodes.videoData.video.duration"
            },
            {
              path: "results.item.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "results.item.description.nodes.audioData.audio.duration"
            },
            {
              path: "results.item.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkGetOrCreateInfoSections;
}
function updateInfoSection(payload) {
  function __updateInfoSection({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "infoSection.createdDate" },
          { path: "infoSection.updatedDate" },
          { path: "infoSection.description.metadata.createdTimestamp" },
          { path: "infoSection.description.metadata.updatedTimestamp" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "infoSection.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "infoSection.description.nodes.galleryData.options.item.ratio"
          },
          { path: "infoSection.description.nodes.imageData.image.duration" },
          { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
          { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
          {
            path: "infoSection.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "infoSection.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
          },
          { path: "infoSection.description.nodes.appEmbedData.image.duration" },
          { path: "infoSection.description.nodes.videoData.video.duration" },
          {
            path: "infoSection.description.nodes.videoData.thumbnail.duration"
          },
          { path: "infoSection.description.nodes.audioData.audio.duration" },
          {
            path: "infoSection.description.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "PATCH",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.UpdateInfoSection",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/info-sections/{infoSection.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "infoSection.createdDate" },
            { path: "infoSection.updatedDate" },
            { path: "infoSection.description.metadata.createdTimestamp" },
            { path: "infoSection.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "infoSection.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "infoSection.description.nodes.imageData.image.duration"
            },
            { path: "infoSection.description.nodes.mapData.mapSettings.lat" },
            { path: "infoSection.description.nodes.mapData.mapSettings.lng" },
            {
              path: "infoSection.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "infoSection.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "infoSection.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.video.duration"
            },
            {
              path: "infoSection.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.audio.duration"
            },
            {
              path: "infoSection.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateInfoSection;
}
function deleteInfoSection(payload) {
  function __deleteInfoSection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "DELETE",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.DeleteInfoSection",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/info-sections/{infoSectionId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteInfoSection;
}
function queryInfoSections(payload) {
  function __queryInfoSections({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.QueryInfoSections",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/info-sections/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "infoSections.createdDate" },
            { path: "infoSections.updatedDate" },
            { path: "infoSections.description.metadata.createdTimestamp" },
            { path: "infoSections.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "infoSections.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "infoSections.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "infoSections.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "infoSections.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "infoSections.description.nodes.imageData.image.duration"
            },
            {
              path: "infoSections.description.nodes.mapData.mapSettings.lat"
            },
            {
              path: "infoSections.description.nodes.mapData.mapSettings.lng"
            },
            {
              path: "infoSections.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "infoSections.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "infoSections.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "infoSections.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "infoSections.description.nodes.videoData.video.duration"
            },
            {
              path: "infoSections.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "infoSections.description.nodes.audioData.audio.duration"
            },
            {
              path: "infoSections.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryInfoSections;
}
function bulkCreateInfoSections(payload) {
  function __bulkCreateInfoSections({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "infoSections.createdDate" },
          { path: "infoSections.updatedDate" },
          { path: "infoSections.description.metadata.createdTimestamp" },
          { path: "infoSections.description.metadata.updatedTimestamp" }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "infoSections.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "infoSections.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "infoSections.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "infoSections.description.nodes.galleryData.options.item.ratio"
          },
          { path: "infoSections.description.nodes.imageData.image.duration" },
          { path: "infoSections.description.nodes.mapData.mapSettings.lat" },
          { path: "infoSections.description.nodes.mapData.mapSettings.lng" },
          {
            path: "infoSections.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "infoSections.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "infoSections.description.nodes.pollData.design.poll.background.image.duration"
          },
          {
            path: "infoSections.description.nodes.appEmbedData.image.duration"
          },
          { path: "infoSections.description.nodes.videoData.video.duration" },
          {
            path: "infoSections.description.nodes.videoData.thumbnail.duration"
          },
          { path: "infoSections.description.nodes.audioData.audio.duration" },
          {
            path: "infoSections.description.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkCreateInfoSections",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/bulk/info-sections/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.description.metadata.createdTimestamp" },
            { path: "results.item.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.item.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "results.item.description.nodes.imageData.image.duration"
            },
            {
              path: "results.item.description.nodes.mapData.mapSettings.lat"
            },
            {
              path: "results.item.description.nodes.mapData.mapSettings.lng"
            },
            {
              path: "results.item.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "results.item.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "results.item.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "results.item.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "results.item.description.nodes.videoData.video.duration"
            },
            {
              path: "results.item.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "results.item.description.nodes.audioData.audio.duration"
            },
            {
              path: "results.item.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateInfoSections;
}
function bulkUpdateInfoSections(payload) {
  function __bulkUpdateInfoSections({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "infoSections.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "infoSections.infoSection.createdDate" },
          { path: "infoSections.infoSection.updatedDate" },
          {
            path: "infoSections.infoSection.description.metadata.createdTimestamp"
          },
          {
            path: "infoSections.infoSection.description.metadata.updatedTimestamp"
          }
        ]
      },
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          {
            path: "infoSections.infoSection.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.galleryData.options.item.ratio"
          },
          {
            path: "infoSections.infoSection.description.nodes.imageData.image.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.mapData.mapSettings.lat"
          },
          {
            path: "infoSections.infoSection.description.nodes.mapData.mapSettings.lng"
          },
          {
            path: "infoSections.infoSection.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.pollData.design.poll.background.image.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.appEmbedData.image.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.videoData.video.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.videoData.thumbnail.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.audioData.audio.duration"
          },
          {
            path: "infoSections.infoSection.description.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkUpdateInfoSections",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/bulk/info-sections/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" },
            { path: "results.item.description.metadata.createdTimestamp" },
            { path: "results.item.description.metadata.updatedTimestamp" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            {
              path: "results.item.description.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "results.item.description.nodes.galleryData.options.item.ratio"
            },
            {
              path: "results.item.description.nodes.imageData.image.duration"
            },
            {
              path: "results.item.description.nodes.mapData.mapSettings.lat"
            },
            {
              path: "results.item.description.nodes.mapData.mapSettings.lng"
            },
            {
              path: "results.item.description.nodes.pollData.poll.image.duration"
            },
            {
              path: "results.item.description.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "results.item.description.nodes.pollData.design.poll.background.image.duration"
            },
            {
              path: "results.item.description.nodes.appEmbedData.image.duration"
            },
            {
              path: "results.item.description.nodes.videoData.video.duration"
            },
            {
              path: "results.item.description.nodes.videoData.thumbnail.duration"
            },
            {
              path: "results.item.description.nodes.audioData.audio.duration"
            },
            {
              path: "results.item.description.nodes.audioData.coverImage.duration"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateInfoSections;
}
function bulkDeleteInfoSections(payload) {
  function __bulkDeleteInfoSections({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.info_section",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkDeleteInfoSections",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInfoSectionV3InfoSectionsServiceUrl({
        protoPath: "/v3/bulk/info-sections/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteInfoSections;
}

// src/stores-catalog-v3-info-section-info-sections-v-3.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var NodeType = /* @__PURE__ */ ((NodeType2) => {
  NodeType2["PARAGRAPH"] = "PARAGRAPH";
  NodeType2["TEXT"] = "TEXT";
  NodeType2["HEADING"] = "HEADING";
  NodeType2["BULLETED_LIST"] = "BULLETED_LIST";
  NodeType2["ORDERED_LIST"] = "ORDERED_LIST";
  NodeType2["LIST_ITEM"] = "LIST_ITEM";
  NodeType2["BLOCKQUOTE"] = "BLOCKQUOTE";
  NodeType2["CODE_BLOCK"] = "CODE_BLOCK";
  NodeType2["VIDEO"] = "VIDEO";
  NodeType2["DIVIDER"] = "DIVIDER";
  NodeType2["FILE"] = "FILE";
  NodeType2["GALLERY"] = "GALLERY";
  NodeType2["GIF"] = "GIF";
  NodeType2["HTML"] = "HTML";
  NodeType2["IMAGE"] = "IMAGE";
  NodeType2["LINK_PREVIEW"] = "LINK_PREVIEW";
  NodeType2["MAP"] = "MAP";
  NodeType2["POLL"] = "POLL";
  NodeType2["APP_EMBED"] = "APP_EMBED";
  NodeType2["BUTTON"] = "BUTTON";
  NodeType2["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
  NodeType2["TABLE"] = "TABLE";
  NodeType2["EMBED"] = "EMBED";
  NodeType2["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
  NodeType2["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
  NodeType2["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
  NodeType2["TABLE_CELL"] = "TABLE_CELL";
  NodeType2["TABLE_ROW"] = "TABLE_ROW";
  NodeType2["EXTERNAL"] = "EXTERNAL";
  NodeType2["AUDIO"] = "AUDIO";
  NodeType2["CAPTION"] = "CAPTION";
  NodeType2["LAYOUT"] = "LAYOUT";
  NodeType2["LAYOUT_CELL"] = "LAYOUT_CELL";
  return NodeType2;
})(NodeType || {});
var WidthType = /* @__PURE__ */ ((WidthType2) => {
  WidthType2["CONTENT"] = "CONTENT";
  WidthType2["SMALL"] = "SMALL";
  WidthType2["ORIGINAL"] = "ORIGINAL";
  WidthType2["FULL_WIDTH"] = "FULL_WIDTH";
  return WidthType2;
})(WidthType || {});
var PluginContainerDataAlignment = /* @__PURE__ */ ((PluginContainerDataAlignment2) => {
  PluginContainerDataAlignment2["CENTER"] = "CENTER";
  PluginContainerDataAlignment2["LEFT"] = "LEFT";
  PluginContainerDataAlignment2["RIGHT"] = "RIGHT";
  return PluginContainerDataAlignment2;
})(PluginContainerDataAlignment || {});
var Type = /* @__PURE__ */ ((Type2) => {
  Type2["LINK"] = "LINK";
  Type2["ACTION"] = "ACTION";
  return Type2;
})(Type || {});
var Target = /* @__PURE__ */ ((Target2) => {
  Target2["SELF"] = "SELF";
  Target2["BLANK"] = "BLANK";
  Target2["PARENT"] = "PARENT";
  Target2["TOP"] = "TOP";
  return Target2;
})(Target || {});
var TextAlignment = /* @__PURE__ */ ((TextAlignment2) => {
  TextAlignment2["AUTO"] = "AUTO";
  TextAlignment2["LEFT"] = "LEFT";
  TextAlignment2["RIGHT"] = "RIGHT";
  TextAlignment2["CENTER"] = "CENTER";
  TextAlignment2["JUSTIFY"] = "JUSTIFY";
  return TextAlignment2;
})(TextAlignment || {});
var LineStyle = /* @__PURE__ */ ((LineStyle2) => {
  LineStyle2["SINGLE"] = "SINGLE";
  LineStyle2["DOUBLE"] = "DOUBLE";
  LineStyle2["DASHED"] = "DASHED";
  LineStyle2["DOTTED"] = "DOTTED";
  return LineStyle2;
})(LineStyle || {});
var Width = /* @__PURE__ */ ((Width2) => {
  Width2["LARGE"] = "LARGE";
  Width2["MEDIUM"] = "MEDIUM";
  Width2["SMALL"] = "SMALL";
  return Width2;
})(Width || {});
var Alignment = /* @__PURE__ */ ((Alignment2) => {
  Alignment2["CENTER"] = "CENTER";
  Alignment2["LEFT"] = "LEFT";
  Alignment2["RIGHT"] = "RIGHT";
  return Alignment2;
})(Alignment || {});
var ViewMode = /* @__PURE__ */ ((ViewMode2) => {
  ViewMode2["NONE"] = "NONE";
  ViewMode2["FULL"] = "FULL";
  ViewMode2["MINI"] = "MINI";
  return ViewMode2;
})(ViewMode || {});
var LayoutType = /* @__PURE__ */ ((LayoutType2) => {
  LayoutType2["COLLAGE"] = "COLLAGE";
  LayoutType2["MASONRY"] = "MASONRY";
  LayoutType2["GRID"] = "GRID";
  LayoutType2["THUMBNAIL"] = "THUMBNAIL";
  LayoutType2["SLIDER"] = "SLIDER";
  LayoutType2["SLIDESHOW"] = "SLIDESHOW";
  LayoutType2["PANORAMA"] = "PANORAMA";
  LayoutType2["COLUMN"] = "COLUMN";
  LayoutType2["MAGIC"] = "MAGIC";
  LayoutType2["FULLSIZE"] = "FULLSIZE";
  return LayoutType2;
})(LayoutType || {});
var Orientation = /* @__PURE__ */ ((Orientation2) => {
  Orientation2["ROWS"] = "ROWS";
  Orientation2["COLUMNS"] = "COLUMNS";
  return Orientation2;
})(Orientation || {});
var Crop = /* @__PURE__ */ ((Crop2) => {
  Crop2["FILL"] = "FILL";
  Crop2["FIT"] = "FIT";
  return Crop2;
})(Crop || {});
var ThumbnailsAlignment = /* @__PURE__ */ ((ThumbnailsAlignment2) => {
  ThumbnailsAlignment2["TOP"] = "TOP";
  ThumbnailsAlignment2["RIGHT"] = "RIGHT";
  ThumbnailsAlignment2["BOTTOM"] = "BOTTOM";
  ThumbnailsAlignment2["LEFT"] = "LEFT";
  ThumbnailsAlignment2["NONE"] = "NONE";
  return ThumbnailsAlignment2;
})(ThumbnailsAlignment || {});
var GIFType = /* @__PURE__ */ ((GIFType2) => {
  GIFType2["NORMAL"] = "NORMAL";
  GIFType2["STICKER"] = "STICKER";
  return GIFType2;
})(GIFType || {});
var Source = /* @__PURE__ */ ((Source2) => {
  Source2["HTML"] = "HTML";
  Source2["ADSENSE"] = "ADSENSE";
  return Source2;
})(Source || {});
var Position = /* @__PURE__ */ ((Position2) => {
  Position2["START"] = "START";
  Position2["END"] = "END";
  Position2["TOP"] = "TOP";
  Position2["HIDDEN"] = "HIDDEN";
  return Position2;
})(Position || {});
var MapType = /* @__PURE__ */ ((MapType2) => {
  MapType2["ROADMAP"] = "ROADMAP";
  MapType2["SATELITE"] = "SATELITE";
  MapType2["HYBRID"] = "HYBRID";
  MapType2["TERRAIN"] = "TERRAIN";
  return MapType2;
})(MapType || {});
var ViewRole = /* @__PURE__ */ ((ViewRole2) => {
  ViewRole2["CREATOR"] = "CREATOR";
  ViewRole2["VOTERS"] = "VOTERS";
  ViewRole2["EVERYONE"] = "EVERYONE";
  return ViewRole2;
})(ViewRole || {});
var VoteRole = /* @__PURE__ */ ((VoteRole2) => {
  VoteRole2["SITE_MEMBERS"] = "SITE_MEMBERS";
  VoteRole2["ALL"] = "ALL";
  return VoteRole2;
})(VoteRole || {});
var PollLayoutType = /* @__PURE__ */ ((PollLayoutType2) => {
  PollLayoutType2["LIST"] = "LIST";
  PollLayoutType2["GRID"] = "GRID";
  return PollLayoutType2;
})(PollLayoutType || {});
var PollLayoutDirection = /* @__PURE__ */ ((PollLayoutDirection2) => {
  PollLayoutDirection2["LTR"] = "LTR";
  PollLayoutDirection2["RTL"] = "RTL";
  return PollLayoutDirection2;
})(PollLayoutDirection || {});
var BackgroundType = /* @__PURE__ */ ((BackgroundType2) => {
  BackgroundType2["COLOR"] = "COLOR";
  BackgroundType2["IMAGE"] = "IMAGE";
  BackgroundType2["GRADIENT"] = "GRADIENT";
  return BackgroundType2;
})(BackgroundType || {});
var DecorationType = /* @__PURE__ */ ((DecorationType2) => {
  DecorationType2["BOLD"] = "BOLD";
  DecorationType2["ITALIC"] = "ITALIC";
  DecorationType2["UNDERLINE"] = "UNDERLINE";
  DecorationType2["SPOILER"] = "SPOILER";
  DecorationType2["ANCHOR"] = "ANCHOR";
  DecorationType2["MENTION"] = "MENTION";
  DecorationType2["LINK"] = "LINK";
  DecorationType2["COLOR"] = "COLOR";
  DecorationType2["FONT_SIZE"] = "FONT_SIZE";
  DecorationType2["EXTERNAL"] = "EXTERNAL";
  DecorationType2["STRIKETHROUGH"] = "STRIKETHROUGH";
  DecorationType2["SUPERSCRIPT"] = "SUPERSCRIPT";
  DecorationType2["SUBSCRIPT"] = "SUBSCRIPT";
  return DecorationType2;
})(DecorationType || {});
var FontType = /* @__PURE__ */ ((FontType2) => {
  FontType2["PX"] = "PX";
  FontType2["EM"] = "EM";
  return FontType2;
})(FontType || {});
var AppType = /* @__PURE__ */ ((AppType2) => {
  AppType2["PRODUCT"] = "PRODUCT";
  AppType2["EVENT"] = "EVENT";
  AppType2["BOOKING"] = "BOOKING";
  return AppType2;
})(AppType || {});
var InitialExpandedItems = /* @__PURE__ */ ((InitialExpandedItems2) => {
  InitialExpandedItems2["FIRST"] = "FIRST";
  InitialExpandedItems2["ALL"] = "ALL";
  InitialExpandedItems2["NONE"] = "NONE";
  return InitialExpandedItems2;
})(InitialExpandedItems || {});
var Direction = /* @__PURE__ */ ((Direction2) => {
  Direction2["LTR"] = "LTR";
  Direction2["RTL"] = "RTL";
  return Direction2;
})(Direction || {});
var VerticalAlignment = /* @__PURE__ */ ((VerticalAlignment2) => {
  VerticalAlignment2["TOP"] = "TOP";
  VerticalAlignment2["MIDDLE"] = "MIDDLE";
  VerticalAlignment2["BOTTOM"] = "BOTTOM";
  return VerticalAlignment2;
})(VerticalAlignment || {});
var NullValue = /* @__PURE__ */ ((NullValue2) => {
  NullValue2["NULL_VALUE"] = "NULL_VALUE";
  return NullValue2;
})(NullValue || {});
var RequestedFields = /* @__PURE__ */ ((RequestedFields2) => {
  RequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  RequestedFields2["ASSIGNED_PRODUCTS_COUNT"] = "ASSIGNED_PRODUCTS_COUNT";
  return RequestedFields2;
})(RequestedFields || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createInfoSection2(infoSection) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSection },
    ["infoSection.description"]
  );
  const reqOpts = createInfoSection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "infoSection.description"
    ])?.infoSection;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { infoSection: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["infoSection"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getInfoSection2(infoSectionId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSectionId, fields: options?.fields },
    []
  );
  const reqOpts = getInfoSection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "infoSection.description"
    ])?.infoSection;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          infoSectionId: "$[0]",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["infoSectionId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrCreateInfoSection2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSection: options?.infoSection, fields: options?.fields },
    []
  );
  const reqOpts = getOrCreateInfoSection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "infoSection.description"
    ]);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          infoSection: "$[0].infoSection",
          fields: "$[0].fields"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkGetOrCreateInfoSections2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSections: options?.infoSections, fields: options?.fields },
    []
  );
  const reqOpts = bulkGetOrCreateInfoSections(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "results.item.description"
    ]);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          infoSections: "$[0].infoSections",
          fields: "$[0].fields"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateInfoSection2(_id, infoSection, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSection: { ...infoSection, id: _id }, fields: options?.fields },
    ["infoSection.description"]
  );
  const reqOpts = updateInfoSection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "infoSection.description"
    ])?.infoSection;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { infoSection: "$[1]" },
        explicitPathsToArguments: {
          "infoSection.id": "$[0]",
          fields: "$[2].fields"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "infoSection", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteInfoSection2(infoSectionId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSectionId },
    []
  );
  const reqOpts = deleteInfoSection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { infoSectionId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["infoSectionId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryInfoSections2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryInfoSections(
        { ...payload, ...options ?? {} }
      );
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return renameKeysFromSDKRequestToRESTRequest(
        { ...args?.[1], query: args?.[0] },
        []
      );
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, []),
        ["infoSections.description"]
      );
      return {
        items: transformedData?.infoSections,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function bulkCreateInfoSections2(infoSections, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSections, returnEntity: options?.returnEntity },
    ["infoSections.description"]
  );
  const reqOpts = bulkCreateInfoSections(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "results.item.description"
    ]);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          infoSections: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["infoSections", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateInfoSections2(infoSections, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    {
      infoSections,
      returnEntity: options?.returnEntity,
      fields: options?.fields
    },
    ["infoSections.infoSection.description"]
  );
  const reqOpts = bulkUpdateInfoSections(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, [
      "results.item.description"
    ]);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          infoSections: "$[0]",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["infoSections", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteInfoSections2(infoSectionIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { infoSectionIds },
    []
  );
  const reqOpts = bulkDeleteInfoSections(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, []);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { infoSectionIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["infoSectionIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v3-info-section-info-sections-v-3.public.ts
function createInfoSection3(httpClient) {
  return (infoSection) => createInfoSection2(
    infoSection,
    // @ts-ignore
    { httpClient }
  );
}
function getInfoSection3(httpClient) {
  return (infoSectionId, options) => getInfoSection2(
    infoSectionId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getOrCreateInfoSection3(httpClient) {
  return (options) => getOrCreateInfoSection2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkGetOrCreateInfoSections3(httpClient) {
  return (options) => bulkGetOrCreateInfoSections2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateInfoSection3(httpClient) {
  return (_id, infoSection, options) => updateInfoSection2(
    _id,
    infoSection,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteInfoSection3(httpClient) {
  return (infoSectionId) => deleteInfoSection2(
    infoSectionId,
    // @ts-ignore
    { httpClient }
  );
}
function queryInfoSections3(httpClient) {
  return (options) => queryInfoSections2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreateInfoSections3(httpClient) {
  return (infoSections, options) => bulkCreateInfoSections2(
    infoSections,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateInfoSections3(httpClient) {
  return (infoSections, options) => bulkUpdateInfoSections2(
    infoSections,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteInfoSections3(httpClient) {
  return (infoSectionIds) => bulkDeleteInfoSections2(
    infoSectionIds,
    // @ts-ignore
    { httpClient }
  );
}
var onInfoSectionCreated = EventDefinition(
  "wix.stores.catalog.v3.info_section_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.description.metadata.createdTimestamp" },
          { path: "entity.description.metadata.updatedTimestamp" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          {
            path: "entity.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "entity.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "entity.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          { path: "entity.description.nodes.galleryData.options.item.ratio" },
          { path: "entity.description.nodes.imageData.image.duration" },
          { path: "entity.description.nodes.mapData.mapSettings.lat" },
          { path: "entity.description.nodes.mapData.mapSettings.lng" },
          { path: "entity.description.nodes.pollData.poll.image.duration" },
          {
            path: "entity.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "entity.description.nodes.pollData.design.poll.background.image.duration"
          },
          { path: "entity.description.nodes.appEmbedData.image.duration" },
          { path: "entity.description.nodes.videoData.video.duration" },
          { path: "entity.description.nodes.videoData.thumbnail.duration" },
          { path: "entity.description.nodes.audioData.audio.duration" },
          { path: "entity.description.nodes.audioData.coverImage.duration" }
        ]
      }
    ])
  )
)();
var onInfoSectionDeleted = EventDefinition(
  "wix.stores.catalog.v3.info_section_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "undefined.description.metadata.createdTimestamp" },
          { path: "undefined.description.metadata.updatedTimestamp" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          {
            path: "undefined.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "undefined.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "undefined.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          {
            path: "undefined.description.nodes.galleryData.options.item.ratio"
          },
          { path: "undefined.description.nodes.imageData.image.duration" },
          { path: "undefined.description.nodes.mapData.mapSettings.lat" },
          { path: "undefined.description.nodes.mapData.mapSettings.lng" },
          {
            path: "undefined.description.nodes.pollData.poll.image.duration"
          },
          {
            path: "undefined.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "undefined.description.nodes.pollData.design.poll.background.image.duration"
          },
          { path: "undefined.description.nodes.appEmbedData.image.duration" },
          { path: "undefined.description.nodes.videoData.video.duration" },
          {
            path: "undefined.description.nodes.videoData.thumbnail.duration"
          },
          { path: "undefined.description.nodes.audioData.audio.duration" },
          {
            path: "undefined.description.nodes.audioData.coverImage.duration"
          }
        ]
      }
    ])
  )
)();
var onInfoSectionUpdated = EventDefinition(
  "wix.stores.catalog.v3.info_section_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.description.metadata.createdTimestamp" },
          { path: "entity.description.metadata.updatedTimestamp" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: transformRESTFloatToSDKFloat2,
        paths: [
          {
            path: "entity.description.nodes.galleryData.items.image.media.duration"
          },
          {
            path: "entity.description.nodes.galleryData.items.video.media.duration"
          },
          {
            path: "entity.description.nodes.galleryData.items.video.thumbnail.duration"
          },
          { path: "entity.description.nodes.galleryData.options.item.ratio" },
          { path: "entity.description.nodes.imageData.image.duration" },
          { path: "entity.description.nodes.mapData.mapSettings.lat" },
          { path: "entity.description.nodes.mapData.mapSettings.lng" },
          { path: "entity.description.nodes.pollData.poll.image.duration" },
          {
            path: "entity.description.nodes.pollData.poll.options.image.duration"
          },
          {
            path: "entity.description.nodes.pollData.design.poll.background.image.duration"
          },
          { path: "entity.description.nodes.appEmbedData.image.duration" },
          { path: "entity.description.nodes.videoData.video.duration" },
          { path: "entity.description.nodes.videoData.thumbnail.duration" },
          { path: "entity.description.nodes.audioData.audio.duration" },
          { path: "entity.description.nodes.audioData.coverImage.duration" }
        ]
      }
    ])
  )
)();

// src/stores-catalog-v3-info-section-info-sections-v-3.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createInfoSection4 = /* @__PURE__ */ createRESTModule(createInfoSection3);
var getInfoSection4 = /* @__PURE__ */ createRESTModule(getInfoSection3);
var getOrCreateInfoSection4 = /* @__PURE__ */ createRESTModule(getOrCreateInfoSection3);
var bulkGetOrCreateInfoSections4 = /* @__PURE__ */ createRESTModule(bulkGetOrCreateInfoSections3);
var updateInfoSection4 = /* @__PURE__ */ createRESTModule(updateInfoSection3);
var deleteInfoSection4 = /* @__PURE__ */ createRESTModule(deleteInfoSection3);
var queryInfoSections4 = /* @__PURE__ */ createRESTModule(queryInfoSections3);
var bulkCreateInfoSections4 = /* @__PURE__ */ createRESTModule(bulkCreateInfoSections3);
var bulkUpdateInfoSections4 = /* @__PURE__ */ createRESTModule(bulkUpdateInfoSections3);
var bulkDeleteInfoSections4 = /* @__PURE__ */ createRESTModule(bulkDeleteInfoSections3);
var onInfoSectionCreated2 = createEventModule(onInfoSectionCreated);
var onInfoSectionDeleted2 = createEventModule(onInfoSectionDeleted);
var onInfoSectionUpdated2 = createEventModule(onInfoSectionUpdated);
export {
  Alignment,
  AppType,
  BackgroundType,
  Crop,
  DecorationType,
  Direction,
  FontType,
  GIFType,
  InitialExpandedItems,
  LayoutType,
  LineStyle,
  MapType,
  NodeType,
  NullValue,
  Orientation,
  PluginContainerDataAlignment,
  PollLayoutDirection,
  PollLayoutType,
  Position,
  RequestedFields,
  SortOrder,
  Source,
  Target,
  TextAlignment,
  ThumbnailsAlignment,
  Type,
  VerticalAlignment,
  ViewMode,
  ViewRole,
  VoteRole,
  WebhookIdentityType,
  Width,
  WidthType,
  bulkCreateInfoSections4 as bulkCreateInfoSections,
  bulkDeleteInfoSections4 as bulkDeleteInfoSections,
  bulkGetOrCreateInfoSections4 as bulkGetOrCreateInfoSections,
  bulkUpdateInfoSections4 as bulkUpdateInfoSections,
  createInfoSection4 as createInfoSection,
  deleteInfoSection4 as deleteInfoSection,
  getInfoSection4 as getInfoSection,
  getOrCreateInfoSection4 as getOrCreateInfoSection,
  onInfoSectionCreated2 as onInfoSectionCreated,
  onInfoSectionDeleted2 as onInfoSectionDeleted,
  onInfoSectionUpdated2 as onInfoSectionUpdated,
  queryInfoSections4 as queryInfoSections,
  updateInfoSection4 as updateInfoSection
};
//# sourceMappingURL=index.mjs.map