import { HttpClient, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { I as InfoSection, G as GetInfoSectionOptions, a as GetOrCreateInfoSectionOptions, b as GetOrCreateInfoSectionResponse, B as BulkGetOrCreateInfoSectionsOptions, c as BulkGetOrCreateInfoSectionsResponse, U as UpdateInfoSection, d as UpdateInfoSectionOptions, Q as QueryInfoSectionsOptions, e as InfoSectionsQueryBuilder, f as BulkCreateInfoSectionsOptions, g as BulkCreateInfoSectionsResponse, M as MaskedInfoSection, h as BulkUpdateInfoSectionsOptions, i as BulkUpdateInfoSectionsResponse, j as BulkDeleteInfoSectionsResponse, k as InfoSectionCreatedEnvelope, l as InfoSectionDeletedEnvelope, m as InfoSectionUpdatedEnvelope } from './stores-catalog-v3-info-section-info-sections-v-3.universal-CBEcAM6C.mjs';
export { c3 as ActionEvent, A as Alignment, aZ as AnchorData, bt as App, b3 as AppEmbedData, b4 as AppEmbedDataAppDataOneOf, E as AppType, bH as ApplicationError, bi as AudioData, aP as Background, aQ as BackgroundBackgroundOneOf, z as BackgroundType, c8 as BaseEventMetadata, bl as BlockquoteData, b5 as BookingData, a3 as Border, bg as BorderColors, bI as BulkActionMetadata, bV as BulkCreateInfoSectionsRequest, bX as BulkDeleteInfoSectionsRequest, bE as BulkGetOrCreateInfoSectionsRequest, bF as BulkInfoSectionItemResult, bY as BulkInfoSectionResult, bW as BulkUpdateInfoSectionsRequest, bk as BulletedListData, a2 as ButtonData, bm as CaptionData, bf as CellStyle, ae as CodeBlockData, bb as CollapsibleListData, a_ as ColorData, a4 as Colors, by as CreateInfoSectionRequest, bz as CreateInfoSectionResponse, C as Crop, bR as CursorPaging, bT as CursorPagingMetadata, bO as CursorQuery, bP as CursorQueryPagingMethodOneOf, bU as Cursors, bx as CustomTag, aX as Decoration, aY as DecorationDataOneOf, D as DecorationType, bL as DeleteInfoSectionRequest, bM as DeleteInfoSectionResponse, aV as Design, bd as Dimensions, J as Direction, ag as DividerData, bp as DocumentStyle, bZ as DomainEvent, b_ as DomainEventBodyOneOf, b9 as EmbedData, c4 as Empty, b$ as EntityCreatedEvent, c2 as EntityDeletedEvent, c1 as EntityUpdatedEvent, b6 as EventData, c9 as EventMetadata, bw as File, ah as FileData, ai as FileSource, aj as FileSourceDataOneOf, b1 as FontSizeData, F as FontType, aw as GIF, av as GIFData, s as GIFType, al as GalleryData, ar as GalleryOptions, bA as GetInfoSectionRequest, bB as GetInfoSectionResponse, bC as GetOrCreateInfoSectionRequest, aO as Gradient, ay as HTMLData, az as HTMLDataDataOneOf, ax as HeadingData, a9 as Height, c6 as IdentificationData, c7 as IdentificationDataIdOneOf, an as Image, aA as ImageData, aC as ImageDataStyles, bD as InfoSectionForGetOrCreate, ca as InfoSectionsQueryResult, H as InitialExpandedItems, br as InvalidateCache, bs as InvalidateCacheGetByOneOf, ap as Item, aq as ItemDataOneOf, bG as ItemMetadata, at as ItemStyle, as as Layout, bn as LayoutCellData, q as LayoutType, L as LineStyle, ab as Link, a$ as LinkData, ac as LinkDataOneOf, aD as LinkPreviewData, aE as LinkPreviewDataStyles, bh as ListValue, aF as MapData, aG as MapSettings, u as MapType, am as Media, b0 as MentionData, c5 as MessageEnvelope, bo as Metadata, $ as Node, a0 as NodeDataOneOf, a1 as NodeStyle, N as NodeType, R as NullValue, ba as Oembed, aK as Option, aS as OptionDesign, aN as OptionLayout, bj as OrderedListData, O as Orientation, ak as PDFSettings, bu as Page, aH as ParagraphData, aJ as Permissions, b8 as PlaybackOptions, a5 as PluginContainerData, P as PluginContainerDataAlignment, a6 as PluginContainerDataWidth, a7 as PluginContainerDataWidthDataOneOf, aT as Poll, aI as PollData, aU as PollDataLayout, aR as PollDesign, aM as PollLayout, y as PollLayoutDirection, x as PollLayoutType, t as Position, bN as QueryInfoSectionsRequest, bS as QueryInfoSectionsResponse, ad as Rel, X as RequestedFields, c0 as RestoreInfo, _ as RichContent, aL as Settings, Y as SortOrder, bQ as Sorting, S as Source, a8 as Spoiler, b2 as SpoilerData, aa as Styles, aB as StylesBorder, be as TableCellData, bc as TableData, n as Target, o as TextAlignment, aW as TextData, bq as TextNodeStyle, af as TextStyle, au as Thumbnails, r as ThumbnailsAlignment, T as Type, bv as URI, bJ as UpdateInfoSectionRequest, bK as UpdateInfoSectionResponse, K as VerticalAlignment, ao as Video, b7 as VideoData, V as ViewMode, v as ViewRole, w as VoteRole, Z as WebhookIdentityType, p as Width, W as WidthType } from './stores-catalog-v3-info-section-info-sections-v-3.universal-CBEcAM6C.mjs';

declare function createInfoSection$1(httpClient: HttpClient): CreateInfoSectionSignature;
interface CreateInfoSectionSignature {
    /**
     * Creates an info section.
     *
     * To assign the info section to a product, include the `infoSection.id` or `infoSection.uniqueName`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Info section to create.
     * @returns Created info section.
     */
    (infoSection: InfoSection): Promise<InfoSection>;
}
declare function getInfoSection$1(httpClient: HttpClient): GetInfoSectionSignature;
interface GetInfoSectionSignature {
    /**
     * Retrieves an info section.
     * @param - Info section ID.
     * @returns Info section.
     */
    (infoSectionId: string, options?: GetInfoSectionOptions | undefined): Promise<InfoSection>;
}
declare function getOrCreateInfoSection$1(httpClient: HttpClient): GetOrCreateInfoSectionSignature;
interface GetOrCreateInfoSectionSignature {
    /**
     * Retrieves an info section by ID or `uniqueName`, or creates an info section if one with the passed `uniqueName` doesn't exist.
     *
     * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
     */
    (options?: GetOrCreateInfoSectionOptions | undefined): Promise<GetOrCreateInfoSectionResponse>;
}
declare function bulkGetOrCreateInfoSections$1(httpClient: HttpClient): BulkGetOrCreateInfoSectionsSignature;
interface BulkGetOrCreateInfoSectionsSignature {
    /**
     * Retrieves multiple info sections by ID or `uniqueName`, or creates multiple info sections if those with the passed `uniqueName` don't exist.
     *
     * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
     */
    (options?: BulkGetOrCreateInfoSectionsOptions | undefined): Promise<BulkGetOrCreateInfoSectionsResponse>;
}
declare function updateInfoSection$1(httpClient: HttpClient): UpdateInfoSectionSignature;
interface UpdateInfoSectionSignature {
    /**
     * Updates an info section.
     *
     *
     * Each time the info section is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the info section.
     * This ensures you're working with the latest info section and prevents unintended overwrites.
     * @param - Info section ID.
     * @returns Updated info section.
     */
    (_id: string, infoSection: UpdateInfoSection, options?: UpdateInfoSectionOptions | undefined): Promise<InfoSection>;
}
declare function deleteInfoSection$1(httpClient: HttpClient): DeleteInfoSectionSignature;
interface DeleteInfoSectionSignature {
    /**
     * Deletes an info section.
     *
     * > **Note:** Deleting an info section will also remove it from all products it is assigned to.
     * @param - Info section ID
     */
    (infoSectionId: string): Promise<void>;
}
declare function queryInfoSections$1(httpClient: HttpClient): QueryInfoSectionsSignature;
interface QueryInfoSectionsSignature {
    /**
     * Retrieves a list of up to 100 info sections, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Info Sections runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Info Sections: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/info-sections-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryInfoSectionsOptions | undefined): InfoSectionsQueryBuilder;
}
declare function bulkCreateInfoSections$1(httpClient: HttpClient): BulkCreateInfoSectionsSignature;
interface BulkCreateInfoSectionsSignature {
    /**
     * Creates multiple info sections.
     * @param - Info sections to create.
     */
    (infoSections: InfoSection[], options?: BulkCreateInfoSectionsOptions | undefined): Promise<BulkCreateInfoSectionsResponse>;
}
declare function bulkUpdateInfoSections$1(httpClient: HttpClient): BulkUpdateInfoSectionsSignature;
interface BulkUpdateInfoSectionsSignature {
    /**
     * Updates multiple info sections.
     *
     * Each time an info section is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an info section.
     * This ensures you're working with the latest info section and prevents unintended overwrites.
     * @param - List of info sections to update.
     */
    (infoSections: MaskedInfoSection[], options?: BulkUpdateInfoSectionsOptions | undefined): Promise<BulkUpdateInfoSectionsResponse>;
}
declare function bulkDeleteInfoSections$1(httpClient: HttpClient): BulkDeleteInfoSectionsSignature;
interface BulkDeleteInfoSectionsSignature {
    /**
     * Deletes multiple info sections.
     * @param - IDs of info sections to delete.
     */
    (infoSectionIds: string[]): Promise<BulkDeleteInfoSectionsResponse>;
}
declare const onInfoSectionCreated$1: EventDefinition<InfoSectionCreatedEnvelope, "wix.stores.catalog.v3.info_section_created">;
declare const onInfoSectionDeleted$1: EventDefinition<InfoSectionDeletedEnvelope, "wix.stores.catalog.v3.info_section_deleted">;
declare const onInfoSectionUpdated$1: EventDefinition<InfoSectionUpdatedEnvelope, "wix.stores.catalog.v3.info_section_updated">;

declare const createInfoSection: MaybeContext<BuildRESTFunction<typeof createInfoSection$1> & typeof createInfoSection$1>;
declare const getInfoSection: MaybeContext<BuildRESTFunction<typeof getInfoSection$1> & typeof getInfoSection$1>;
declare const getOrCreateInfoSection: MaybeContext<BuildRESTFunction<typeof getOrCreateInfoSection$1> & typeof getOrCreateInfoSection$1>;
declare const bulkGetOrCreateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkGetOrCreateInfoSections$1> & typeof bulkGetOrCreateInfoSections$1>;
declare const updateInfoSection: MaybeContext<BuildRESTFunction<typeof updateInfoSection$1> & typeof updateInfoSection$1>;
declare const deleteInfoSection: MaybeContext<BuildRESTFunction<typeof deleteInfoSection$1> & typeof deleteInfoSection$1>;
declare const queryInfoSections: MaybeContext<BuildRESTFunction<typeof queryInfoSections$1> & typeof queryInfoSections$1>;
declare const bulkCreateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkCreateInfoSections$1> & typeof bulkCreateInfoSections$1>;
declare const bulkUpdateInfoSections: MaybeContext<BuildRESTFunction<typeof bulkUpdateInfoSections$1> & typeof bulkUpdateInfoSections$1>;
declare const bulkDeleteInfoSections: MaybeContext<BuildRESTFunction<typeof bulkDeleteInfoSections$1> & typeof bulkDeleteInfoSections$1>;
/**
 * Triggered when an info section is created.
 */
declare const onInfoSectionCreated: BuildEventDefinition<typeof onInfoSectionCreated$1>;
/**
 * Triggered when an info section is deleted.
 */
declare const onInfoSectionDeleted: BuildEventDefinition<typeof onInfoSectionDeleted$1>;
/**
 * Triggered when an info section is updated.
 */
declare const onInfoSectionUpdated: BuildEventDefinition<typeof onInfoSectionUpdated$1>;

export { BulkCreateInfoSectionsOptions, BulkCreateInfoSectionsResponse, BulkDeleteInfoSectionsResponse, BulkGetOrCreateInfoSectionsOptions, BulkGetOrCreateInfoSectionsResponse, BulkUpdateInfoSectionsOptions, BulkUpdateInfoSectionsResponse, GetInfoSectionOptions, GetOrCreateInfoSectionOptions, GetOrCreateInfoSectionResponse, InfoSection, InfoSectionCreatedEnvelope, InfoSectionDeletedEnvelope, InfoSectionUpdatedEnvelope, InfoSectionsQueryBuilder, MaskedInfoSection, QueryInfoSectionsOptions, UpdateInfoSection, UpdateInfoSectionOptions, bulkCreateInfoSections, bulkDeleteInfoSections, bulkGetOrCreateInfoSections, bulkUpdateInfoSections, createInfoSection, deleteInfoSection, getInfoSection, getOrCreateInfoSection, onInfoSectionCreated, onInfoSectionDeleted, onInfoSectionUpdated, queryInfoSections, updateInfoSection };
