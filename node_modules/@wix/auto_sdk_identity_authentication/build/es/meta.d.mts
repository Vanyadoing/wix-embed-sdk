import { o as RegisterV2Request$1, S as StateMachineResponse$1, a9 as LoginV2Request$1, aa as ChangePasswordRequest$1, ab as ChangePasswordResponse$1, ah as LoginCallbackRequest$1, c as RawHttpResponse$1, aj as SignOnRequest$1, e as SignOnResponse$1, ak as LogoutRequest$1, al as VerifyRequest$1 } from './iam-authentication-v1-authentication-authentication.universal-D-41C26U.mjs';

interface RegisterV2Request {
    /** Identifier of the registering member. */
    loginId: LoginId;
    /** Password of the registering member. */
    password?: string;
    /** Profile information of registering member. */
    profile?: IdentityProfile;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data that's relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
interface LoginId extends LoginIdTypeOneOf {
    /**
     * Login email address.
     * @format EMAIL
     */
    email?: string;
}
/** @oneof */
interface LoginIdTypeOneOf {
    /**
     * Login email address.
     * @format EMAIL
     */
    email?: string;
}
interface IdentityProfile {
    /** Profile first name. */
    firstName?: string | null;
    /** Profile last name. */
    lastName?: string | null;
    /** Profile nickname. */
    nickname?: string | null;
    /** Profile picture URL. */
    picture?: string | null;
    /**
     * Deprecated. Use `secondaryEmails` instead.
     * @deprecated Deprecated. Use `secondaryEmails` instead.
     * @replacedBy secondary_emails
     * @targetRemovalDate 2023-11-01
     */
    emails?: string[];
    /**
     * Deprecated. Use `phonesV2` instead.
     * @deprecated Deprecated. Use `phonesV2` instead.
     * @replacedBy phones_v2
     * @targetRemovalDate 2023-11-01
     */
    phones?: string[];
    /**
     * List of profile labels.
     * @maxSize 2000
     */
    labels?: string[];
    /**
     * Profile language.
     * @format LANGUAGE
     */
    language?: string | null;
    /** Profile privacy status. */
    privacyStatus?: PrivacyStatusWithLiterals;
    /**
     * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
     * are used to store additional information about your site or app's contacts.
     */
    customFields?: CustomField[];
    /** List of profile email addresses. */
    secondaryEmails?: SecondaryEmail[];
    /** List of profile phone numbers. */
    phonesV2?: Phone[];
    /** List of profile physical addresses. */
    addresses?: AddressWrapper[];
    /**
     * Company name.
     * @maxLength 1000
     */
    company?: string | null;
    /**
     * Position within company.
     * @maxLength 1000
     */
    position?: string | null;
    /**
     * Profile birthdate in `YYYY-MM-DD` format.
     * @format LOCAL_DATE
     */
    birthdate?: string | null;
    /**
     * Profile slug.
     * @maxLength 255
     */
    slug?: string | null;
    /** Consent to be added to mailing list */
    subscription?: boolean | null;
    /**
     * Government id for personal/corporate (Vat ID).
     * @maxLength 1000
     */
    vatId?: string | null;
}
declare enum PrivacyStatus {
    /** No defined privacy status. */
    UNDEFINED = "UNDEFINED",
    /** Profile details, such as profile name and profile picture, are visible to other members. */
    PUBLIC = "PUBLIC",
    /** Profile details aren't visible to other members. */
    PRIVATE = "PRIVATE"
}
/** @enumType */
type PrivacyStatusWithLiterals = PrivacyStatus | 'UNDEFINED' | 'PUBLIC' | 'PRIVATE';
interface CustomField {
    /**
     * Custom field name. The name must match one of the key properties of the objects returned by
     * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)
     * with the `custom.` prefix removed.
     */
    name?: string;
    /** Custom field value. */
    value?: V1CustomValue;
}
interface V1CustomValue extends V1CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** Array of values. */
    listValue?: V1ListValue;
    /** Map of values. */
    mapValue?: V1MapValue;
}
/** @oneof */
interface V1CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** Array of values. */
    listValue?: V1ListValue;
    /** Map of values. */
    mapValue?: V1MapValue;
}
interface V1ListValue {
    /** Custom value. */
    value?: V1CustomValue[];
}
interface V1MapValue {
    /** Mapped custom value. */
    value?: Record<string, V1CustomValue>;
}
interface SecondaryEmail {
    /**
     * Email address.
     * @format EMAIL
     */
    email?: string;
    /** Email tag. */
    tag?: EmailTagWithLiterals;
}
declare enum EmailTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    WORK = "WORK"
}
/** @enumType */
type EmailTagWithLiterals = EmailTag | 'UNTAGGED' | 'MAIN' | 'HOME' | 'WORK';
interface Phone {
    /**
     * Phone country code.
     * @format COUNTRY
     */
    countryCode?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string;
    /** Phone tag. */
    tag?: PhoneTagWithLiterals;
}
declare enum PhoneTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    MOBILE = "MOBILE",
    WORK = "WORK",
    FAX = "FAX"
}
/** @enumType */
type PhoneTagWithLiterals = PhoneTag | 'UNTAGGED' | 'MAIN' | 'HOME' | 'MOBILE' | 'WORK' | 'FAX';
interface AddressWrapper {
    /** Address. */
    address?: Address;
    /** Address tag. */
    tag?: AddressTagWithLiterals;
}
/** Physical address */
interface Address {
    /**
     * Country code.
     * @format COUNTRY
     */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apartment, suite, and floor. */
    addressLine2?: string | null;
    /**
     * Street name.
     * @maxLength 1000
     */
    streetName?: string | null;
    /**
     * Street number.
     * @maxLength 1000
     */
    streetNumber?: string | null;
}
declare enum AddressTag {
    UNTAGGED = "UNTAGGED",
    HOME = "HOME",
    WORK = "WORK",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** @enumType */
type AddressTagWithLiterals = AddressTag | 'UNTAGGED' | 'HOME' | 'WORK' | 'BILLING' | 'SHIPPING';
interface CaptchaToken extends CaptchaTokenTokenOneOf {
    /** @maxLength 5000 */
    Recaptcha?: string;
    /** @maxLength 5000 */
    InvisibleRecaptcha?: string;
    /** @maxLength 5000 */
    NoCaptcha?: string;
}
/** @oneof */
interface CaptchaTokenTokenOneOf {
    /** @maxLength 5000 */
    Recaptcha?: string;
    /** @maxLength 5000 */
    InvisibleRecaptcha?: string;
    /** @maxLength 5000 */
    NoCaptcha?: string;
}
interface StateMachineResponse extends StateMachineResponseStateDataOneOf {
    /** Current state of the login or registration process. */
    state?: StateTypeWithLiterals;
    /** Session token. If `state` is not `SUCCESS`, this field is undefined. */
    sessionToken?: string | null;
    /** Token that represents the current state of the login or registration process. */
    stateToken?: string | null;
    /** Identity of the current member. */
    identity?: Identity;
    /** Additional data relevant to the login or registration process. */
    additionalData?: Record<string, CustomValue>;
}
/** @oneof */
interface StateMachineResponseStateDataOneOf {
}
declare enum StateType {
    /** Initial unknown state. */
    UNKNOWN_STATE = "UNKNOWN_STATE",
    /** Login completed successfully. */
    SUCCESS = "SUCCESS",
    /** Indicates that the member needs the owner to approve their registration. */
    REQUIRE_OWNER_APPROVAL = "REQUIRE_OWNER_APPROVAL",
    /** Indicates that the member needs to verify their email. */
    REQUIRE_EMAIL_VERIFICATION = "REQUIRE_EMAIL_VERIFICATION",
    /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */
    STATUS_CHECK = "STATUS_CHECK"
}
/** @enumType */
type StateTypeWithLiterals = StateType | 'UNKNOWN_STATE' | 'SUCCESS' | 'REQUIRE_OWNER_APPROVAL' | 'REQUIRE_EMAIL_VERIFICATION' | 'STATUS_CHECK';
interface Identity {
    /**
     * Identity ID.
     * @format GUID
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the identity is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the identity.
     *
     * Ignored when creating an identity.
     */
    revision?: string | null;
    /**
     * Date and time the identity was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the identity was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** The identity configured connections to authenticate with. */
    connections?: Connection[];
    /** Identity profile. */
    identityProfile?: IdentityProfile;
    /**
     * Additional information about the identity that can impact user access.
     * This data cannot be set.
     */
    metadata?: Metadata;
    /** Identity email address. */
    email?: Email;
    /** Identity's current status. */
    status?: StatusV2;
    /** Custom attributes. */
    customAttributes?: Record<string, any> | null;
    /**
     * Identity verification factors.
     * @maxSize 10
     * @readonly
     */
    factors?: Factor[];
}
interface Connection extends ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
/** @oneof */
interface ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
interface IdpConnection {
    /**
     * IDP connection ID.
     * @format GUID
     */
    idpConnectionId?: string;
    /** IDP user ID. */
    idpUserId?: string;
}
interface AuthenticatorConnection {
    /**
     * Authenticator connection ID.
     * @format GUID
     */
    authenticatorConnectionId?: string;
    /** Whether re-enrollment is required. */
    reEnrollmentRequired?: boolean;
}
interface Metadata {
    /**
     * General tags. For example, `"isOwner"`.
     * @readonly
     */
    tags?: string[];
}
interface Email {
    /**
     * Email address.
     * @format EMAIL
     */
    address?: string;
    /** Whether the email address is verified. */
    isVerified?: boolean;
}
interface StatusV2 {
    name?: StatusNameWithLiterals;
    reasons?: ReasonWithLiterals[];
}
declare enum StatusName {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    PENDING = "PENDING",
    ACTIVE = "ACTIVE",
    DELETED = "DELETED",
    BLOCKED = "BLOCKED",
    OFFLINE = "OFFLINE"
}
/** @enumType */
type StatusNameWithLiterals = StatusName | 'UNKNOWN_STATUS' | 'PENDING' | 'ACTIVE' | 'DELETED' | 'BLOCKED' | 'OFFLINE';
declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    PENDING_ADMIN_APPROVAL_REQUIRED = "PENDING_ADMIN_APPROVAL_REQUIRED",
    PENDING_EMAIL_VERIFICATION_REQUIRED = "PENDING_EMAIL_VERIFICATION_REQUIRED"
}
/** @enumType */
type ReasonWithLiterals = Reason | 'UNKNOWN_REASON' | 'PENDING_ADMIN_APPROVAL_REQUIRED' | 'PENDING_EMAIL_VERIFICATION_REQUIRED';
interface Factor {
    /**
     * Factor ID.
     * @format GUID
     */
    factorId?: string;
    /** Factor type. */
    type?: FactorTypeWithLiterals;
    /** Factor status. */
    status?: StatusWithLiterals;
}
declare enum FactorType {
    /** Unknown factor type. */
    UNKNOWN_FACTOR_TYPE = "UNKNOWN_FACTOR_TYPE",
    /** Requires a password. */
    PASSWORD = "PASSWORD",
    /** Requires a code sent via SMS. */
    SMS = "SMS",
    /** Requires a code sent by phone call. */
    CALL = "CALL",
    /** Requires a code sent by email. */
    EMAIL = "EMAIL",
    /** Requires authentication via an authenticator app. */
    TOTP = "TOTP",
    /** Requires authentication via a push notification. */
    PUSH = "PUSH",
    /** Requires authentication via WebAuthn/passkey. */
    WEBAUTHN = "WEBAUTHN"
}
/** @enumType */
type FactorTypeWithLiterals = FactorType | 'UNKNOWN_FACTOR_TYPE' | 'PASSWORD' | 'SMS' | 'CALL' | 'EMAIL' | 'TOTP' | 'PUSH' | 'WEBAUTHN';
declare enum Status {
    /** Factor requires activation. */
    INACTIVE = "INACTIVE",
    /** Factor is active and can be used for authentication. */
    ACTIVE = "ACTIVE",
    /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */
    REQUIRE_REENROLL = "REQUIRE_REENROLL"
}
/** @enumType */
type StatusWithLiterals = Status | 'INACTIVE' | 'ACTIVE' | 'REQUIRE_REENROLL';
interface CustomValue extends CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
/** @oneof */
interface CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
interface ListValue {
    /** Custom value. */
    value?: CustomValue[];
}
interface MapValue {
    /** Mapped custom value. */
    value?: Record<string, CustomValue>;
}
interface LoginV2Request {
    /** Identifier of identity logging in. */
    loginId: LoginId;
    /** Password of the identity logging in. */
    password?: string;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data that's relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
interface ChangePasswordRequest {
    /** The new password to set for the logged in user */
    newPassword: string;
}
interface ChangePasswordResponse {
}
interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
interface HeadersEntry {
    key?: string;
    value?: string;
}
interface LoginCallbackRequest {
    /** state that that received on the redirect */
    state?: string;
    /** session token */
    sessionToken?: string;
}
interface SignOnRequest {
    /** the identifier of the identity */
    loginId: LoginId;
    /** profile of the identity */
    profile?: IdentityProfile;
    /** when true will mark the email of the identity as verified */
    verifyEmail?: boolean;
    /** when false will create a new contact instead of merging the existing contact into the identity */
    mergeExistingContact?: boolean;
}
interface SignOnResponse {
    /** session token for the requested identity */
    sessionToken?: string;
    /** The Identity of the provided login_id */
    identity?: Identity;
}
/** logout request payload */
interface LogoutRequest {
    /**
     * redirect after logout
     * @format WEB_URL
     */
    postLogoutRedirectUri?: string | null;
    /**
     * caller identifier
     * @format GUID
     */
    clientId?: string | null;
}
interface VerifyRequest extends VerifyRequestFactorDataOneOf {
    smsData?: SmsVerifyData;
    callData?: CallVerifyData;
    emailData?: ExternalEmailVerifyData;
    totpData?: TotpVerifyData;
    pushData?: PushVerifyData;
    webauthnData?: WebAuthnVerifyData;
    /**
     * TODO: is this a reasonable maxLength?
     * @maxLength 1000
     */
    stateToken?: string;
    factorType: FactorTypeWithLiterals;
    rememberThisDevice?: boolean;
}
/** @oneof */
interface VerifyRequestFactorDataOneOf {
    smsData?: SmsVerifyData;
    callData?: CallVerifyData;
    emailData?: ExternalEmailVerifyData;
    totpData?: TotpVerifyData;
    pushData?: PushVerifyData;
    webauthnData?: WebAuthnVerifyData;
}
interface SmsVerifyData {
    /**
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
}
interface CallVerifyData {
    /**
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
}
interface ExternalEmailVerifyData {
    /**
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
}
interface TotpVerifyData {
    /**
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
}
interface PushVerifyData {
    /** @maxLength 36 */
    transactionId?: string | null;
}
interface WebAuthnVerifyData {
    /**
     * The challenge_id from the WebAuthnChallengeData that was returned in the previous
     * verification response. This will always be present when completing the WebAuthn authentication
     * ceremony with the credential data from the client.
     * @format GUID
     */
    challengeId?: string | null;
    /**
     * If this field is present, this is a request to complete the WebAuthn authentication
     * with the credential data from the client.
     *
     * The credential contains a JSON string representation of a WebAuthn PublicKeyCredential
     * object returned by the browser during authentication, serialized as per the WebAuthn specification.
     * The SPI implementation should use this to verify the authentication assertion.
     *
     * Any standards-compliant WebAuthn server library should be able to process this serialized format.
     * For details on the serialization format, refer to the W3C WebAuthn specification:
     * https://www.w3.org/TR/webauthn-3/#dom-publickeycredential-tojson
     * @maxLength 3000
     */
    credential?: string | null;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function registerV2(): __PublicMethodMetaInfo<'POST', {}, RegisterV2Request$1, RegisterV2Request, StateMachineResponse$1, StateMachineResponse>;
declare function loginV2(): __PublicMethodMetaInfo<'POST', {}, LoginV2Request$1, LoginV2Request, StateMachineResponse$1, StateMachineResponse>;
declare function changePassword(): __PublicMethodMetaInfo<'POST', {}, ChangePasswordRequest$1, ChangePasswordRequest, ChangePasswordResponse$1, ChangePasswordResponse>;
declare function loginCallback(): __PublicMethodMetaInfo<'GET', {}, LoginCallbackRequest$1, LoginCallbackRequest, RawHttpResponse$1, RawHttpResponse>;
declare function signOn(): __PublicMethodMetaInfo<'POST', {}, SignOnRequest$1, SignOnRequest, SignOnResponse$1, SignOnResponse>;
declare function logout(): __PublicMethodMetaInfo<'GET', {}, LogoutRequest$1, LogoutRequest, RawHttpResponse$1, RawHttpResponse>;
declare function verify(): __PublicMethodMetaInfo<'POST', {
    factorType: string;
}, VerifyRequest$1, VerifyRequest, StateMachineResponse$1, StateMachineResponse>;

export { type __PublicMethodMetaInfo, changePassword, loginCallback, loginV2, logout, registerV2, signOn, verify };
