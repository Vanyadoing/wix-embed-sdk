import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { L as LoginId, R as RegisterV2Options, S as StateMachineResponse, a as LoginV2Options, b as LoginCallbackOptions, c as RawHttpResponse, d as SignOnOptions, e as SignOnResponse, f as LogoutOptions, F as FactorTypeWithLiterals, V as VerifyOptions } from './iam-authentication-v1-authentication-authentication.universal-D-41C26U.mjs';
export { x as Address, A as AddressTag, w as AddressWrapper, n as Authentication, a7 as AuthenticationExtensionInputs, a8 as AuthenticationExtensionInputsLargeBlobOperationOneOf, K as AuthenticatorConnection, ao as CallVerifyData, y as CaptchaToken, z as CaptchaTokenTokenOneOf, aa as ChangePasswordRequest, ab as ChangePasswordResponse, G as Connection, H as ConnectionTypeOneOf, C as CustomField, X as CustomValue, Y as CustomValueValueOneOf, O as Email, E as EmailTag, ap as ExternalEmailVerifyData, W as Factor, m as FactorStatus, k as FactorType, ad as HeadersEntry, D as Identity, I as IdentityProfile, J as IdpConnection, Z as ListValue, ah as LoginCallbackRequest, p as LoginIdTypeOneOf, a9 as LoginV2Request, ac as LoginWithIdpConnectionRequest, ai as LoginWithIdpConnectionTokenParamsRequest, ak as LogoutRequest, _ as MapValue, N as Metadata, a1 as MfaChallengeData, M as MfaReason, af as PathParametersEntry, v as Phone, g as PhoneTag, P as PrivacyStatus, a6 as PublicKeyCredentialDescriptor, a4 as PushChallengeData, ar as PushVerifyData, ag as QueryParametersEntry, ae as RawHttpRequest, j as Reason, o as RegisterV2Request, $ as RequireMfaData, u as SecondaryEmail, aj as SignOnRequest, an as SmsVerifyData, B as StateMachineResponseStateDataOneOf, h as StateType, l as Status, i as StatusName, Q as StatusV2, T as TenantType, aq as TotpVerifyData, U as UserVerificationRequirement, q as V1CustomValue, r as V1CustomValueValueOneOf, a0 as V1Factor, s as V1ListValue, t as V1MapValue, a2 as VerificationChallenge, a3 as VerificationChallengeFactorChallengeDataOneOf, at as VerifyOptionsFactorDataOneOf, al as VerifyRequest, am as VerifyRequestFactorDataOneOf, a5 as WebAuthnChallengeData, as as WebAuthnVerifyData } from './iam-authentication-v1-authentication-authentication.universal-D-41C26U.mjs';

declare function registerV2$1(httpClient: HttpClient): RegisterV2Signature;
interface RegisterV2Signature {
    /**
     * Registers a new member.
     *
     * Typically, after a successful registration, you generate and use member tokens for the
     * registered member so that subsequent API calls are called as part of a member session.
     * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
     *
     * If the email used to register the member already exists as a contact email, the registering
     * member need to verify the email address using a code that is sent to the address.
     * @param - Identifier of the registering member.
     */
    (loginId: LoginId, options?: RegisterV2Options | undefined): Promise<StateMachineResponse>;
}
declare function loginV2$1(httpClient: HttpClient): LoginV2Signature;
interface LoginV2Signature {
    /**
     * Logs in an existing member.
     *
     * Typically, after a successful login, you generate and use member tokens for the
     * logged-in member so that subsequent API calls are called as part of a member session.
     * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
     * @param - Identifier of identity logging in.
     */
    (loginId: LoginId, options?: LoginV2Options | undefined): Promise<StateMachineResponse>;
}
declare function changePassword$1(httpClient: HttpClient): ChangePasswordSignature;
interface ChangePasswordSignature {
    /**
     * Changes the password of a logged in user.
     * @param - The new password to set for the logged in user
     */
    (newPassword: string): Promise<void>;
}
declare function loginCallback$1(httpClient: HttpClient): LoginCallbackSignature;
interface LoginCallbackSignature {
    /** */
    (options?: LoginCallbackOptions | undefined): Promise<RawHttpResponse>;
}
declare function signOn$1(httpClient: HttpClient): SignOnSignature;
interface SignOnSignature {
    /** @param - the identifier of the identity */
    (loginId: LoginId, options?: SignOnOptions | undefined): Promise<SignOnResponse>;
}
declare function logout$1(httpClient: HttpClient): LogoutSignature;
interface LogoutSignature {
    /**
     * Logs out a member.
     */
    (options?: LogoutOptions | undefined): Promise<RawHttpResponse>;
}
declare function verify$1(httpClient: HttpClient): VerifySignature;
interface VerifySignature {
    /** */
    (factorType: FactorTypeWithLiterals, options?: VerifyOptions | undefined): Promise<StateMachineResponse>;
}

declare const registerV2: MaybeContext<BuildRESTFunction<typeof registerV2$1> & typeof registerV2$1>;
declare const loginV2: MaybeContext<BuildRESTFunction<typeof loginV2$1> & typeof loginV2$1>;
declare const changePassword: MaybeContext<BuildRESTFunction<typeof changePassword$1> & typeof changePassword$1>;
declare const loginCallback: MaybeContext<BuildRESTFunction<typeof loginCallback$1> & typeof loginCallback$1>;
declare const signOn: MaybeContext<BuildRESTFunction<typeof signOn$1> & typeof signOn$1>;
declare const logout: MaybeContext<BuildRESTFunction<typeof logout$1> & typeof logout$1>;
declare const verify: MaybeContext<BuildRESTFunction<typeof verify$1> & typeof verify$1>;

export { LoginCallbackOptions, LoginId, LoginV2Options, LogoutOptions, RawHttpResponse, RegisterV2Options, SignOnOptions, SignOnResponse, StateMachineResponse, VerifyOptions, changePassword, loginCallback, loginV2, logout, registerV2, signOn, verify };
