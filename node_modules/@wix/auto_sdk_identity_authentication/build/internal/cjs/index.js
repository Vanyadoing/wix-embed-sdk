"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  AddressTag: () => AddressTag,
  EmailTag: () => EmailTag,
  FactorStatus: () => FactorStatus,
  FactorType: () => FactorType,
  MfaReason: () => MfaReason,
  PhoneTag: () => PhoneTag,
  PrivacyStatus: () => PrivacyStatus,
  Reason: () => Reason,
  StateType: () => StateType,
  Status: () => Status,
  StatusName: () => StatusName,
  TenantType: () => TenantType,
  UserVerificationRequirement: () => UserVerificationRequirement,
  changePassword: () => changePassword4,
  loginCallback: () => loginCallback4,
  loginV2: () => loginV24,
  logout: () => logout4,
  registerV2: () => registerV24,
  signOn: () => signOn4,
  verify: () => verify4
});
module.exports = __toCommonJS(index_exports);

// src/iam-authentication-v1-authentication-authentication.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/iam-authentication-v1-authentication-authentication.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_bytes = require("@wix/sdk-runtime/transformations/bytes");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixIamAuthenticationV1AuthenticationServiceUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "users._base_domain_": [
      {
        srcPath: "/iam/wix/google",
        destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
      },
      {
        srcPath: "/authentication",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      },
      {
        srcPath: "/iam/authentication",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/authentication",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/iam/authentication",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_identity_authentication";
function registerV2(payload) {
  function __registerV2({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "profile.customFields.value.numValue" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "profile.customFields.value.dateValue" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.RegisterV2",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/register",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __registerV2;
}
function loginV2(payload) {
  function __loginV2({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.LoginV2",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/login",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __loginV2;
}
function changePassword(payload) {
  function __changePassword({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.ChangePassword",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/change-password",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __changePassword;
}
function loginCallback(payload) {
  function __loginCallback({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "GET",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.LoginCallback",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v1/callback",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __loginCallback;
}
function signOn(payload) {
  function __signOn({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "profile.customFields.value.numValue" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "profile.customFields.value.dateValue" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.SignOn",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/sign-on",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __signOn;
}
function logout(payload) {
  function __logout({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "GET",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.Logout",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v1/logout",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __logout;
}
function verify(payload) {
  function __verify({ host }) {
    const metadata = {
      entityFqdn: "wix.iam.authentication.v1.authentication",
      method: "POST",
      methodFqn: "wix.iam.authentication.v1.AuthenticationService.Verify",
      packageName: PACKAGE_NAME,
      url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
        protoPath: "/v2/{factorType}/verify",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_bytes.transformRESTBytesToSDKBytes,
          paths: [
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.challenge"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id"
            },
            {
              path: "mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite"
            }
          ]
        },
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "identity.createdDate" },
            { path: "identity.updatedDate" },
            { path: "identity.identityProfile.customFields.value.dateValue" },
            { path: "additionalData.*.dateValue" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "identity.identityProfile.customFields.value.numValue" },
            { path: "additionalData.*.numValue" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __verify;
}

// src/iam-authentication-v1-authentication-authentication.universal.ts
var import_address = require("@wix/sdk-runtime/transformations/address");
var import_address2 = require("@wix/sdk-runtime/transformations/address");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var PrivacyStatus = /* @__PURE__ */ ((PrivacyStatus2) => {
  PrivacyStatus2["UNDEFINED"] = "UNDEFINED";
  PrivacyStatus2["PUBLIC"] = "PUBLIC";
  PrivacyStatus2["PRIVATE"] = "PRIVATE";
  return PrivacyStatus2;
})(PrivacyStatus || {});
var EmailTag = /* @__PURE__ */ ((EmailTag2) => {
  EmailTag2["UNTAGGED"] = "UNTAGGED";
  EmailTag2["MAIN"] = "MAIN";
  EmailTag2["HOME"] = "HOME";
  EmailTag2["WORK"] = "WORK";
  return EmailTag2;
})(EmailTag || {});
var PhoneTag = /* @__PURE__ */ ((PhoneTag2) => {
  PhoneTag2["UNTAGGED"] = "UNTAGGED";
  PhoneTag2["MAIN"] = "MAIN";
  PhoneTag2["HOME"] = "HOME";
  PhoneTag2["MOBILE"] = "MOBILE";
  PhoneTag2["WORK"] = "WORK";
  PhoneTag2["FAX"] = "FAX";
  return PhoneTag2;
})(PhoneTag || {});
var AddressTag = /* @__PURE__ */ ((AddressTag2) => {
  AddressTag2["UNTAGGED"] = "UNTAGGED";
  AddressTag2["HOME"] = "HOME";
  AddressTag2["WORK"] = "WORK";
  AddressTag2["BILLING"] = "BILLING";
  AddressTag2["SHIPPING"] = "SHIPPING";
  return AddressTag2;
})(AddressTag || {});
var StateType = /* @__PURE__ */ ((StateType2) => {
  StateType2["UNKNOWN_STATE"] = "UNKNOWN_STATE";
  StateType2["SUCCESS"] = "SUCCESS";
  StateType2["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
  StateType2["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
  StateType2["STATUS_CHECK"] = "STATUS_CHECK";
  return StateType2;
})(StateType || {});
var StatusName = /* @__PURE__ */ ((StatusName2) => {
  StatusName2["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
  StatusName2["PENDING"] = "PENDING";
  StatusName2["ACTIVE"] = "ACTIVE";
  StatusName2["DELETED"] = "DELETED";
  StatusName2["BLOCKED"] = "BLOCKED";
  StatusName2["OFFLINE"] = "OFFLINE";
  return StatusName2;
})(StatusName || {});
var Reason = /* @__PURE__ */ ((Reason2) => {
  Reason2["UNKNOWN_REASON"] = "UNKNOWN_REASON";
  Reason2["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
  Reason2["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
  return Reason2;
})(Reason || {});
var FactorType = /* @__PURE__ */ ((FactorType2) => {
  FactorType2["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
  FactorType2["PASSWORD"] = "PASSWORD";
  FactorType2["SMS"] = "SMS";
  FactorType2["CALL"] = "CALL";
  FactorType2["EMAIL"] = "EMAIL";
  FactorType2["TOTP"] = "TOTP";
  FactorType2["PUSH"] = "PUSH";
  FactorType2["WEBAUTHN"] = "WEBAUTHN";
  return FactorType2;
})(FactorType || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["INACTIVE"] = "INACTIVE";
  Status2["ACTIVE"] = "ACTIVE";
  Status2["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
  return Status2;
})(Status || {});
var FactorStatus = /* @__PURE__ */ ((FactorStatus2) => {
  FactorStatus2["UNKNOWN_FACTOR_STATUS"] = "UNKNOWN_FACTOR_STATUS";
  FactorStatus2["ENABLED"] = "ENABLED";
  FactorStatus2["REQUIRE_ACTIVATION"] = "REQUIRE_ACTIVATION";
  FactorStatus2["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
  FactorStatus2["ENABLED_BY_RULE"] = "ENABLED_BY_RULE";
  FactorStatus2["DISABLED_BY_RULE"] = "DISABLED_BY_RULE";
  return FactorStatus2;
})(FactorStatus || {});
var MfaReason = /* @__PURE__ */ ((MfaReason2) => {
  MfaReason2["UNKNOWN_MFA_REASON"] = "UNKNOWN_MFA_REASON";
  MfaReason2["USER_SETTINGS"] = "USER_SETTINGS";
  MfaReason2["HIGH_RISK_LOGIN"] = "HIGH_RISK_LOGIN";
  return MfaReason2;
})(MfaReason || {});
var UserVerificationRequirement = /* @__PURE__ */ ((UserVerificationRequirement2) => {
  UserVerificationRequirement2["USER_VERIFICATION_UNSPECIFIED"] = "USER_VERIFICATION_UNSPECIFIED";
  UserVerificationRequirement2["USER_VERIFICATION_REQUIRED"] = "USER_VERIFICATION_REQUIRED";
  UserVerificationRequirement2["USER_VERIFICATION_PREFERRED"] = "USER_VERIFICATION_PREFERRED";
  UserVerificationRequirement2["USER_VERIFICATION_DISCOURAGED"] = "USER_VERIFICATION_DISCOURAGED";
  return UserVerificationRequirement2;
})(UserVerificationRequirement || {});
var TenantType = /* @__PURE__ */ ((TenantType2) => {
  TenantType2["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
  TenantType2["ACCOUNT"] = "ACCOUNT";
  TenantType2["SITE"] = "SITE";
  TenantType2["ROOT"] = "ROOT";
  return TenantType2;
})(TenantType || {});
async function registerV22(loginId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      loginId,
      password: options?.password,
      profile: options?.profile,
      captchaTokens: options?.captchaTokens,
      clientMetaData: options?.clientMetaData
    }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "profile.addresses.address" }]
      }
    ]
  );
  const reqOpts = registerV2(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "identity.identityProfile.addresses.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          loginId: "$[0]",
          password: "$[1].password",
          profile: "$[1].profile",
          captchaTokens: "$[1].captchaTokens",
          clientMetaData: "$[1].clientMetaData"
        },
        singleArgumentUnchanged: false
      },
      ["loginId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function loginV22(loginId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    loginId,
    password: options?.password,
    captchaTokens: options?.captchaTokens,
    clientMetaData: options?.clientMetaData
  });
  const reqOpts = loginV2(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "identity.identityProfile.addresses.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          loginId: "$[0]",
          password: "$[1].password",
          captchaTokens: "$[1].captchaTokens",
          clientMetaData: "$[1].clientMetaData"
        },
        singleArgumentUnchanged: false
      },
      ["loginId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function changePassword2(newPassword) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    newPassword
  });
  const reqOpts = changePassword(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { newPassword: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["newPassword"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function loginCallback2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    state: options?.state,
    sessionToken: options?.sessionToken
  });
  const reqOpts = loginCallback(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          state: "$[0].state",
          sessionToken: "$[0].sessionToken"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function signOn2(loginId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      loginId,
      profile: options?.profile,
      verifyEmail: options?.verifyEmail,
      mergeExistingContact: options?.mergeExistingContact
    }),
    [
      {
        transformFn: import_address.transformSDKAddressToRESTAddress,
        paths: [{ path: "profile.addresses.address" }]
      }
    ]
  );
  const reqOpts = signOn(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "identity.identityProfile.addresses.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          loginId: "$[0]",
          profile: "$[1].profile",
          verifyEmail: "$[1].verifyEmail",
          mergeExistingContact: "$[1].mergeExistingContact"
        },
        singleArgumentUnchanged: false
      },
      ["loginId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function logout2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    postLogoutRedirectUri: options?.postLogoutRedirectUri,
    clientId: options?.clientId
  });
  const reqOpts = logout(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          postLogoutRedirectUri: "$[0].postLogoutRedirectUri",
          clientId: "$[0].clientId"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function verify2(factorType, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    factorType,
    stateToken: options?.stateToken,
    rememberThisDevice: options?.rememberThisDevice,
    smsData: options?.smsData,
    callData: options?.callData,
    emailData: options?.emailData,
    totpData: options?.totpData,
    pushData: options?.pushData,
    webauthnData: options?.webauthnData
  });
  const reqOpts = verify(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_address2.transformRESTAddressToSDKAddress,
          paths: [{ path: "identity.identityProfile.addresses.address" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          factorType: "$[0]",
          stateToken: "$[1].stateToken",
          rememberThisDevice: "$[1].rememberThisDevice",
          smsData: "$[1].smsData",
          callData: "$[1].callData",
          emailData: "$[1].emailData",
          totpData: "$[1].totpData",
          pushData: "$[1].pushData",
          webauthnData: "$[1].webauthnData"
        },
        singleArgumentUnchanged: false
      },
      ["factorType", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/iam-authentication-v1-authentication-authentication.public.ts
function registerV23(httpClient) {
  return (loginId, options) => registerV22(
    loginId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function loginV23(httpClient) {
  return (loginId, options) => loginV22(
    loginId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function changePassword3(httpClient) {
  return (newPassword) => changePassword2(
    newPassword,
    // @ts-ignore
    { httpClient }
  );
}
function loginCallback3(httpClient) {
  return (options) => loginCallback2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function signOn3(httpClient) {
  return (loginId, options) => signOn2(
    loginId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function logout3(httpClient) {
  return (options) => logout2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function verify3(httpClient) {
  return (factorType, options) => verify2(
    factorType,
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/iam-authentication-v1-authentication-authentication.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var registerV24 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(registerV23);
var loginV24 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(loginV23);
var changePassword4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(changePassword3);
var loginCallback4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(loginCallback3);
var signOn4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(signOn3);
var logout4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(logout3);
var verify4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(verify3);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AddressTag,
  EmailTag,
  FactorStatus,
  FactorType,
  MfaReason,
  PhoneTag,
  PrivacyStatus,
  Reason,
  StateType,
  Status,
  StatusName,
  TenantType,
  UserVerificationRequirement,
  changePassword,
  loginCallback,
  loginV2,
  logout,
  registerV2,
  signOn,
  verify
});
//# sourceMappingURL=index.js.map