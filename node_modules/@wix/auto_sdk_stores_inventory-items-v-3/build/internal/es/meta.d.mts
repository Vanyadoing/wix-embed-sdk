import { a4 as CreateInventoryItemRequest$1, a5 as CreateInventoryItemResponse$1, a6 as BulkCreateInventoryItemsRequest$1, a as BulkCreateInventoryItemsResponse$1, ab as GetInventoryItemRequest$1, ac as GetInventoryItemResponse$1, ad as UpdateInventoryItemRequest$1, ae as UpdateInventoryItemResponse$1, ah as BulkUpdateInventoryItemsRequest$1, d as BulkUpdateInventoryItemsResponse$1, ai as BulkUpdateInventoryItemsByFilterRequest$1, f as BulkUpdateInventoryItemsByFilterResponse$1, ak as DeleteInventoryItemRequest$1, al as DeleteInventoryItemResponse$1, am as BulkDeleteInventoryItemsRequest$1, g as BulkDeleteInventoryItemsResponse$1, ao as QueryInventoryItemsRequest$1, au as QueryInventoryItemsResponse$1, ax as SearchInventoryItemsRequest$1, i as SearchInventoryItemsResponse$1, be as BulkDecrementInventoryItemsRequest$1, k as BulkDecrementInventoryItemsResponse$1, bf as BulkIncrementInventoryItemsRequest$1, n as BulkIncrementInventoryItemsResponse$1, bg as BulkDecrementInventoryItemsByVariantAndLocationRequest$1, q as BulkDecrementInventoryItemsByVariantAndLocationResponse$1, bh as BulkIncrementInventoryItemsByVariantAndLocationRequest$1, t as BulkIncrementInventoryItemsByVariantAndLocationResponse$1, bq as BulkSetOrAdjustInventoryItemsByFilterRequest$1, v as BulkSetOrAdjustInventoryItemsByFilterResponse$1 } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal-DMoL2OLA.mjs';

/** Inventory Item. */
interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    variantId?: string;
    /**
     * Stores location ID.
     * @format GUID
     * @immutable
     */
    locationId?: string | null;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatusWithLiterals;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** Product is out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    IN_STOCK = "IN_STOCK",
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    PREORDER = "PREORDER"
}
/** @enumType */
type AvailabilityStatusWithLiterals = AvailabilityStatus | 'UNKNOWN_AVAILABILITY_STATUS' | 'OUT_OF_STOCK' | 'IN_STOCK' | 'PREORDER';
interface PreorderInfo {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /**
     * A message the customer will see when the item is out of stock and preorder is enabled.
     * @minLength 1
     * @maxLength 250
     */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     * @max 100000
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     * @max 99999
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface Product {
    /**
     * Product name.
     * @maxLength 80
     */
    name?: string | null;
    /**
     * List of category IDs that this product is included in directly.
     * @format GUID
     * @maxSize 2000
     */
    directCategoryIds?: string[];
    /**
     * Variant name.
     * @minLength 1
     * @maxLength 250
     */
    variantName?: string | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     */
    variantSku?: string | null;
    /** Variant visible. */
    variantVisible?: boolean | null;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface CreateInventoryItemRequest {
    /** Inventory item to create. */
    inventoryItem: InventoryItem;
}
interface CreateInventoryItemResponse {
    /** Created inventory item. */
    inventoryItem?: InventoryItem;
}
interface BulkCreateInventoryItemsRequest {
    /**
     * Inventory items to create.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems: InventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInventoryItemsResponse {
    /**
     * Inventory items created by bulk action.
     * @minSize 1
     * @maxSize 1000
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @format GUID
     */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetInventoryItemRequest {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId: string;
}
interface GetInventoryItemResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItem;
}
interface UpdateInventoryItemRequest {
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Reason for update. */
    reason?: ReasonTypeWithLiterals;
}
/** The reason for the inventory change. */
declare enum ReasonType {
    UNKNOWN = "UNKNOWN",
    ORDER = "ORDER",
    MANUAL = "MANUAL",
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
/** @enumType */
type ReasonTypeWithLiterals = ReasonType | 'UNKNOWN' | 'ORDER' | 'MANUAL' | 'REVERT_INVENTORY_CHANGE';
interface UpdateInventoryItemResponse {
    /** Updated inventory item. */
    inventoryItem?: InventoryItem;
}
interface BulkUpdateInventoryItemsRequest {
    /**
     * Inventory items to update.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems: MaskedInventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonTypeWithLiterals;
}
interface MaskedInventoryItem {
    /** Inventory item to update. */
    inventoryItem?: InventoryItem;
}
interface BulkUpdateInventoryItemsResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 1000
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateInventoryItemsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: ModeWithLiterals;
    /**
     * Search term or expression.
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path.
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
/** @enumType */
type ModeWithLiterals = Mode | 'OR' | 'AND';
interface BulkUpdateInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     * @format GUID
     */
    jobId?: string;
}
interface DeleteInventoryItemRequest {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId: string;
}
interface DeleteInventoryItemResponse {
}
interface BulkDeleteInventoryItemsRequest {
    /**
     * IDs of inventory items to delete.
     * @format GUID
     * @minLength 1
     * @maxLength 36
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItemIds: string[];
}
interface BulkDeleteInventoryItemsResponse {
    /**
     * Inventory items deleted by bulk action.
     * @minSize 1
     * @maxSize 1000
     */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
}
interface QueryInventoryItemsRequest {
    /** Query options. */
    query?: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 10
     */
    sort?: Sorting[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /**
     * Number of items to load.
     * @max 1000
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 1000
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryInventoryItemsResponse {
    /**
     * List of inventory items.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. */
    pagingMetadata?: PlatformPagingMetadataV2;
}
interface PlatformPagingMetadataV2 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SearchInventoryItemsRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Aggregations are a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition.
     * @maxSize 10
     */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome.
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. For example, `"2023-12-20T10:52:34.795Z"`.
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation. */
    nested?: NestedAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path.
     * @maxLength 200
     */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation. */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum SortType {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
/** @enumType */
type SortTypeWithLiterals = SortType | 'COUNT' | 'VALUE';
declare enum SortDirection {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
/** @enumType */
type SortDirectionWithLiterals = SortDirection | 'DESC' | 'ASC';
declare enum MissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type MissingValuesWithLiterals = MissingValues | 'EXCLUDE' | 'INCLUDE';
interface IncludeMissingValuesOptions {
    /**
     * Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ...
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum ScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
/** @enumType */
type ScalarTypeWithLiterals = ScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: SortTypeWithLiterals;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: SortDirectionWithLiterals;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: MissingValuesWithLiterals;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationTypeWithLiterals = NestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface RangeAggregation {
    /**
     * List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds.
     * @maxSize 50
     */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation. */
    type?: ScalarTypeWithLiterals;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: IntervalWithLiterals;
}
declare enum Interval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
/** @enumType */
type IntervalWithLiterals = Interval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** @enumType */
type AggregationTypeWithLiterals = AggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface NestedAggregation {
    /**
     * Flattened list of aggregations, where each next aggregation is nested within previous one.
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationItem[];
}
interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: ValueAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results.
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Field to aggregate by.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: ValueAggregation;
}
interface SearchInventoryItemsResponse {
    /**
     * List of inventory items.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface AggregationData {
    /**
     * key = aggregation name (as derived from search request).
     * @maxSize 10000
     */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /**
     * Value of the field.
     * @maxLength 100
     */
    value?: string;
    /** Count of entities with this value. */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /**
     * User-defined name of aggregation, matches the one provided in request.
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that matches result. */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, matches the one provided in request.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /**
     * List of value aggregations.
     * @maxSize 250
     */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /**
     * List of ranges returned in same order as requested.
     * @maxSize 50
     */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation. */
    type?: ScalarTypeWithLiterals;
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedValueAggregationResult {
    /**
     * Value of the field.
     * @maxLength 1000
     */
    value?: string;
    /** Nested aggregations. */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /**
     * Value of the field.
     * @maxLength 1000
     */
    value?: string;
    /** Count of entities with this value. */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: ValueResult;
    /** Range aggregation result. */
    range?: RangeResult;
    /** Scalar aggregation result. */
    scalar?: ScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: ValueResult;
    /** Range aggregation result. */
    range?: RangeResult;
    /** Scalar aggregation result. */
    scalar?: ScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations. */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /**
     * Date in ISO 8601 format.
     * @maxLength 100
     */
    value?: string;
    /** Count of documents in the bucket. */
    count?: number;
}
interface GroupByValueResults {
    /**
     * List of value aggregations.
     * @maxSize 1000
     */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /**
     * List of date histogram aggregations.
     * @maxSize 200
     */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form.
 * Aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /**
     * List of nested aggregations.
     * @maxSize 1000
     */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results. */
    nested?: NestedResults;
    /**
     * User-defined name of aggregation as derived from search request.
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request. */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by as derived from search request.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results. */
    nested?: NestedResults;
}
interface BulkDecrementInventoryItemsRequest {
    /**
     * Inventory item IDs and decrement data.
     * @minSize 1
     * @maxSize 300
     */
    decrementData: DecrementDataById[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface DecrementDataById {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId?: string;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkIncrementInventoryItemsRequest {
    /**
     * Inventory item IDs and increment data.
     * @minSize 1
     * @maxSize 300
     */
    incrementData: IncrementDataById[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface IncrementDataById {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId?: string;
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDecrementInventoryItemsByVariantAndLocationRequest {
    /**
     * Variant and location IDs, as well as decrement data.
     * @minSize 1
     * @maxSize 300
     */
    decrementData: DecrementDataByVariantAndLocation[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface DecrementDataByVariantAndLocation {
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Location ID.
     * @format GUID
     */
    locationId?: string | null;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkIncrementInventoryItemsByVariantAndLocationRequest {
    /**
     * Variant and location IDs, as well as increment data.
     * @minSize 1
     * @maxSize 300
     */
    incrementData: IncrementDataByVariantAndLocation[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface IncrementDataByVariantAndLocation {
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Location ID.
     * @format GUID
     */
    locationId?: string | null;
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata details as: totalSuccess and totalFailure. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkSetOrAdjustInventoryItemsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
    /** Action to adjust the inventory by. (e.g increment or decrement) */
    adjustedInventoryAction: AdjustInventoryAction;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface AdjustInventoryAction extends AdjustInventoryActionActionOneOf {
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
}
/** @oneof */
interface AdjustInventoryActionActionOneOf {
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
}
interface BulkSetOrAdjustInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     * @format GUID
     */
    jobId?: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createInventoryItem(): __PublicMethodMetaInfo<'POST', {}, CreateInventoryItemRequest$1, CreateInventoryItemRequest, CreateInventoryItemResponse$1, CreateInventoryItemResponse>;
declare function bulkCreateInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkCreateInventoryItemsRequest$1, BulkCreateInventoryItemsRequest, BulkCreateInventoryItemsResponse$1, BulkCreateInventoryItemsResponse>;
declare function getInventoryItem(): __PublicMethodMetaInfo<'GET', {
    inventoryItemId: string;
}, GetInventoryItemRequest$1, GetInventoryItemRequest, GetInventoryItemResponse$1, GetInventoryItemResponse>;
declare function updateInventoryItem(): __PublicMethodMetaInfo<'PATCH', {
    inventoryItemId: string;
}, UpdateInventoryItemRequest$1, UpdateInventoryItemRequest, UpdateInventoryItemResponse$1, UpdateInventoryItemResponse>;
declare function bulkUpdateInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateInventoryItemsRequest$1, BulkUpdateInventoryItemsRequest, BulkUpdateInventoryItemsResponse$1, BulkUpdateInventoryItemsResponse>;
declare function bulkUpdateInventoryItemsByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateInventoryItemsByFilterRequest$1, BulkUpdateInventoryItemsByFilterRequest, BulkUpdateInventoryItemsByFilterResponse$1, BulkUpdateInventoryItemsByFilterResponse>;
declare function deleteInventoryItem(): __PublicMethodMetaInfo<'DELETE', {
    inventoryItemId: string;
}, DeleteInventoryItemRequest$1, DeleteInventoryItemRequest, DeleteInventoryItemResponse$1, DeleteInventoryItemResponse>;
declare function bulkDeleteInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteInventoryItemsRequest$1, BulkDeleteInventoryItemsRequest, BulkDeleteInventoryItemsResponse$1, BulkDeleteInventoryItemsResponse>;
declare function queryInventoryItems(): __PublicMethodMetaInfo<'POST', {}, QueryInventoryItemsRequest$1, QueryInventoryItemsRequest, QueryInventoryItemsResponse$1, QueryInventoryItemsResponse>;
declare function searchInventoryItems(): __PublicMethodMetaInfo<'POST', {}, SearchInventoryItemsRequest$1, SearchInventoryItemsRequest, SearchInventoryItemsResponse$1, SearchInventoryItemsResponse>;
declare function bulkDecrementInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkDecrementInventoryItemsRequest$1, BulkDecrementInventoryItemsRequest, BulkDecrementInventoryItemsResponse$1, BulkDecrementInventoryItemsResponse>;
declare function bulkIncrementInventoryItems(): __PublicMethodMetaInfo<'POST', {}, BulkIncrementInventoryItemsRequest$1, BulkIncrementInventoryItemsRequest, BulkIncrementInventoryItemsResponse$1, BulkIncrementInventoryItemsResponse>;
declare function bulkDecrementInventoryItemsByVariantAndLocation(): __PublicMethodMetaInfo<'POST', {}, BulkDecrementInventoryItemsByVariantAndLocationRequest$1, BulkDecrementInventoryItemsByVariantAndLocationRequest, BulkDecrementInventoryItemsByVariantAndLocationResponse$1, BulkDecrementInventoryItemsByVariantAndLocationResponse>;
declare function bulkIncrementInventoryItemsByVariantAndLocation(): __PublicMethodMetaInfo<'POST', {}, BulkIncrementInventoryItemsByVariantAndLocationRequest$1, BulkIncrementInventoryItemsByVariantAndLocationRequest, BulkIncrementInventoryItemsByVariantAndLocationResponse$1, BulkIncrementInventoryItemsByVariantAndLocationResponse>;
declare function bulkSetOrAdjustInventoryItemsByFilter(): __PublicMethodMetaInfo<'POST', {}, BulkSetOrAdjustInventoryItemsByFilterRequest$1, BulkSetOrAdjustInventoryItemsByFilterRequest, BulkSetOrAdjustInventoryItemsByFilterResponse$1, BulkSetOrAdjustInventoryItemsByFilterResponse>;

export { type __PublicMethodMetaInfo, bulkCreateInventoryItems, bulkDecrementInventoryItems, bulkDecrementInventoryItemsByVariantAndLocation, bulkDeleteInventoryItems, bulkIncrementInventoryItems, bulkIncrementInventoryItemsByVariantAndLocation, bulkSetOrAdjustInventoryItemsByFilter, bulkUpdateInventoryItems, bulkUpdateInventoryItemsByFilter, createInventoryItem, deleteInventoryItem, getInventoryItem, queryInventoryItems, searchInventoryItems, updateInventoryItem };
