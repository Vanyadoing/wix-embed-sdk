/** Inventory Item. */
interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    variantId?: string;
    /**
     * Stores location ID.
     * @format GUID
     * @immutable
     */
    locationId?: string | null;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatusWithLiterals;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** Product is out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    IN_STOCK = "IN_STOCK",
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    PREORDER = "PREORDER"
}
/** @enumType */
type AvailabilityStatusWithLiterals = AvailabilityStatus | 'UNKNOWN_AVAILABILITY_STATUS' | 'OUT_OF_STOCK' | 'IN_STOCK' | 'PREORDER';
interface PreorderInfo {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /**
     * A message the customer will see when the item is out of stock and preorder is enabled.
     * @minLength 1
     * @maxLength 250
     */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     * @max 100000
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     * @max 99999
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
interface Product {
    /**
     * Product name.
     * @maxLength 80
     */
    name?: string | null;
    /**
     * List of category IDs that this product is included in directly.
     * @format GUID
     * @maxSize 2000
     */
    directCategoryIds?: string[];
    /**
     * Variant name.
     * @minLength 1
     * @maxLength 250
     */
    variantName?: string | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     */
    variantSku?: string | null;
    /** Variant visible. */
    variantVisible?: boolean | null;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */
    customTag?: CustomTag;
    /**
     * tell us why you're invalidating the cache. You don't need to add your app name
     * @maxLength 256
     */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */
    customTag?: CustomTag;
}
interface App {
    /**
     * The AppDefId
     * @minLength 1
     */
    appDefId?: string;
    /**
     * The instance Id
     * @format GUID
     */
    instanceId?: string;
}
interface Page {
    /**
     * the msid the page is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Page ID
     * @minLength 1
     */
    pageId?: string;
}
interface URI {
    /**
     * the msid the URI is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes
     * @minLength 1
     */
    uriPath?: string;
}
interface File {
    /**
     * the msid the file is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by filename (for media files such as PDFs)
     * @minLength 1
     * @maxLength 256
     */
    fileName?: string;
}
interface CustomTag {
    /**
     * the msid the tag is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Tag to invalidate by
     * @minLength 1
     * @maxLength 256
     */
    tag?: string;
}
interface BulkInventoryItemAction {
    /**
     * Inventory items.
     * @maxSize 1000
     */
    inventoryItems?: InventoryItem[];
    /** Type of bulk inventory changed event - created, updated or deleted */
    eventType?: EventTypeWithLiterals;
}
declare enum EventType {
    UNKNOWN = "UNKNOWN",
    CREATED = "CREATED",
    UPDATED = "UPDATED",
    DELETED = "DELETED"
}
/** @enumType */
type EventTypeWithLiterals = EventType | 'UNKNOWN' | 'CREATED' | 'UPDATED' | 'DELETED';
interface CreateInventoryItemRequest {
    /** Inventory item to create. */
    inventoryItem: InventoryItem;
}
interface CreateInventoryItemResponse {
    /** Created inventory item. */
    inventoryItem?: InventoryItem;
}
interface BulkCreateInventoryItemsRequest {
    /**
     * Inventory items to create.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems: InventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateInventoryItemsResponse {
    /**
     * Inventory items created by bulk action.
     * @minSize 1
     * @maxSize 1000
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface V3BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @format GUID
     */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetInventoryItemRequest {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId: string;
}
interface GetInventoryItemResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItem;
}
interface UpdateInventoryItemRequest {
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Reason for update. */
    reason?: ReasonTypeWithLiterals;
}
/** The reason for the inventory change. */
declare enum ReasonType {
    UNKNOWN = "UNKNOWN",
    ORDER = "ORDER",
    MANUAL = "MANUAL",
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
/** @enumType */
type ReasonTypeWithLiterals = ReasonType | 'UNKNOWN' | 'ORDER' | 'MANUAL' | 'REVERT_INVENTORY_CHANGE';
interface UpdateInventoryItemResponse {
    /** Updated inventory item. */
    inventoryItem?: InventoryItem;
}
/** Report when Inventory item stock status changed from in stock to out of stock and the opposite. */
interface InventoryItemStockStatusUpdatedEvent {
    /** Inventory item new status. */
    inStock?: boolean;
}
interface InventoryItemUpdatedWithReason {
    /** Updated inventory item. */
    currentEntity?: InventoryItem;
    /** Reason for the update. */
    reason?: ReasonTypeWithLiterals;
    /**
     * ID of the app that updated this inventory item.
     *
     * When Wix Stores updates an inventory item, value will always be: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`.
     * @format GUID
     */
    appId?: string;
}
interface BulkUpdateInventoryItemsRequest {
    /**
     * Inventory items to update.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems: MaskedInventoryItem[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonTypeWithLiterals;
}
interface MaskedInventoryItem {
    /** Inventory item to update. */
    inventoryItem?: InventoryItem;
}
interface BulkUpdateInventoryItemsResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 1000
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateInventoryItemsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: ModeWithLiterals;
    /**
     * Search term or expression.
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path.
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
/** @enumType */
type ModeWithLiterals = Mode | 'OR' | 'AND';
interface BulkUpdateInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     * @format GUID
     */
    jobId?: string;
}
interface DeleteInventoryItemRequest {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId: string;
}
interface DeleteInventoryItemResponse {
}
interface BulkDeleteInventoryItemsRequest {
    /**
     * IDs of inventory items to delete.
     * @format GUID
     * @minLength 1
     * @maxLength 36
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItemIds: string[];
}
interface BulkDeleteInventoryItemsResponse {
    /**
     * Inventory items deleted by bulk action.
     * @minSize 1
     * @maxSize 1000
     */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
}
interface QueryInventoryItemsRequest {
    /** Query options. */
    query?: QueryV2;
}
interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 10
     */
    sort?: Sorting[];
}
/** @oneof */
interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface Paging {
    /**
     * Number of items to load.
     * @max 1000
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 1000
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryInventoryItemsResponse {
    /**
     * List of inventory items.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. */
    pagingMetadata?: PlatformPagingMetadataV2;
}
interface PlatformPagingMetadataV2 {
    /** The number of items returned in this response. */
    count?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: CommonCursors;
}
interface CommonCursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SearchInventoryItemsRequest {
    /** Search options. */
    search?: CursorSearch;
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Aggregations are a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition.
     * @maxSize 10
     */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome.
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. For example, `"2023-12-20T10:52:34.795Z"`.
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation. */
    nested?: NestedAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path.
     * @maxLength 200
     */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation. */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum SortType {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
/** @enumType */
type SortTypeWithLiterals = SortType | 'COUNT' | 'VALUE';
declare enum SortDirection {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
/** @enumType */
type SortDirectionWithLiterals = SortDirection | 'DESC' | 'ASC';
declare enum MissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type MissingValuesWithLiterals = MissingValues | 'EXCLUDE' | 'INCLUDE';
interface IncludeMissingValuesOptions {
    /**
     * Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ...
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum ScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
/** @enumType */
type ScalarTypeWithLiterals = ScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: SortTypeWithLiterals;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: SortDirectionWithLiterals;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: MissingValuesWithLiterals;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationTypeWithLiterals = NestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface RangeAggregation {
    /**
     * List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds.
     * @maxSize 50
     */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation. */
    type?: ScalarTypeWithLiterals;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: IntervalWithLiterals;
}
declare enum Interval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
/** @enumType */
type IntervalWithLiterals = Interval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: ValueAggregation;
    /** Range aggregation. */
    range?: RangeAggregation;
    /** Scalar aggregation. */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** @enumType */
type AggregationTypeWithLiterals = AggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface NestedAggregation {
    /**
     * Flattened list of aggregations, where each next aggregation is nested within previous one.
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationItem[];
}
interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: ValueAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results.
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Field to aggregate by.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: ValueAggregation;
}
interface SearchInventoryItemsResponse {
    /**
     * List of inventory items.
     * @minSize 1
     * @maxSize 1000
     */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface AggregationData {
    /**
     * key = aggregation name (as derived from search request).
     * @maxSize 10000
     */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /**
     * Value of the field.
     * @maxLength 100
     */
    value?: string;
    /** Count of entities with this value. */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /**
     * User-defined name of aggregation, matches the one provided in request.
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that matches result. */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, matches the one provided in request.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /**
     * List of value aggregations.
     * @maxSize 250
     */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /**
     * List of ranges returned in same order as requested.
     * @maxSize 50
     */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation. */
    type?: ScalarTypeWithLiterals;
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedValueAggregationResult {
    /**
     * Value of the field.
     * @maxLength 1000
     */
    value?: string;
    /** Nested aggregations. */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /**
     * Value of the field.
     * @maxLength 1000
     */
    value?: string;
    /** Count of entities with this value. */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range. */
    from?: number | null;
    /** Exclusive upper bound of the range. */
    to?: number | null;
    /** Count of entities in this range. */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation. */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: ValueResult;
    /** Range aggregation result. */
    range?: RangeResult;
    /** Scalar aggregation result. */
    scalar?: ScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result. */
    value?: ValueResult;
    /** Range aggregation result. */
    range?: RangeResult;
    /** Scalar aggregation result. */
    scalar?: ScalarResult;
    /** Date histogram aggregation result. */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations. */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /**
     * Date in ISO 8601 format.
     * @maxLength 100
     */
    value?: string;
    /** Count of documents in the bucket. */
    count?: number;
}
interface GroupByValueResults {
    /**
     * List of value aggregations.
     * @maxSize 1000
     */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /**
     * List of date histogram aggregations.
     * @maxSize 200
     */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form.
 * Aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /**
     * List of nested aggregations.
     * @maxSize 1000
     */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results. */
    nested?: NestedResults;
    /**
     * User-defined name of aggregation as derived from search request.
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request. */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by as derived from search request.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results. */
    values?: ValueResults;
    /** Range aggregation results. */
    ranges?: RangeResults;
    /** Scalar aggregation results. */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results. */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results. */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results. */
    nested?: NestedResults;
}
interface SearchInventoryItemsWithOffsetRequest {
    /** WQL expression. */
    search?: OffsetSearch;
}
interface OffsetSearch extends OffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can't be used together with 'cursor_paging'. */
    paging?: Paging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Projection on the result object - list of specific field names to return. If fieldsets are also specified, return the union of fieldsets and fields.
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /**
     * Projection on the result object - list of named projections. For example, "basic" will return ID and name fields. Specifying multiple fieldsets will return the union of fields from all. Specifying fieldsets and fields will also return the union of fields.
     * @maxLength 100
     * @maxSize 20
     */
    fieldsets?: string[];
    /**
     * Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition.
     * @maxSize 10
     */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome.
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. For example, `"2023-12-20T10:52:34.795Z"`.
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface OffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can't be used together with 'cursor_paging'. */
    paging?: Paging;
}
interface SearchInventoryItemsWithOffsetResponse {
    /** InventoryItems which satisfy the provided query. */
    inventoryItems?: InventoryItem[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: PagingMetadata;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface BulkDecrementInventoryItemsRequest {
    /**
     * Inventory item IDs and decrement data.
     * @minSize 1
     * @maxSize 300
     */
    decrementData: DecrementDataById[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface DecrementDataById {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId?: string;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkIncrementInventoryItemsRequest {
    /**
     * Inventory item IDs and increment data.
     * @minSize 1
     * @maxSize 300
     */
    incrementData: IncrementDataById[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface IncrementDataById {
    /**
     * Inventory item ID.
     * @format GUID
     */
    inventoryItemId?: string;
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDecrementInventoryItemsByVariantAndLocationRequest {
    /**
     * Variant and location IDs, as well as decrement data.
     * @minSize 1
     * @maxSize 300
     */
    decrementData: DecrementDataByVariantAndLocation[];
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface DecrementDataByVariantAndLocation {
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Location ID.
     * @format GUID
     */
    locationId?: string | null;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
    /**
     * Whether the request to decrement the inventory item's quantity was made as part of a purchase that includes preorder items.
     *
     * + If `true` and the item is available for preorder in the default location, negative inventory quantity is allowed.
     * + If `false` and the item is not available for preorder, negative inventory is not allowed.
     */
    preorderRequest?: boolean;
}
interface BulkDecrementInventoryItemsByVariantAndLocationResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkIncrementInventoryItemsByVariantAndLocationRequest {
    /**
     * Variant and location IDs, as well as increment data.
     * @minSize 1
     * @maxSize 300
     */
    incrementData: IncrementDataByVariantAndLocation[];
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface IncrementDataByVariantAndLocation {
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Location ID.
     * @format GUID
     */
    locationId?: string | null;
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
}
interface BulkIncrementInventoryItemsByVariantAndLocationResponse {
    /**
     * Inventory items updated by bulk action.
     * @minSize 1
     * @maxSize 300
     */
    results?: V3BulkInventoryItemResult[];
    /** Bulk action metadata details as: totalSuccess and totalFailure. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface BulkSetOrAdjustInventoryItemsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
    /** Action to adjust the inventory by. (e.g increment or decrement) */
    adjustedInventoryAction: AdjustInventoryAction;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
interface AdjustInventoryAction extends AdjustInventoryActionActionOneOf {
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
}
/** @oneof */
interface AdjustInventoryActionActionOneOf {
    /**
     * Amount to increment by.
     * @min 1
     * @max 99999
     */
    incrementBy?: number;
    /**
     * Amount to decrement by.
     * @min 1
     * @max 99999
     */
    decrementBy?: number;
}
interface BulkSetOrAdjustInventoryItemsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata.
     * @format GUID
     */
    jobId?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
interface InventoryItemCreatedEnvelope {
    entity: InventoryItem;
    metadata: EventMetadata;
}
interface InventoryItemDeletedEnvelope {
    entity: InventoryItem;
    metadata: EventMetadata;
}
interface InventoryItemStockStatusUpdatedEnvelope {
    data: InventoryItemStockStatusUpdatedEvent;
    metadata: EventMetadata;
}
interface InventoryItemUpdatedEnvelope {
    entity: InventoryItem;
    metadata: EventMetadata;
}
interface InventoryItemUpdatedWithReasonEnvelope {
    data: InventoryItemUpdatedWithReason;
    metadata: EventMetadata;
}
interface BulkCreateInventoryItemsOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface UpdateInventoryItem {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     * @min -99999
     * @max 99999
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    variantId?: string;
    /**
     * Stores location ID.
     * @format GUID
     * @immutable
     */
    locationId?: string | null;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatusWithLiterals;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
interface UpdateInventoryItemOptions {
    /** Reason for update. */
    reason?: ReasonTypeWithLiterals;
}
interface BulkUpdateInventoryItemsOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for update. */
    reason?: ReasonTypeWithLiterals;
}
interface BulkUpdateInventoryItemsByFilterOptions {
    /** Inventory item to update. */
    inventoryItem: InventoryItem;
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface InventoryItemsQueryResult extends QueryCursorResult {
    items: InventoryItem[];
    query: InventoryItemsQueryBuilder;
    next: () => Promise<InventoryItemsQueryResult>;
    prev: () => Promise<InventoryItemsQueryResult>;
}
interface InventoryItemsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'product.name' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'product.name' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'product.name' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'product.name' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'variantId' | 'locationId' | 'productId' | 'product.name' | 'product.variantName' | 'product.variantSku', value: string) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku', value: any[]) => InventoryItemsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'product.directCategoryIds', value: any[]) => InventoryItemsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku', value: any) => InventoryItemsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: 'inStock' | 'quantity' | '_id' | '_createdDate' | '_updatedDate' | 'variantId' | 'locationId' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku', value: boolean) => InventoryItemsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'inStock' | 'quantity' | '_createdDate' | '_updatedDate' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku'>) => InventoryItemsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'inStock' | 'quantity' | '_createdDate' | '_updatedDate' | 'productId' | 'trackQuantity' | 'availabilityStatus' | 'preorderInfo.enabled' | 'product.name' | 'product.directCategoryIds' | 'product.variantName' | 'product.variantSku'>) => InventoryItemsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => InventoryItemsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => InventoryItemsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<InventoryItemsQueryResult>;
}
interface SearchInventoryItemsOptions {
    /** Search options. */
    search?: CursorSearch;
}
interface BulkDecrementInventoryItemsOptions {
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface BulkIncrementInventoryItemsOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface BulkDecrementInventoryItemsByVariantAndLocationOptions {
    /**
     * Whether to allow negative inventory following this decrement action.
     *
     * Default: `false` (negative inventory is not allowed)
     */
    restrictInventory?: boolean | null;
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for decrement inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface BulkIncrementInventoryItemsByVariantAndLocationOptions {
    /**
     * Whether to return the full inventory item entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Reason for increment inventory action. */
    reason?: ReasonTypeWithLiterals;
}
interface BulkSetOrAdjustInventoryItemsByFilterOptions {
    /** Action to adjust the inventory by. (e.g increment or decrement) */
    adjustedInventoryAction: AdjustInventoryAction;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}

export { type Page as $, type InventoryItemUpdatedWithReasonEnvelope as A, type BulkCreateInventoryItemsOptions as B, AvailabilityStatus as C, type DecrementDataById as D, EventType as E, Mode as F, SortOrder as G, SortType as H, type InventoryItem as I, SortDirection as J, MissingValues as K, ScalarType as L, type MaskedInventoryItem as M, NestedAggregationType as N, Interval as O, AggregationType as P, type InventoryItemTrackingMethodOneOf as Q, ReasonType as R, type SearchInventoryItemsOptions as S, type PreorderInfo as T, type UpdateInventoryItem as U, type Product as V, WebhookIdentityType as W, type ExtendedFields as X, type InvalidateCache as Y, type InvalidateCacheGetByOneOf as Z, type App as _, type BulkCreateInventoryItemsResponse as a, type ScalarResult as a$, type URI as a0, type File as a1, type CustomTag as a2, type BulkInventoryItemAction as a3, type CreateInventoryItemRequest as a4, type CreateInventoryItemResponse as a5, type BulkCreateInventoryItemsRequest as a6, type V3BulkInventoryItemResult as a7, type ItemMetadata as a8, type ApplicationError as a9, type Aggregation as aA, type AggregationKindOneOf as aB, type RangeBucket as aC, type IncludeMissingValuesOptions as aD, type ValueAggregation as aE, type ValueAggregationOptionsOneOf as aF, type RangeAggregation as aG, type ScalarAggregation as aH, type DateHistogramAggregation as aI, type NestedAggregationItem as aJ, type NestedAggregationItemKindOneOf as aK, type NestedAggregation as aL, type GroupByAggregation as aM, type GroupByAggregationKindOneOf as aN, type CursorPagingMetadata as aO, type Cursors as aP, type AggregationData as aQ, type ValueAggregationResult as aR, type RangeAggregationResult as aS, type NestedAggregationResults as aT, type NestedAggregationResultsResultOneOf as aU, type ValueResults as aV, type RangeResults as aW, type AggregationResultsScalarResult as aX, type NestedValueAggregationResult as aY, type ValueResult as aZ, type RangeResult as a_, type BulkActionMetadata as aa, type GetInventoryItemRequest as ab, type GetInventoryItemResponse as ac, type UpdateInventoryItemRequest as ad, type UpdateInventoryItemResponse as ae, type InventoryItemStockStatusUpdatedEvent as af, type InventoryItemUpdatedWithReason as ag, type BulkUpdateInventoryItemsRequest as ah, type BulkUpdateInventoryItemsByFilterRequest as ai, type SearchDetails as aj, type DeleteInventoryItemRequest as ak, type DeleteInventoryItemResponse as al, type BulkDeleteInventoryItemsRequest as am, type BulkInventoryItemResult as an, type QueryInventoryItemsRequest as ao, type QueryV2 as ap, type QueryV2PagingMethodOneOf as aq, type Sorting as ar, type Paging as as, type CursorPaging as at, type QueryInventoryItemsResponse as au, type PlatformPagingMetadataV2 as av, type CommonCursors as aw, type SearchInventoryItemsRequest as ax, type CursorSearch as ay, type CursorSearchPagingMethodOneOf as az, type UpdateInventoryItemOptions as b, type NestedResultValue as b0, type NestedResultValueResultOneOf as b1, type Results as b2, type DateHistogramResult as b3, type GroupByValueResults as b4, type DateHistogramResults as b5, type NestedResults as b6, type AggregationResults as b7, type AggregationResultsResultOneOf as b8, type SearchInventoryItemsWithOffsetRequest as b9, type OffsetSearch as ba, type OffsetSearchPagingMethodOneOf as bb, type SearchInventoryItemsWithOffsetResponse as bc, type PagingMetadata as bd, type BulkDecrementInventoryItemsRequest as be, type BulkIncrementInventoryItemsRequest as bf, type BulkDecrementInventoryItemsByVariantAndLocationRequest as bg, type BulkIncrementInventoryItemsByVariantAndLocationRequest as bh, type DomainEvent as bi, type DomainEventBodyOneOf as bj, type EntityCreatedEvent as bk, type RestoreInfo as bl, type EntityUpdatedEvent as bm, type EntityDeletedEvent as bn, type ActionEvent as bo, type Empty as bp, type BulkSetOrAdjustInventoryItemsByFilterRequest as bq, type AdjustInventoryAction as br, type AdjustInventoryActionActionOneOf as bs, type MessageEnvelope as bt, type IdentificationData as bu, type IdentificationDataIdOneOf as bv, type BaseEventMetadata as bw, type EventMetadata as bx, type InventoryItemsQueryResult as by, type BulkUpdateInventoryItemsOptions as c, type BulkUpdateInventoryItemsResponse as d, type BulkUpdateInventoryItemsByFilterOptions as e, type BulkUpdateInventoryItemsByFilterResponse as f, type BulkDeleteInventoryItemsResponse as g, type InventoryItemsQueryBuilder as h, type SearchInventoryItemsResponse as i, type BulkDecrementInventoryItemsOptions as j, type BulkDecrementInventoryItemsResponse as k, type IncrementDataById as l, type BulkIncrementInventoryItemsOptions as m, type BulkIncrementInventoryItemsResponse as n, type DecrementDataByVariantAndLocation as o, type BulkDecrementInventoryItemsByVariantAndLocationOptions as p, type BulkDecrementInventoryItemsByVariantAndLocationResponse as q, type IncrementDataByVariantAndLocation as r, type BulkIncrementInventoryItemsByVariantAndLocationOptions as s, type BulkIncrementInventoryItemsByVariantAndLocationResponse as t, type BulkSetOrAdjustInventoryItemsByFilterOptions as u, type BulkSetOrAdjustInventoryItemsByFilterResponse as v, type InventoryItemCreatedEnvelope as w, type InventoryItemDeletedEnvelope as x, type InventoryItemStockStatusUpdatedEnvelope as y, type InventoryItemUpdatedEnvelope as z };
