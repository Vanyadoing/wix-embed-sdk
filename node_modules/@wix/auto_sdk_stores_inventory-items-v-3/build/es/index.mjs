// src/stores-catalog-v3-inventory-item-inventory-items-v-3.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/stores-catalog-v3-inventory-item-inventory-items-v-3.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v3-inventory-item-inventory-items-v-3.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/inventory",
        destPath: ""
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/inventory",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/inventory",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/inventory",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/inventory",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/inventory",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/inventory-items",
        destPath: "/v3/inventory-items"
      },
      {
        srcPath: "/stores/v3/bulk/inventory-items",
        destPath: "/v3/bulk/inventory-items"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/inventory",
        destPath: ""
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/inventory",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_inventory-items-v-3";
function createInventoryItem(payload) {
  function __createInventoryItem({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "inventoryItem.createdDate" },
          { path: "inventoryItem.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.CreateInventoryItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/inventory-items",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "inventoryItem.createdDate" },
            { path: "inventoryItem.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createInventoryItem;
}
function bulkCreateInventoryItems(payload) {
  function __bulkCreateInventoryItems({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "inventoryItems.createdDate" },
          { path: "inventoryItems.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkCreateInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateInventoryItems;
}
function getInventoryItem(payload) {
  function __getInventoryItem({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "GET",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.GetInventoryItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/inventory-items/{inventoryItemId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "inventoryItem.createdDate" },
            { path: "inventoryItem.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getInventoryItem;
}
function updateInventoryItem(payload) {
  function __updateInventoryItem({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "inventoryItem.createdDate" },
          { path: "inventoryItem.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "PATCH",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.UpdateInventoryItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/inventory-items/{inventoryItem.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "inventoryItem.createdDate" },
            { path: "inventoryItem.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateInventoryItem;
}
function bulkUpdateInventoryItems(payload) {
  function __bulkUpdateInventoryItems({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "inventoryItems.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "inventoryItems.inventoryItem.createdDate" },
          { path: "inventoryItems.inventoryItem.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkUpdateInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateInventoryItems;
}
function bulkUpdateInventoryItemsByFilter(payload) {
  function __bulkUpdateInventoryItemsByFilter({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "inventoryItem.createdDate" },
          { path: "inventoryItem.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkUpdateInventoryItemsByFilter",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/update-by-filter",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __bulkUpdateInventoryItemsByFilter;
}
function deleteInventoryItem(payload) {
  function __deleteInventoryItem({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "DELETE",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.DeleteInventoryItem",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/inventory-items/{inventoryItemId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteInventoryItem;
}
function bulkDeleteInventoryItems(payload) {
  function __bulkDeleteInventoryItems({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDeleteInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteInventoryItems;
}
function queryInventoryItems(payload) {
  function __queryInventoryItems({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.QueryInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/inventory-items/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "inventoryItems.createdDate" },
            { path: "inventoryItems.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryInventoryItems;
}
function searchInventoryItems(payload) {
  function __searchInventoryItems({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [
          { path: "search.aggregations.range.buckets.from" },
          { path: "search.aggregations.range.buckets.to" },
          {
            path: "search.aggregations.nested.nestedAggregations.range.buckets.from"
          },
          {
            path: "search.aggregations.nested.nestedAggregations.range.buckets.to"
          }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.SearchInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/inventory-items/search",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "inventoryItems.createdDate" },
            { path: "inventoryItems.updatedDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "aggregationData.results.ranges.results.from" },
            { path: "aggregationData.results.ranges.results.to" },
            {
              path: "aggregationData.results.groupedByValue.results.nestedResults.ranges.results.from"
            },
            {
              path: "aggregationData.results.groupedByValue.results.nestedResults.ranges.results.to"
            },
            {
              path: "aggregationData.results.nested.results.results.*.range.from"
            },
            {
              path: "aggregationData.results.nested.results.results.*.range.to"
            },
            { path: "aggregationData.results.scalar.value" },
            {
              path: "aggregationData.results.groupedByValue.results.nestedResults.scalar.value"
            },
            {
              path: "aggregationData.results.nested.results.results.*.scalar.value"
            }
          ]
        }
      ])
    };
    return metadata;
  }
  return __searchInventoryItems;
}
function bulkDecrementInventoryItems(payload) {
  function __bulkDecrementInventoryItems({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDecrementInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/decrement",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkDecrementInventoryItems;
}
function bulkIncrementInventoryItems(payload) {
  function __bulkIncrementInventoryItems({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkIncrementInventoryItems",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/increment",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkIncrementInventoryItems;
}
function bulkDecrementInventoryItemsByVariantAndLocation(payload) {
  function __bulkDecrementInventoryItemsByVariantAndLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDecrementInventoryItemsByVariantAndLocation",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/decrement-by-variant-and-location",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkDecrementInventoryItemsByVariantAndLocation;
}
function bulkIncrementInventoryItemsByVariantAndLocation(payload) {
  function __bulkIncrementInventoryItemsByVariantAndLocation({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkIncrementInventoryItemsByVariantAndLocation",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/increment-by-variant-and-location",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkIncrementInventoryItemsByVariantAndLocation;
}
function bulkSetOrAdjustInventoryItemsByFilter(payload) {
  function __bulkSetOrAdjustInventoryItemsByFilter({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.inventory_item",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkSetOrAdjustInventoryItemsByFilter",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
        protoPath: "/v3/bulk/inventory-items/set-or-adjust-by-filter",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkSetOrAdjustInventoryItemsByFilter;
}

// src/stores-catalog-v3-inventory-item-inventory-items-v-3.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var AvailabilityStatus = /* @__PURE__ */ ((AvailabilityStatus2) => {
  AvailabilityStatus2["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
  AvailabilityStatus2["OUT_OF_STOCK"] = "OUT_OF_STOCK";
  AvailabilityStatus2["IN_STOCK"] = "IN_STOCK";
  AvailabilityStatus2["PREORDER"] = "PREORDER";
  return AvailabilityStatus2;
})(AvailabilityStatus || {});
var EventType = /* @__PURE__ */ ((EventType2) => {
  EventType2["UNKNOWN"] = "UNKNOWN";
  EventType2["CREATED"] = "CREATED";
  EventType2["UPDATED"] = "UPDATED";
  EventType2["DELETED"] = "DELETED";
  return EventType2;
})(EventType || {});
var ReasonType = /* @__PURE__ */ ((ReasonType2) => {
  ReasonType2["UNKNOWN"] = "UNKNOWN";
  ReasonType2["ORDER"] = "ORDER";
  ReasonType2["MANUAL"] = "MANUAL";
  ReasonType2["REVERT_INVENTORY_CHANGE"] = "REVERT_INVENTORY_CHANGE";
  return ReasonType2;
})(ReasonType || {});
var Mode = /* @__PURE__ */ ((Mode2) => {
  Mode2["OR"] = "OR";
  Mode2["AND"] = "AND";
  return Mode2;
})(Mode || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var SortType = /* @__PURE__ */ ((SortType2) => {
  SortType2["COUNT"] = "COUNT";
  SortType2["VALUE"] = "VALUE";
  return SortType2;
})(SortType || {});
var SortDirection = /* @__PURE__ */ ((SortDirection2) => {
  SortDirection2["DESC"] = "DESC";
  SortDirection2["ASC"] = "ASC";
  return SortDirection2;
})(SortDirection || {});
var MissingValues = /* @__PURE__ */ ((MissingValues2) => {
  MissingValues2["EXCLUDE"] = "EXCLUDE";
  MissingValues2["INCLUDE"] = "INCLUDE";
  return MissingValues2;
})(MissingValues || {});
var ScalarType = /* @__PURE__ */ ((ScalarType2) => {
  ScalarType2["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
  ScalarType2["COUNT_DISTINCT"] = "COUNT_DISTINCT";
  ScalarType2["MIN"] = "MIN";
  ScalarType2["MAX"] = "MAX";
  return ScalarType2;
})(ScalarType || {});
var NestedAggregationType = /* @__PURE__ */ ((NestedAggregationType2) => {
  NestedAggregationType2["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
  NestedAggregationType2["VALUE"] = "VALUE";
  NestedAggregationType2["RANGE"] = "RANGE";
  NestedAggregationType2["SCALAR"] = "SCALAR";
  NestedAggregationType2["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
  return NestedAggregationType2;
})(NestedAggregationType || {});
var Interval = /* @__PURE__ */ ((Interval2) => {
  Interval2["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
  Interval2["YEAR"] = "YEAR";
  Interval2["MONTH"] = "MONTH";
  Interval2["WEEK"] = "WEEK";
  Interval2["DAY"] = "DAY";
  Interval2["HOUR"] = "HOUR";
  Interval2["MINUTE"] = "MINUTE";
  Interval2["SECOND"] = "SECOND";
  return Interval2;
})(Interval || {});
var AggregationType = /* @__PURE__ */ ((AggregationType2) => {
  AggregationType2["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
  AggregationType2["VALUE"] = "VALUE";
  AggregationType2["RANGE"] = "RANGE";
  AggregationType2["SCALAR"] = "SCALAR";
  AggregationType2["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
  AggregationType2["NESTED"] = "NESTED";
  return AggregationType2;
})(AggregationType || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createInventoryItem2(inventoryItem) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItem
  });
  const reqOpts = createInventoryItem(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.inventoryItem;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { inventoryItem: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["inventoryItem"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkCreateInventoryItems2(inventoryItems, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItems,
    returnEntity: options?.returnEntity
  });
  const reqOpts = bulkCreateInventoryItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          inventoryItems: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["inventoryItems", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getInventoryItem2(inventoryItemId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItemId
  });
  const reqOpts = getInventoryItem(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.inventoryItem;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { inventoryItemId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["inventoryItemId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateInventoryItem2(_id, inventoryItem, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItem: { ...inventoryItem, id: _id },
    reason: options?.reason
  });
  const reqOpts = updateInventoryItem(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.inventoryItem;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { inventoryItem: "$[1]" },
        explicitPathsToArguments: {
          "inventoryItem.id": "$[0]",
          reason: "$[2].reason"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "inventoryItem", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateInventoryItems2(inventoryItems, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItems,
    returnEntity: options?.returnEntity,
    reason: options?.reason
  });
  const reqOpts = bulkUpdateInventoryItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          inventoryItems: "$[0]",
          returnEntity: "$[1].returnEntity",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["inventoryItems", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateInventoryItemsByFilter2(filter, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    filter,
    inventoryItem: options?.inventoryItem,
    search: options?.search
  });
  const reqOpts = bulkUpdateInventoryItemsByFilter(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          filter: "$[0]",
          inventoryItem: "$[1].inventoryItem",
          search: "$[1].search"
        },
        singleArgumentUnchanged: false
      },
      ["filter", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteInventoryItem2(inventoryItemId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItemId
  });
  const reqOpts = deleteInventoryItem(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { inventoryItemId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["inventoryItemId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteInventoryItems2(inventoryItemIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    inventoryItemIds
  });
  const reqOpts = bulkDeleteInventoryItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { inventoryItemIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["inventoryItemIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryInventoryItems2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryInventoryItems(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.inventoryItems,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function searchInventoryItems2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    search: options?.search
  });
  const reqOpts = searchInventoryItems(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { search: "$[0].search" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDecrementInventoryItems2(decrementData, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    decrementData,
    restrictInventory: options?.restrictInventory,
    returnEntity: options?.returnEntity,
    reason: options?.reason
  });
  const reqOpts = bulkDecrementInventoryItems(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          decrementData: "$[0]",
          restrictInventory: "$[1].restrictInventory",
          returnEntity: "$[1].returnEntity",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["decrementData", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkIncrementInventoryItems2(incrementData, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    incrementData,
    returnEntity: options?.returnEntity,
    reason: options?.reason
  });
  const reqOpts = bulkIncrementInventoryItems(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          incrementData: "$[0]",
          returnEntity: "$[1].returnEntity",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["incrementData", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDecrementInventoryItemsByVariantAndLocation2(decrementData, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    decrementData,
    restrictInventory: options?.restrictInventory,
    returnEntity: options?.returnEntity,
    reason: options?.reason
  });
  const reqOpts = bulkDecrementInventoryItemsByVariantAndLocation(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          decrementData: "$[0]",
          restrictInventory: "$[1].restrictInventory",
          returnEntity: "$[1].returnEntity",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["decrementData", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkIncrementInventoryItemsByVariantAndLocation2(incrementData, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    incrementData,
    returnEntity: options?.returnEntity,
    reason: options?.reason
  });
  const reqOpts = bulkIncrementInventoryItemsByVariantAndLocation(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          incrementData: "$[0]",
          returnEntity: "$[1].returnEntity",
          reason: "$[1].reason"
        },
        singleArgumentUnchanged: false
      },
      ["incrementData", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkSetOrAdjustInventoryItemsByFilter2(filter, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    filter,
    adjustedInventoryAction: options?.adjustedInventoryAction,
    search: options?.search
  });
  const reqOpts = bulkSetOrAdjustInventoryItemsByFilter(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          filter: "$[0]",
          adjustedInventoryAction: "$[1].adjustedInventoryAction",
          search: "$[1].search"
        },
        singleArgumentUnchanged: false
      },
      ["filter", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v3-inventory-item-inventory-items-v-3.public.ts
function createInventoryItem3(httpClient) {
  return (inventoryItem) => createInventoryItem2(
    inventoryItem,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreateInventoryItems3(httpClient) {
  return (inventoryItems, options) => bulkCreateInventoryItems2(
    inventoryItems,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getInventoryItem3(httpClient) {
  return (inventoryItemId) => getInventoryItem2(
    inventoryItemId,
    // @ts-ignore
    { httpClient }
  );
}
function updateInventoryItem3(httpClient) {
  return (_id, inventoryItem, options) => updateInventoryItem2(
    _id,
    inventoryItem,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateInventoryItems3(httpClient) {
  return (inventoryItems, options) => bulkUpdateInventoryItems2(
    inventoryItems,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateInventoryItemsByFilter3(httpClient) {
  return (filter, options) => bulkUpdateInventoryItemsByFilter2(
    filter,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteInventoryItem3(httpClient) {
  return (inventoryItemId) => deleteInventoryItem2(
    inventoryItemId,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteInventoryItems3(httpClient) {
  return (inventoryItemIds) => bulkDeleteInventoryItems2(
    inventoryItemIds,
    // @ts-ignore
    { httpClient }
  );
}
function queryInventoryItems3(httpClient) {
  return () => queryInventoryItems2(
    // @ts-ignore
    { httpClient }
  );
}
function searchInventoryItems3(httpClient) {
  return (options) => searchInventoryItems2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDecrementInventoryItems3(httpClient) {
  return (decrementData, options) => bulkDecrementInventoryItems2(
    decrementData,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkIncrementInventoryItems3(httpClient) {
  return (incrementData, options) => bulkIncrementInventoryItems2(
    incrementData,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDecrementInventoryItemsByVariantAndLocation3(httpClient) {
  return (decrementData, options) => bulkDecrementInventoryItemsByVariantAndLocation2(
    decrementData,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkIncrementInventoryItemsByVariantAndLocation3(httpClient) {
  return (incrementData, options) => bulkIncrementInventoryItemsByVariantAndLocation2(
    incrementData,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkSetOrAdjustInventoryItemsByFilter3(httpClient) {
  return (filter, options) => bulkSetOrAdjustInventoryItemsByFilter2(
    filter,
    options,
    // @ts-ignore
    { httpClient }
  );
}
var onInventoryItemCreated = EventDefinition(
  "wix.stores.catalog.v3.inventory_item_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onInventoryItemDeleted = EventDefinition(
  "wix.stores.catalog.v3.inventory_item_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onInventoryItemStockStatusUpdated = EventDefinition(
  "wix.stores.catalog.v3.inventory_item_stock_status_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [{ path: "metadata.eventTime" }]
      }
    ])
  )
)();
var onInventoryItemUpdated = EventDefinition(
  "wix.stores.catalog.v3.inventory_item_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onInventoryItemUpdatedWithReason = EventDefinition(
  "wix.stores.catalog.v3.inventory_item_updated_with_reason",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "data.currentEntity.createdDate" },
          { path: "data.currentEntity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/stores-catalog-v3-inventory-item-inventory-items-v-3.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createInventoryItem4 = /* @__PURE__ */ createRESTModule(createInventoryItem3);
var bulkCreateInventoryItems4 = /* @__PURE__ */ createRESTModule(bulkCreateInventoryItems3);
var getInventoryItem4 = /* @__PURE__ */ createRESTModule(getInventoryItem3);
var updateInventoryItem4 = /* @__PURE__ */ createRESTModule(updateInventoryItem3);
var bulkUpdateInventoryItems4 = /* @__PURE__ */ createRESTModule(bulkUpdateInventoryItems3);
var bulkUpdateInventoryItemsByFilter4 = /* @__PURE__ */ createRESTModule(bulkUpdateInventoryItemsByFilter3);
var deleteInventoryItem4 = /* @__PURE__ */ createRESTModule(deleteInventoryItem3);
var bulkDeleteInventoryItems4 = /* @__PURE__ */ createRESTModule(bulkDeleteInventoryItems3);
var queryInventoryItems4 = /* @__PURE__ */ createRESTModule(queryInventoryItems3);
var searchInventoryItems4 = /* @__PURE__ */ createRESTModule(searchInventoryItems3);
var bulkDecrementInventoryItems4 = /* @__PURE__ */ createRESTModule(bulkDecrementInventoryItems3);
var bulkIncrementInventoryItems4 = /* @__PURE__ */ createRESTModule(bulkIncrementInventoryItems3);
var bulkDecrementInventoryItemsByVariantAndLocation4 = /* @__PURE__ */ createRESTModule(
  bulkDecrementInventoryItemsByVariantAndLocation3
);
var bulkIncrementInventoryItemsByVariantAndLocation4 = /* @__PURE__ */ createRESTModule(
  bulkIncrementInventoryItemsByVariantAndLocation3
);
var bulkSetOrAdjustInventoryItemsByFilter4 = /* @__PURE__ */ createRESTModule(bulkSetOrAdjustInventoryItemsByFilter3);
var onInventoryItemCreated2 = createEventModule(onInventoryItemCreated);
var onInventoryItemDeleted2 = createEventModule(onInventoryItemDeleted);
var onInventoryItemStockStatusUpdated2 = createEventModule(onInventoryItemStockStatusUpdated);
var onInventoryItemUpdated2 = createEventModule(onInventoryItemUpdated);
var onInventoryItemUpdatedWithReason2 = createEventModule(onInventoryItemUpdatedWithReason);
export {
  AggregationType,
  AvailabilityStatus,
  EventType,
  Interval,
  MissingValues,
  Mode,
  NestedAggregationType,
  ReasonType,
  ScalarType,
  SortDirection,
  SortOrder,
  SortType,
  WebhookIdentityType,
  bulkCreateInventoryItems4 as bulkCreateInventoryItems,
  bulkDecrementInventoryItems4 as bulkDecrementInventoryItems,
  bulkDecrementInventoryItemsByVariantAndLocation4 as bulkDecrementInventoryItemsByVariantAndLocation,
  bulkDeleteInventoryItems4 as bulkDeleteInventoryItems,
  bulkIncrementInventoryItems4 as bulkIncrementInventoryItems,
  bulkIncrementInventoryItemsByVariantAndLocation4 as bulkIncrementInventoryItemsByVariantAndLocation,
  bulkSetOrAdjustInventoryItemsByFilter4 as bulkSetOrAdjustInventoryItemsByFilter,
  bulkUpdateInventoryItems4 as bulkUpdateInventoryItems,
  bulkUpdateInventoryItemsByFilter4 as bulkUpdateInventoryItemsByFilter,
  createInventoryItem4 as createInventoryItem,
  deleteInventoryItem4 as deleteInventoryItem,
  getInventoryItem4 as getInventoryItem,
  onInventoryItemCreated2 as onInventoryItemCreated,
  onInventoryItemDeleted2 as onInventoryItemDeleted,
  onInventoryItemStockStatusUpdated2 as onInventoryItemStockStatusUpdated,
  onInventoryItemUpdated2 as onInventoryItemUpdated,
  onInventoryItemUpdatedWithReason2 as onInventoryItemUpdatedWithReason,
  queryInventoryItems4 as queryInventoryItems,
  searchInventoryItems4 as searchInventoryItems,
  updateInventoryItem4 as updateInventoryItem
};
//# sourceMappingURL=index.mjs.map