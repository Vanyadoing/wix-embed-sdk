import { HttpClient, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { I as InventoryItem, B as BulkCreateInventoryItemsOptions, a as BulkCreateInventoryItemsResponse, U as UpdateInventoryItem, b as UpdateInventoryItemOptions, M as MaskedInventoryItem, c as BulkUpdateInventoryItemsOptions, d as BulkUpdateInventoryItemsResponse, e as BulkUpdateInventoryItemsByFilterOptions, f as BulkUpdateInventoryItemsByFilterResponse, g as BulkDeleteInventoryItemsResponse, h as InventoryItemsQueryBuilder, S as SearchInventoryItemsOptions, i as SearchInventoryItemsResponse, D as DecrementDataById, j as BulkDecrementInventoryItemsOptions, k as BulkDecrementInventoryItemsResponse, l as IncrementDataById, m as BulkIncrementInventoryItemsOptions, n as BulkIncrementInventoryItemsResponse, o as DecrementDataByVariantAndLocation, p as BulkDecrementInventoryItemsByVariantAndLocationOptions, q as BulkDecrementInventoryItemsByVariantAndLocationResponse, r as IncrementDataByVariantAndLocation, s as BulkIncrementInventoryItemsByVariantAndLocationOptions, t as BulkIncrementInventoryItemsByVariantAndLocationResponse, u as InventoryItemCreatedEnvelope, v as InventoryItemDeletedEnvelope, w as InventoryItemStockStatusUpdatedEnvelope, x as InventoryItemUpdatedEnvelope, y as InventoryItemUpdatedWithReasonEnvelope } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal-Dp3gKToO.mjs';
export { bm as ActionEvent, bp as AdjustInventoryAction, bq as AdjustInventoryActionActionOneOf, ay as Aggregation, aO as AggregationData, az as AggregationKindOneOf, b5 as AggregationResults, b6 as AggregationResultsResultOneOf, aV as AggregationResultsScalarResult, L as AggregationType, Y as App, a7 as ApplicationError, A as AvailabilityStatus, bv as BaseEventMetadata, a8 as BulkActionMetadata, a4 as BulkCreateInventoryItemsRequest, be as BulkDecrementInventoryItemsByVariantAndLocationRequest, bc as BulkDecrementInventoryItemsRequest, ak as BulkDeleteInventoryItemsRequest, bf as BulkIncrementInventoryItemsByVariantAndLocationRequest, bd as BulkIncrementInventoryItemsRequest, a1 as BulkInventoryItemAction, al as BulkInventoryItemResult, by as BulkSetOrAdjustInventoryItemsByFilterOptions, bo as BulkSetOrAdjustInventoryItemsByFilterRequest, br as BulkSetOrAdjustInventoryItemsByFilterResponse, ag as BulkUpdateInventoryItemsByFilterRequest, af as BulkUpdateInventoryItemsRequest, au as CommonCursors, a2 as CreateInventoryItemRequest, a3 as CreateInventoryItemResponse, ar as CursorPaging, aM as CursorPagingMetadata, aw as CursorSearch, ax as CursorSearchPagingMethodOneOf, aN as Cursors, a0 as CustomTag, aG as DateHistogramAggregation, b1 as DateHistogramResult, b3 as DateHistogramResults, ai as DeleteInventoryItemRequest, aj as DeleteInventoryItemResponse, bg as DomainEvent, bh as DomainEventBodyOneOf, bn as Empty, bi as EntityCreatedEvent, bl as EntityDeletedEvent, bk as EntityUpdatedEvent, bw as EventMetadata, E as EventType, T as ExtendedFields, $ as File, a9 as GetInventoryItemRequest, aa as GetInventoryItemResponse, aK as GroupByAggregation, aL as GroupByAggregationKindOneOf, b2 as GroupByValueResults, bt as IdentificationData, bu as IdentificationDataIdOneOf, aB as IncludeMissingValuesOptions, K as Interval, V as InvalidateCache, X as InvalidateCacheGetByOneOf, ad as InventoryItemStockStatusUpdatedEvent, O as InventoryItemTrackingMethodOneOf, ae as InventoryItemUpdatedWithReason, bx as InventoryItemsQueryResult, a6 as ItemMetadata, bs as MessageEnvelope, H as MissingValues, z as Mode, aJ as NestedAggregation, aH as NestedAggregationItem, aI as NestedAggregationItemKindOneOf, aR as NestedAggregationResults, aS as NestedAggregationResultsResultOneOf, N as NestedAggregationType, a_ as NestedResultValue, a$ as NestedResultValueResultOneOf, b4 as NestedResults, aW as NestedValueAggregationResult, b8 as OffsetSearch, b9 as OffsetSearchPagingMethodOneOf, Z as Page, aq as Paging, bb as PagingMetadata, at as PlatformPagingMetadataV2, P as PreorderInfo, Q as Product, am as QueryInventoryItemsRequest, as as QueryInventoryItemsResponse, an as QueryV2, ao as QueryV2PagingMethodOneOf, aE as RangeAggregation, aQ as RangeAggregationResult, aA as RangeBucket, aY as RangeResult, aU as RangeResults, R as ReasonType, bj as RestoreInfo, b0 as Results, aF as ScalarAggregation, aZ as ScalarResult, J as ScalarType, ah as SearchDetails, av as SearchInventoryItemsRequest, b7 as SearchInventoryItemsWithOffsetRequest, ba as SearchInventoryItemsWithOffsetResponse, G as SortDirection, C as SortOrder, F as SortType, ap as Sorting, _ as URI, ab as UpdateInventoryItemRequest, ac as UpdateInventoryItemResponse, a5 as V3BulkInventoryItemResult, aC as ValueAggregation, aD as ValueAggregationOptionsOneOf, aP as ValueAggregationResult, aX as ValueResult, aT as ValueResults, W as WebhookIdentityType } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal-Dp3gKToO.mjs';

declare function createInventoryItem$1(httpClient: HttpClient): CreateInventoryItemSignature;
interface CreateInventoryItemSignature {
    /**
     * Creates an inventory item.
     * The combination of `variantId` and `locationId` is unique.
     * @param - Inventory item to create.
     * @returns Created inventory item.
     */
    (inventoryItem: InventoryItem): Promise<InventoryItem>;
}
declare function bulkCreateInventoryItems$1(httpClient: HttpClient): BulkCreateInventoryItemsSignature;
interface BulkCreateInventoryItemsSignature {
    /**
     * Creates multiple inventory items.
     * @param - Inventory items to create.
     */
    (inventoryItems: InventoryItem[], options?: BulkCreateInventoryItemsOptions | undefined): Promise<BulkCreateInventoryItemsResponse>;
}
declare function getInventoryItem$1(httpClient: HttpClient): GetInventoryItemSignature;
interface GetInventoryItemSignature {
    /**
     * Retrieves an inventory item.
     * @param - Inventory item ID.
     * @returns Inventory item.
     */
    (inventoryItemId: string): Promise<InventoryItem>;
}
declare function updateInventoryItem$1(httpClient: HttpClient): UpdateInventoryItemSignature;
interface UpdateInventoryItemSignature {
    /**
     * Updates an inventory item.
     *
     *
     * Each time the inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Inventory item ID.
     * @returns Updated inventory item.
     */
    (_id: string, inventoryItem: UpdateInventoryItem, options?: UpdateInventoryItemOptions | undefined): Promise<InventoryItem>;
}
declare function bulkUpdateInventoryItems$1(httpClient: HttpClient): BulkUpdateInventoryItemsSignature;
interface BulkUpdateInventoryItemsSignature {
    /**
     * Updates multiple inventory items.
     *
     * Each time an inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Inventory items to update.
     */
    (inventoryItems: MaskedInventoryItem[], options?: BulkUpdateInventoryItemsOptions | undefined): Promise<BulkUpdateInventoryItemsResponse>;
}
declare function bulkUpdateInventoryItemsByFilter$1(httpClient: HttpClient): BulkUpdateInventoryItemsByFilterSignature;
interface BulkUpdateInventoryItemsByFilterSignature {
    /**
     * Updates multiple inventory items, given the provided filter.
     *
     * Each time an inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Filter object.
     */
    (filter: Record<string, any>, options?: BulkUpdateInventoryItemsByFilterOptions | undefined): Promise<BulkUpdateInventoryItemsByFilterResponse>;
}
declare function deleteInventoryItem$1(httpClient: HttpClient): DeleteInventoryItemSignature;
interface DeleteInventoryItemSignature {
    /**
     * Deletes an inventory item.
     * @param - Inventory item ID.
     */
    (inventoryItemId: string): Promise<void>;
}
declare function bulkDeleteInventoryItems$1(httpClient: HttpClient): BulkDeleteInventoryItemsSignature;
interface BulkDeleteInventoryItemsSignature {
    /**
     * Deletes multiple inventory items.
     * @param - IDs of inventory items to delete.
     */
    (inventoryItemIds: string[]): Promise<BulkDeleteInventoryItemsResponse>;
}
declare function queryInventoryItems$1(httpClient: HttpClient): QueryInventoryItemsSignature;
interface QueryInventoryItemsSignature {
    /**
     * Retrieves a list of up to 1,000 inventory items, given the provided filtering, sorting, and cursor paging.
     *
     * For field support for filters and sorting,
     * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (): InventoryItemsQueryBuilder;
}
declare function searchInventoryItems$1(httpClient: HttpClient): SearchInventoryItemsSignature;
interface SearchInventoryItemsSignature {
    /**
     * Retrieves a list of inventory items, given the provided filtering, sorting, and cursor paging.
     *
     *
     * Search Inventory Items runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: SearchInventoryItemsOptions | undefined): Promise<SearchInventoryItemsResponse>;
}
declare function bulkDecrementInventoryItems$1(httpClient: HttpClient): BulkDecrementInventoryItemsSignature;
interface BulkDecrementInventoryItemsSignature {
    /**
     * Decrements quantities of multiple inventory items.
     *
     * > **Notes:**:
     * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
     * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
     * > + Pass `restrictInventory: false` to allow for negative quantities.
     * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
     * @param - Inventory item IDs and decrement data.
     */
    (decrementData: DecrementDataById[], options?: BulkDecrementInventoryItemsOptions | undefined): Promise<BulkDecrementInventoryItemsResponse>;
}
declare function bulkIncrementInventoryItems$1(httpClient: HttpClient): BulkIncrementInventoryItemsSignature;
interface BulkIncrementInventoryItemsSignature {
    /**
     * Increments quantities of multiple inventory items.
     *
     * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
     * @param - Inventory item IDs and increment data.
     */
    (incrementData: IncrementDataById[], options?: BulkIncrementInventoryItemsOptions | undefined): Promise<BulkIncrementInventoryItemsResponse>;
}
declare function bulkDecrementInventoryItemsByVariantAndLocation$1(httpClient: HttpClient): BulkDecrementInventoryItemsByVariantAndLocationSignature;
interface BulkDecrementInventoryItemsByVariantAndLocationSignature {
    /**
     * Decrements quantities of multiple inventory items by variant and location.
     *
     * > **Notes:**:
     * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
     * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
     * > + Pass `restrictInventory: false` to allow for negative quantities.
     * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
     * @param - Variant and location IDs, as well as decrement data.
     */
    (decrementData: DecrementDataByVariantAndLocation[], options?: BulkDecrementInventoryItemsByVariantAndLocationOptions | undefined): Promise<BulkDecrementInventoryItemsByVariantAndLocationResponse>;
}
declare function bulkIncrementInventoryItemsByVariantAndLocation$1(httpClient: HttpClient): BulkIncrementInventoryItemsByVariantAndLocationSignature;
interface BulkIncrementInventoryItemsByVariantAndLocationSignature {
    /**
     * Increments quantities of multiple inventory items by variant and location.
     *
     * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
     * @param - Variant and location IDs, as well as increment data.
     */
    (incrementData: IncrementDataByVariantAndLocation[], options?: BulkIncrementInventoryItemsByVariantAndLocationOptions | undefined): Promise<BulkIncrementInventoryItemsByVariantAndLocationResponse>;
}
declare const onInventoryItemCreated$1: EventDefinition<InventoryItemCreatedEnvelope, "wix.stores.catalog.v3.inventory_item_created">;
declare const onInventoryItemDeleted$1: EventDefinition<InventoryItemDeletedEnvelope, "wix.stores.catalog.v3.inventory_item_deleted">;
declare const onInventoryItemStockStatusUpdated$1: EventDefinition<InventoryItemStockStatusUpdatedEnvelope, "wix.stores.catalog.v3.inventory_item_stock_status_updated">;
declare const onInventoryItemUpdated$1: EventDefinition<InventoryItemUpdatedEnvelope, "wix.stores.catalog.v3.inventory_item_updated">;
declare const onInventoryItemUpdatedWithReason$1: EventDefinition<InventoryItemUpdatedWithReasonEnvelope, "wix.stores.catalog.v3.inventory_item_updated_with_reason">;

declare const createInventoryItem: MaybeContext<BuildRESTFunction<typeof createInventoryItem$1> & typeof createInventoryItem$1>;
declare const bulkCreateInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkCreateInventoryItems$1> & typeof bulkCreateInventoryItems$1>;
declare const getInventoryItem: MaybeContext<BuildRESTFunction<typeof getInventoryItem$1> & typeof getInventoryItem$1>;
declare const updateInventoryItem: MaybeContext<BuildRESTFunction<typeof updateInventoryItem$1> & typeof updateInventoryItem$1>;
declare const bulkUpdateInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkUpdateInventoryItems$1> & typeof bulkUpdateInventoryItems$1>;
declare const bulkUpdateInventoryItemsByFilter: MaybeContext<BuildRESTFunction<typeof bulkUpdateInventoryItemsByFilter$1> & typeof bulkUpdateInventoryItemsByFilter$1>;
declare const deleteInventoryItem: MaybeContext<BuildRESTFunction<typeof deleteInventoryItem$1> & typeof deleteInventoryItem$1>;
declare const bulkDeleteInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkDeleteInventoryItems$1> & typeof bulkDeleteInventoryItems$1>;
declare const queryInventoryItems: MaybeContext<BuildRESTFunction<typeof queryInventoryItems$1> & typeof queryInventoryItems$1>;
declare const searchInventoryItems: MaybeContext<BuildRESTFunction<typeof searchInventoryItems$1> & typeof searchInventoryItems$1>;
declare const bulkDecrementInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkDecrementInventoryItems$1> & typeof bulkDecrementInventoryItems$1>;
declare const bulkIncrementInventoryItems: MaybeContext<BuildRESTFunction<typeof bulkIncrementInventoryItems$1> & typeof bulkIncrementInventoryItems$1>;
declare const bulkDecrementInventoryItemsByVariantAndLocation: MaybeContext<BuildRESTFunction<typeof bulkDecrementInventoryItemsByVariantAndLocation$1> & typeof bulkDecrementInventoryItemsByVariantAndLocation$1>;
declare const bulkIncrementInventoryItemsByVariantAndLocation: MaybeContext<BuildRESTFunction<typeof bulkIncrementInventoryItemsByVariantAndLocation$1> & typeof bulkIncrementInventoryItemsByVariantAndLocation$1>;
/**
 * Triggered when an inventory item is created.
 */
declare const onInventoryItemCreated: BuildEventDefinition<typeof onInventoryItemCreated$1>;
/**
 * Triggered when an inventory item is deleted.
 */
declare const onInventoryItemDeleted: BuildEventDefinition<typeof onInventoryItemDeleted$1>;
/**
 * Triggered when an inventory item's stock is updated.
 */
declare const onInventoryItemStockStatusUpdated: BuildEventDefinition<typeof onInventoryItemStockStatusUpdated$1>;
/**
 * Triggered when an inventory item is updated.
 */
declare const onInventoryItemUpdated: BuildEventDefinition<typeof onInventoryItemUpdated$1>;
/**
 * Triggered when an inventory item is updated.
 */
declare const onInventoryItemUpdatedWithReason: BuildEventDefinition<typeof onInventoryItemUpdatedWithReason$1>;

export { BulkCreateInventoryItemsOptions, BulkCreateInventoryItemsResponse, BulkDecrementInventoryItemsByVariantAndLocationOptions, BulkDecrementInventoryItemsByVariantAndLocationResponse, BulkDecrementInventoryItemsOptions, BulkDecrementInventoryItemsResponse, BulkDeleteInventoryItemsResponse, BulkIncrementInventoryItemsByVariantAndLocationOptions, BulkIncrementInventoryItemsByVariantAndLocationResponse, BulkIncrementInventoryItemsOptions, BulkIncrementInventoryItemsResponse, BulkUpdateInventoryItemsByFilterOptions, BulkUpdateInventoryItemsByFilterResponse, BulkUpdateInventoryItemsOptions, BulkUpdateInventoryItemsResponse, DecrementDataById, DecrementDataByVariantAndLocation, IncrementDataById, IncrementDataByVariantAndLocation, InventoryItem, InventoryItemCreatedEnvelope, InventoryItemDeletedEnvelope, InventoryItemStockStatusUpdatedEnvelope, InventoryItemUpdatedEnvelope, InventoryItemUpdatedWithReasonEnvelope, InventoryItemsQueryBuilder, MaskedInventoryItem, SearchInventoryItemsOptions, SearchInventoryItemsResponse, UpdateInventoryItem, UpdateInventoryItemOptions, bulkCreateInventoryItems, bulkDecrementInventoryItems, bulkDecrementInventoryItemsByVariantAndLocation, bulkDeleteInventoryItems, bulkIncrementInventoryItems, bulkIncrementInventoryItemsByVariantAndLocation, bulkUpdateInventoryItems, bulkUpdateInventoryItemsByFilter, createInventoryItem, deleteInventoryItem, getInventoryItem, onInventoryItemCreated, onInventoryItemDeleted, onInventoryItemStockStatusUpdated, onInventoryItemUpdated, onInventoryItemUpdatedWithReason, queryInventoryItems, searchInventoryItems, updateInventoryItem };
