import { K as CreateCustomizationRequest$1, L as CreateCustomizationResponse$1, N as GetCustomizationRequest$1, O as GetCustomizationResponse$1, T as UpdateCustomizationRequest$1, V as UpdateCustomizationResponse$1, X as DeleteCustomizationRequest$1, Y as DeleteCustomizationResponse$1, Z as QueryCustomizationsRequest$1, a2 as QueryCustomizationsResponse$1, a5 as BulkCreateCustomizationsRequest$1, c as BulkCreateCustomizationsResponse$1, ab as AddCustomizationChoicesRequest$1, e as AddCustomizationChoicesResponse$1, ac as SetCustomizationChoicesRequest$1, f as SetCustomizationChoicesResponse$1, ad as RemoveCustomizationChoicesRequest$1, g as RemoveCustomizationChoicesResponse$1, ae as BulkAddCustomizationChoicesRequest$1, j as BulkAddCustomizationChoicesResponse$1, af as BulkUpdateCustomizationsRequest$1, l as BulkUpdateCustomizationsResponse$1 } from './stores-catalog-v3-customization-customizations-v-3.universal-CT4feroB.js';

/**
 * Customizations include options and modifiers which can later be applied to products.
 * Options are designed to add variations to a product, where modifiers add a customizable change to the product but without creating another variant.
 */
interface Customization extends CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     * @immutable
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
    /**
     * Customization ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the customization is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the customization.
     *
     * Ignored when creating a customization.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the customization was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the customization was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Customization name for options (for example, `"color"`, `"size"`) and modifiers (for example, `"greeting card"`).
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Customization type.
     * @immutable
     */
    customizationType?: CustomizationTypeWithLiterals;
    /**
     * Customization render type.
     *
     * Defines how the customization will be displayed in the storefront.
     * @immutable
     */
    customizationRenderType?: CustomizationRenderTypeWithLiterals;
    /**
     * Number of products this customization is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Customizations API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
/** @oneof */
interface CustomizationCustomizationSettingsOneOf {
    /**
     * Free text input settings.
     *
     * > **Note:** To be passed along with `customizationRenderType: FREE_TEXT`.
     * @immutable
     */
    freeTextInput?: FreeTextSettings;
    /**
     * Choices settings.
     *
     * > **Note:** Must be passed along with `customizationRenderType` of `SWATCH_CHOICES` and `TEXT_CHOICES`.
     */
    choicesSettings?: ChoicesSettings;
}
declare enum CustomizationType {
    UNKNOWN_CUSTOMIZATION_TYPE = "UNKNOWN_CUSTOMIZATION_TYPE",
    PRODUCT_OPTION = "PRODUCT_OPTION",
    MODIFIER = "MODIFIER"
}
/** @enumType */
type CustomizationTypeWithLiterals = CustomizationType | 'UNKNOWN_CUSTOMIZATION_TYPE' | 'PRODUCT_OPTION' | 'MODIFIER';
declare enum CustomizationRenderType {
    UNKNOWN_CUSTOMIZATION_RENDER_TYPE = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE",
    /** Customization by free text input. */
    FREE_TEXT = "FREE_TEXT",
    /** Customization by selection of text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Customization by selection of colors. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
/** @enumType */
type CustomizationRenderTypeWithLiterals = CustomizationRenderType | 'UNKNOWN_CUSTOMIZATION_RENDER_TYPE' | 'FREE_TEXT' | 'TEXT_CHOICES' | 'SWATCH_CHOICES';
interface FreeTextSettings {
    /** Minimum text character length. */
    minCharCount?: number;
    /**
     * Maximum text character length.
     * @max 500
     */
    maxCharCount?: number;
    /**
     * Default amount added to a product's price when this choice is assigned to a modifier.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    defaultAddedPrice?: string | null;
    /**
     * Title to display to customer for their free-text input.
     * @minLength 1
     * @maxLength 100
     */
    title?: string;
}
interface ChoicesSettings {
    /**
     * List of choices.
     * @minSize 1
     * @maxSize 200
     * @immutable
     */
    choices?: Choice[];
}
interface Choice extends ChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     * @format COLOR_HEX
     */
    colorCode?: string;
    /**
     * Choice ID.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * Choice type.
     *
     * > **Notes:**
     * > + For `customizationRenderType: SWATCH_CHOICES`, the supported `choiceType` values are: `ONE_COLOR`, `MULTIPLE_COLORS`, or `IMAGE`.
     * > + For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`, the supported `choiceType` value is: `CHOICE_TEXT`.
     * @immutable
     */
    choiceType?: ChoiceTypeWithLiterals;
    /**
     * A read-only key generated based on choice name. Used for eCommerce integration.
     * @readonly
     * @minLength 1
     * @maxLength 50
     */
    key?: string | null;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Default amount added to a product's price when this customization is assigned to a modifier.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    defaultAddedPrice?: string | null;
    /**
     * Number of products this choice is assigned to .
     * @readonly
     */
    assignedProductsCount?: number;
}
/** @oneof */
interface ChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     * @format COLOR_HEX
     */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    /** For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`. */
    CHOICE_TEXT = "CHOICE_TEXT",
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    ONE_COLOR = "ONE_COLOR",
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    IMAGE = "IMAGE"
}
/** @enumType */
type ChoiceTypeWithLiterals = ChoiceType | 'UNKNOWN_CHOICE_TYPE' | 'CHOICE_TEXT' | 'ONE_COLOR' | 'MULTIPLE_COLORS' | 'IMAGE';
interface CreateCustomizationRequest {
    /** Customization to create. */
    customization: Customization;
}
interface CreateCustomizationResponse {
    /** Created customization. */
    customization?: Customization;
}
interface GetCustomizationRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
declare enum RequestedFields {
    /** Unknown requested field. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    /** Assigned products count. */
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'ASSIGNED_PRODUCTS_COUNT';
interface GetCustomizationResponse {
    /** Customization. */
    customization?: Customization;
}
interface UpdateCustomizationRequest {
    /** Customization to update. */
    customization: Customization;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface UpdateCustomizationResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface DeleteCustomizationRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
}
interface DeleteCustomizationResponse {
}
interface QueryCustomizationsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryCustomizationsResponse {
    /**
     * List of customizations.
     * @minSize 1
     * @maxSize 200
     */
    customizations?: Customization[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface BulkCreateCustomizationsRequest {
    /**
     * Customizations to create.
     * @minSize 1
     * @maxSize 100
     */
    customizations: Customization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateCustomizationsResponse {
    /**
     * Customizations created by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkCustomizationResult {
    /** Bulk action metadata for customization. */
    itemMetadata?: ItemMetadata;
    /**
     * Full customization entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    customization?: Customization;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @minLength 1
     * @maxLength 36
     */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface AddCustomizationChoicesRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * Choices to add.
     * @minSize 1
     * @maxSize 100
     */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface AddCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface SetCustomizationChoicesRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * Choices to set.
     * @minSize 1
     * @maxSize 100
     */
    choices: Choice[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface SetCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface RemoveCustomizationChoicesRequest {
    /**
     * Customization ID.
     * @format GUID
     */
    customizationId: string;
    /**
     * IDs of choices to remove.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    choiceIds: string[];
    /** Customization revision. */
    revision?: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface RemoveCustomizationChoicesResponse {
    /** Updated customization. */
    customization?: Customization;
}
interface BulkAddCustomizationChoicesRequest {
    /**
     * List of customization IDs and choices.
     * @minSize 1
     * @maxSize 100
     */
    customizationsChoices: CustomizationChoices[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CustomizationChoices {
    /**
     * Customization ID.
     * @minLength 1
     * @maxLength 36
     */
    customizationId?: string;
    /**
     * Choices to add.
     * @minSize 1
     * @maxSize 100
     */
    choices?: Choice[];
}
interface BulkAddCustomizationChoicesResponse {
    /**
     * Customizations updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkUpdateCustomizationsRequest {
    /**
     * List of customizations to update.
     * @minSize 1
     * @maxSize 100
     */
    customizations: MaskedCustomization[];
    /**
     * Whether to return the full customization entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface MaskedCustomization {
    /** Customization to update. */
    customization?: Customization;
}
interface BulkUpdateCustomizationsResponse {
    /**
     * Customizations updated by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCustomizationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCustomization(): __PublicMethodMetaInfo<'POST', {}, CreateCustomizationRequest$1, CreateCustomizationRequest, CreateCustomizationResponse$1, CreateCustomizationResponse>;
declare function getCustomization(): __PublicMethodMetaInfo<'GET', {
    customizationId: string;
}, GetCustomizationRequest$1, GetCustomizationRequest, GetCustomizationResponse$1, GetCustomizationResponse>;
declare function updateCustomization(): __PublicMethodMetaInfo<'PATCH', {
    customizationId: string;
}, UpdateCustomizationRequest$1, UpdateCustomizationRequest, UpdateCustomizationResponse$1, UpdateCustomizationResponse>;
declare function deleteCustomization(): __PublicMethodMetaInfo<'DELETE', {
    customizationId: string;
}, DeleteCustomizationRequest$1, DeleteCustomizationRequest, DeleteCustomizationResponse$1, DeleteCustomizationResponse>;
declare function queryCustomizations(): __PublicMethodMetaInfo<'POST', {}, QueryCustomizationsRequest$1, QueryCustomizationsRequest, QueryCustomizationsResponse$1, QueryCustomizationsResponse>;
declare function bulkCreateCustomizations(): __PublicMethodMetaInfo<'POST', {}, BulkCreateCustomizationsRequest$1, BulkCreateCustomizationsRequest, BulkCreateCustomizationsResponse$1, BulkCreateCustomizationsResponse>;
declare function addCustomizationChoices(): __PublicMethodMetaInfo<'POST', {
    customizationId: string;
}, AddCustomizationChoicesRequest$1, AddCustomizationChoicesRequest, AddCustomizationChoicesResponse$1, AddCustomizationChoicesResponse>;
declare function setCustomizationChoices(): __PublicMethodMetaInfo<'POST', {
    customizationId: string;
}, SetCustomizationChoicesRequest$1, SetCustomizationChoicesRequest, SetCustomizationChoicesResponse$1, SetCustomizationChoicesResponse>;
declare function removeCustomizationChoices(): __PublicMethodMetaInfo<'POST', {
    customizationId: string;
}, RemoveCustomizationChoicesRequest$1, RemoveCustomizationChoicesRequest, RemoveCustomizationChoicesResponse$1, RemoveCustomizationChoicesResponse>;
declare function bulkAddCustomizationChoices(): __PublicMethodMetaInfo<'POST', {}, BulkAddCustomizationChoicesRequest$1, BulkAddCustomizationChoicesRequest, BulkAddCustomizationChoicesResponse$1, BulkAddCustomizationChoicesResponse>;
declare function bulkUpdateCustomizations(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateCustomizationsRequest$1, BulkUpdateCustomizationsRequest, BulkUpdateCustomizationsResponse$1, BulkUpdateCustomizationsResponse>;

export { type __PublicMethodMetaInfo, addCustomizationChoices, bulkAddCustomizationChoices, bulkCreateCustomizations, bulkUpdateCustomizations, createCustomization, deleteCustomization, getCustomization, queryCustomizations, removeCustomizationChoices, setCustomizationChoices, updateCustomization };
