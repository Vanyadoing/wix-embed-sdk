import { HttpClient, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { C as Customization, G as GetCustomizationOptions, U as UpdateCustomization, a as UpdateCustomizationOptions, Q as QueryCustomizationsOptions, b as CustomizationsQueryBuilder, B as BulkCreateCustomizationsOptions, c as BulkCreateCustomizationsResponse, d as Choice, A as AddCustomizationChoicesOptions, e as AddCustomizationChoicesResponse, S as SetCustomizationChoicesOptions, f as SetCustomizationChoicesResponse, R as RemoveCustomizationChoicesOptions, g as RemoveCustomizationChoicesResponse, h as CustomizationChoices, i as BulkAddCustomizationChoicesOptions, j as BulkAddCustomizationChoicesResponse, M as MaskedCustomization, k as BulkUpdateCustomizationsOptions, l as BulkUpdateCustomizationsResponse, m as CustomizationCreatedEnvelope, n as CustomizationDeletedEnvelope, o as CustomizationUpdatedEnvelope } from './stores-catalog-v3-customization-customizations-v-3.universal-CT4feroB.mjs';
export { am as ActionEvent, ab as AddCustomizationChoicesRequest, D as App, a8 as ApplicationError, ar as BaseEventMetadata, a9 as BulkActionMetadata, ae as BulkAddCustomizationChoicesRequest, a5 as BulkCreateCustomizationsRequest, a6 as BulkCustomizationResult, af as BulkUpdateCustomizationsRequest, r as ChoiceType, w as ChoiceValueOneOf, v as ChoicesSettings, K as CreateCustomizationRequest, L as CreateCustomizationResponse, a1 as CursorPaging, a3 as CursorPagingMetadata, _ as CursorQuery, $ as CursorQueryPagingMethodOneOf, a4 as Cursors, J as CustomTag, u as CustomizationCustomizationSettingsOneOf, aa as CustomizationIdsWrapper, q as CustomizationRenderType, p as CustomizationType, at as CustomizationsQueryResult, X as DeleteCustomizationRequest, Y as DeleteCustomizationResponse, ag as DomainEvent, ah as DomainEventBodyOneOf, an as Empty, ai as EntityCreatedEvent, al as EntityDeletedEvent, ak as EntityUpdatedEvent, as as EventMetadata, H as File, y as FocalPoint, F as FreeTextSettings, N as GetCustomizationRequest, O as GetCustomizationResponse, ap as IdentificationData, aq as IdentificationDataIdOneOf, I as InvalidateCache, z as InvalidateCacheGetByOneOf, a7 as ItemMetadata, ao as MessageEnvelope, x as MultipleColors, P as Page, Z as QueryCustomizationsRequest, a2 as QueryCustomizationsResponse, ad as RemoveCustomizationChoicesRequest, s as RequestedFields, aj as RestoreInfo, ac as SetCustomizationChoicesRequest, t as SortOrder, a0 as Sorting, E as URI, T as UpdateCustomizationRequest, V as UpdateCustomizationResponse, W as WebhookIdentityType } from './stores-catalog-v3-customization-customizations-v-3.universal-CT4feroB.mjs';

declare function createCustomization$1(httpClient: HttpClient): CreateCustomizationSignature;
interface CreateCustomizationSignature {
    /**
     * Creates a customization.
     * @param - Customization to create.
     * @returns Created customization.
     */
    (customization: Customization): Promise<Customization>;
}
declare function getCustomization$1(httpClient: HttpClient): GetCustomizationSignature;
interface GetCustomizationSignature {
    /**
     * Retrieves a customization.
     * @param - Customization ID.
     * @returns Customization.
     */
    (customizationId: string, options?: GetCustomizationOptions | undefined): Promise<Customization>;
}
declare function updateCustomization$1(httpClient: HttpClient): UpdateCustomizationSignature;
interface UpdateCustomizationSignature {
    /**
     * Updates a customization.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - Customization ID.
     * @returns Updated customization.
     */
    (_id: string, customization: UpdateCustomization, options?: UpdateCustomizationOptions | undefined): Promise<Customization>;
}
declare function deleteCustomization$1(httpClient: HttpClient): DeleteCustomizationSignature;
interface DeleteCustomizationSignature {
    /**
     * Deletes a customization.
     *
     * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
     * @param - Customization ID.
     */
    (customizationId: string): Promise<void>;
}
declare function queryCustomizations$1(httpClient: HttpClient): QueryCustomizationsSignature;
interface QueryCustomizationsSignature {
    /**
     * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Customizations runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryCustomizationsOptions | undefined): CustomizationsQueryBuilder;
}
declare function bulkCreateCustomizations$1(httpClient: HttpClient): BulkCreateCustomizationsSignature;
interface BulkCreateCustomizationsSignature {
    /**
     * Creates multiple brands.
     * @param - Customizations to create.
     */
    (customizations: Customization[], options?: BulkCreateCustomizationsOptions | undefined): Promise<BulkCreateCustomizationsResponse>;
}
declare function addCustomizationChoices$1(httpClient: HttpClient): AddCustomizationChoicesSignature;
interface AddCustomizationChoicesSignature {
    /**
     * Adds choices to a customization.
     * @param - Customization ID.
     * @param - Choices to add.
     */
    (customizationId: string, choices: Choice[], options?: AddCustomizationChoicesOptions | undefined): Promise<AddCustomizationChoicesResponse>;
}
declare function setCustomizationChoices$1(httpClient: HttpClient): SetCustomizationChoicesSignature;
interface SetCustomizationChoicesSignature {
    /**
     * Sets a customization's choices. Any and all existing choices will be overridden.
     *
     * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - Choices to set.
     */
    (customizationId: string, choices: Choice[], options?: SetCustomizationChoicesOptions | undefined): Promise<SetCustomizationChoicesResponse>;
}
declare function removeCustomizationChoices$1(httpClient: HttpClient): RemoveCustomizationChoicesSignature;
interface RemoveCustomizationChoicesSignature {
    /**
     * Removes choices from a customization.
     *
     * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - IDs of choices to remove.
     */
    (customizationId: string, choiceIds: string[], options?: RemoveCustomizationChoicesOptions | undefined): Promise<RemoveCustomizationChoicesResponse>;
}
declare function bulkAddCustomizationChoices$1(httpClient: HttpClient): BulkAddCustomizationChoicesSignature;
interface BulkAddCustomizationChoicesSignature {
    /**
     * Adds choices to multiple customizations.
     * @param - List of customization IDs and choices.
     */
    (customizationsChoices: CustomizationChoices[], options?: BulkAddCustomizationChoicesOptions | undefined): Promise<BulkAddCustomizationChoicesResponse>;
}
declare function bulkUpdateCustomizations$1(httpClient: HttpClient): BulkUpdateCustomizationsSignature;
interface BulkUpdateCustomizationsSignature {
    /**
     * Updates multiple customizations.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - List of customizations to update.
     */
    (customizations: MaskedCustomization[], options?: BulkUpdateCustomizationsOptions | undefined): Promise<BulkUpdateCustomizationsResponse>;
}
declare const onCustomizationCreated$1: EventDefinition<CustomizationCreatedEnvelope, "wix.stores.catalog.v3.customization_created">;
declare const onCustomizationDeleted$1: EventDefinition<CustomizationDeletedEnvelope, "wix.stores.catalog.v3.customization_deleted">;
declare const onCustomizationUpdated$1: EventDefinition<CustomizationUpdatedEnvelope, "wix.stores.catalog.v3.customization_updated">;

declare const createCustomization: MaybeContext<BuildRESTFunction<typeof createCustomization$1> & typeof createCustomization$1>;
declare const getCustomization: MaybeContext<BuildRESTFunction<typeof getCustomization$1> & typeof getCustomization$1>;
declare const updateCustomization: MaybeContext<BuildRESTFunction<typeof updateCustomization$1> & typeof updateCustomization$1>;
declare const deleteCustomization: MaybeContext<BuildRESTFunction<typeof deleteCustomization$1> & typeof deleteCustomization$1>;
declare const queryCustomizations: MaybeContext<BuildRESTFunction<typeof queryCustomizations$1> & typeof queryCustomizations$1>;
declare const bulkCreateCustomizations: MaybeContext<BuildRESTFunction<typeof bulkCreateCustomizations$1> & typeof bulkCreateCustomizations$1>;
declare const addCustomizationChoices: MaybeContext<BuildRESTFunction<typeof addCustomizationChoices$1> & typeof addCustomizationChoices$1>;
declare const setCustomizationChoices: MaybeContext<BuildRESTFunction<typeof setCustomizationChoices$1> & typeof setCustomizationChoices$1>;
declare const removeCustomizationChoices: MaybeContext<BuildRESTFunction<typeof removeCustomizationChoices$1> & typeof removeCustomizationChoices$1>;
declare const bulkAddCustomizationChoices: MaybeContext<BuildRESTFunction<typeof bulkAddCustomizationChoices$1> & typeof bulkAddCustomizationChoices$1>;
declare const bulkUpdateCustomizations: MaybeContext<BuildRESTFunction<typeof bulkUpdateCustomizations$1> & typeof bulkUpdateCustomizations$1>;
/**
 * Triggered when a customization is created.
 */
declare const onCustomizationCreated: BuildEventDefinition<typeof onCustomizationCreated$1>;
/**
 * Triggered when a customization is deleted.
 */
declare const onCustomizationDeleted: BuildEventDefinition<typeof onCustomizationDeleted$1>;
/**
 * Triggered when a customization is updated.
 */
declare const onCustomizationUpdated: BuildEventDefinition<typeof onCustomizationUpdated$1>;

export { AddCustomizationChoicesOptions, AddCustomizationChoicesResponse, BulkAddCustomizationChoicesOptions, BulkAddCustomizationChoicesResponse, BulkCreateCustomizationsOptions, BulkCreateCustomizationsResponse, BulkUpdateCustomizationsOptions, BulkUpdateCustomizationsResponse, Choice, Customization, CustomizationChoices, CustomizationCreatedEnvelope, CustomizationDeletedEnvelope, CustomizationUpdatedEnvelope, CustomizationsQueryBuilder, GetCustomizationOptions, MaskedCustomization, QueryCustomizationsOptions, RemoveCustomizationChoicesOptions, RemoveCustomizationChoicesResponse, SetCustomizationChoicesOptions, SetCustomizationChoicesResponse, UpdateCustomization, UpdateCustomizationOptions, addCustomizationChoices, bulkAddCustomizationChoices, bulkCreateCustomizations, bulkUpdateCustomizations, createCustomization, deleteCustomization, getCustomization, onCustomizationCreated, onCustomizationDeleted, onCustomizationUpdated, queryCustomizations, removeCustomizationChoices, setCustomizationChoices, updateCustomization };
