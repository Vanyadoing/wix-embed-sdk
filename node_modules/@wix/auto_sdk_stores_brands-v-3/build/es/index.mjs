// src/stores-catalog-v3-brand-brands-v-3.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths3 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/stores-catalog-v3-brand-brands-v-3.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v3-brand-brands-v-3.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformSDKFieldMaskToRESTFieldMask } from "@wix/sdk-runtime/transformations/field-mask";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixStoresCatalogBrandV3BrandServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/stores/v3/brands",
        destPath: "/v3/brands"
      },
      {
        srcPath: "/stores/v3/bulk/brands",
        destPath: "/v3/bulk/brands"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/brand",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/brand",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/brand",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/brand",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/brand",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/brand",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_brands-v-3";
function createBrand(payload) {
  function __createBrand({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "brand.createdDate" }, { path: "brand.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.CreateBrand",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/brands",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "brand.createdDate" },
            { path: "brand.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createBrand;
}
function getBrand(payload) {
  function __getBrand({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "GET",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.GetBrand",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/brands/{brandId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "brand.createdDate" },
            { path: "brand.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getBrand;
}
function updateBrand(payload) {
  function __updateBrand({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "brand.createdDate" }, { path: "brand.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "PATCH",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.UpdateBrand",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/brands/{brand.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "brand.createdDate" },
            { path: "brand.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateBrand;
}
function deleteBrand(payload) {
  function __deleteBrand({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "DELETE",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.DeleteBrand",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/brands/{brandId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteBrand;
}
function queryBrands(payload) {
  function __queryBrands({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.QueryBrands",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/brands/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "brands.createdDate" },
            { path: "brands.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryBrands;
}
function bulkCreateBrands(payload) {
  function __bulkCreateBrands({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "brands.createdDate" }, { path: "brands.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.BulkCreateBrands",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/bulk/brands/create",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateBrands;
}
function bulkUpdateBrands(payload) {
  function __bulkUpdateBrands({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "brands.fieldMask" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "brands.brand.createdDate" },
          { path: "brands.brand.updatedDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.BulkUpdateBrands",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/bulk/brands/update",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateBrands;
}
function getOrCreateBrand(payload) {
  function __getOrCreateBrand({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.GetOrCreateBrand",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/brands/get-or-create",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "brand.createdDate" },
            { path: "brand.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getOrCreateBrand;
}
function bulkGetOrCreateBrands(payload) {
  function __bulkGetOrCreateBrands({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.BulkGetOrCreateBrands",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/bulk/brands/get-or-create",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "results.item.createdDate" },
            { path: "results.item.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __bulkGetOrCreateBrands;
}
function bulkDeleteBrands(payload) {
  function __bulkDeleteBrands({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v3.brand",
      method: "POST",
      methodFqn: "com.wix.stores.catalog.brand.v3.BrandService.BulkDeleteBrands",
      packageName: PACKAGE_NAME,
      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({
        protoPath: "/v3/bulk/brands/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteBrands;
}

// src/stores-catalog-v3-brand-brands-v-3.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var RequestedFields = /* @__PURE__ */ ((RequestedFields2) => {
  RequestedFields2["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
  RequestedFields2["ASSIGNED_PRODUCTS_COUNT"] = "ASSIGNED_PRODUCTS_COUNT";
  return RequestedFields2;
})(RequestedFields || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createBrand2(brand) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ brand });
  const reqOpts = createBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { brand: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["brand"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getBrand2(brandId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    brandId,
    fields: options?.fields
  });
  const reqOpts = getBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { brandId: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["brandId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateBrand2(_id, brand, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    brand: { ...brand, id: _id },
    fields: options?.fields
  });
  const reqOpts = updateBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { brand: "$[1]" },
        explicitPathsToArguments: { "brand.id": "$[0]", fields: "$[2].fields" },
        singleArgumentUnchanged: false
      },
      ["_id", "brand", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteBrand2(brandId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ brandId });
  const reqOpts = deleteBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { brandId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["brandId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryBrands2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return queryBuilder(
    {
      func: async (payload) => {
        const reqOpts = queryBrands({
          ...payload,
          ...options ?? {}
        });
        sideEffects?.onSiteCall?.();
        try {
          const result = await httpClient.request(reqOpts);
          sideEffects?.onSuccess?.(result);
          return result;
        } catch (err) {
          sideEffects?.onError?.(err);
          throw err;
        }
      },
      requestTransformer: (query) => {
        const args = [query, options];
        return renameKeysFromSDKRequestToRESTRequest({
          ...args?.[1],
          query: args?.[0]
        });
      },
      responseTransformer: ({ data }) => {
        const transformedData = renameKeysFromRESTResponseToSDKResponse(
          transformPaths2(data, [])
        );
        return {
          items: transformedData?.brands,
          pagingMetadata: transformedData?.pagingMetadata
        };
      },
      errorTransformer: (err) => {
        const transformedError = sdkTransformError(err, {
          spreadPathsToArguments: {},
          explicitPathsToArguments: { query: "$[0]" },
          singleArgumentUnchanged: false
        });
        throw transformedError;
      },
      pagingMethod: "CURSOR",
      transformationPaths: {}
    }
  );
}
async function bulkCreateBrands2(brands, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    brands,
    returnEntity: options?.returnEntity
  });
  const reqOpts = bulkCreateBrands(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          brands: "$[0]",
          returnEntity: "$[1].returnEntity"
        },
        singleArgumentUnchanged: false
      },
      ["brands", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateBrands2(brands, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    brands,
    returnEntity: options?.returnEntity,
    fields: options?.fields
  });
  const reqOpts = bulkUpdateBrands(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          brands: "$[0]",
          returnEntity: "$[1].returnEntity",
          fields: "$[1].fields"
        },
        singleArgumentUnchanged: false
      },
      ["brands", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOrCreateBrand2(brandName, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    brandName,
    fields: options?.fields
  });
  const reqOpts = getOrCreateBrand(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { brandName: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["brandName", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkGetOrCreateBrands2(brandNames, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    brandNames,
    fields: options?.fields
  });
  const reqOpts = bulkGetOrCreateBrands(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { brandNames: "$[0]", fields: "$[1].fields" },
        singleArgumentUnchanged: false
      },
      ["brandNames", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteBrands2(brandIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ brandIds });
  const reqOpts = bulkDeleteBrands(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { brandIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["brandIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v3-brand-brands-v-3.public.ts
function createBrand3(httpClient) {
  return (brand) => createBrand2(
    brand,
    // @ts-ignore
    { httpClient }
  );
}
function getBrand3(httpClient) {
  return (brandId, options) => getBrand2(
    brandId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateBrand3(httpClient) {
  return (_id, brand, options) => updateBrand2(
    _id,
    brand,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteBrand3(httpClient) {
  return (brandId) => deleteBrand2(
    brandId,
    // @ts-ignore
    { httpClient }
  );
}
function queryBrands3(httpClient) {
  return (options) => queryBrands2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreateBrands3(httpClient) {
  return (brands, options) => bulkCreateBrands2(
    brands,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateBrands3(httpClient) {
  return (brands, options) => bulkUpdateBrands2(
    brands,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getOrCreateBrand3(httpClient) {
  return (brandName, options) => getOrCreateBrand2(
    brandName,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkGetOrCreateBrands3(httpClient) {
  return (brandNames, options) => bulkGetOrCreateBrands2(
    brandNames,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteBrands3(httpClient) {
  return (brandIds) => bulkDeleteBrands2(
    brandIds,
    // @ts-ignore
    { httpClient }
  );
}
var onBrandCreated = EventDefinition(
  "wix.stores.catalog.v3.brand_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBrandDeleted = EventDefinition(
  "wix.stores.catalog.v3.brand_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBrandUpdated = EventDefinition(
  "wix.stores.catalog.v3.brand_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths3(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/stores-catalog-v3-brand-brands-v-3.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createBrand4 = /* @__PURE__ */ createRESTModule(createBrand3);
var getBrand4 = /* @__PURE__ */ createRESTModule(getBrand3);
var updateBrand4 = /* @__PURE__ */ createRESTModule(updateBrand3);
var deleteBrand4 = /* @__PURE__ */ createRESTModule(deleteBrand3);
var queryBrands4 = /* @__PURE__ */ createRESTModule(queryBrands3);
var bulkCreateBrands4 = /* @__PURE__ */ createRESTModule(bulkCreateBrands3);
var bulkUpdateBrands4 = /* @__PURE__ */ createRESTModule(bulkUpdateBrands3);
var getOrCreateBrand4 = /* @__PURE__ */ createRESTModule(getOrCreateBrand3);
var bulkGetOrCreateBrands4 = /* @__PURE__ */ createRESTModule(bulkGetOrCreateBrands3);
var bulkDeleteBrands4 = /* @__PURE__ */ createRESTModule(bulkDeleteBrands3);
var onBrandCreated2 = createEventModule(onBrandCreated);
var onBrandDeleted2 = createEventModule(onBrandDeleted);
var onBrandUpdated2 = createEventModule(onBrandUpdated);
export {
  RequestedFields,
  SortOrder,
  WebhookIdentityType,
  bulkCreateBrands4 as bulkCreateBrands,
  bulkDeleteBrands4 as bulkDeleteBrands,
  bulkGetOrCreateBrands4 as bulkGetOrCreateBrands,
  bulkUpdateBrands4 as bulkUpdateBrands,
  createBrand4 as createBrand,
  deleteBrand4 as deleteBrand,
  getBrand4 as getBrand,
  getOrCreateBrand4 as getOrCreateBrand,
  onBrandCreated2 as onBrandCreated,
  onBrandDeleted2 as onBrandDeleted,
  onBrandUpdated2 as onBrandUpdated,
  queryBrands4 as queryBrands,
  updateBrand4 as updateBrand
};
//# sourceMappingURL=index.mjs.map