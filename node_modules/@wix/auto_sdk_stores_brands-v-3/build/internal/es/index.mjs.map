{"version":3,"sources":["../../../src/stores-catalog-v3-brand-brands-v-3.public.ts","../../../src/stores-catalog-v3-brand-brands-v-3.universal.ts","../../../src/stores-catalog-v3-brand-brands-v-3.http.ts","../../../src/stores-catalog-v3-brand-brands-v-3.context.ts"],"sourcesContent":["import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { EventDefinition, HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  Brand,\n  BrandCreatedEnvelope,\n  BrandDeletedEnvelope,\n  BrandUpdatedEnvelope,\n  BrandsQueryBuilder,\n  BulkCreateBrandsOptions,\n  BulkCreateBrandsResponse,\n  BulkDeleteBrandsResponse,\n  BulkGetOrCreateBrandsOptions,\n  BulkGetOrCreateBrandsResponse,\n  BulkUpdateBrandsOptions,\n  BulkUpdateBrandsResponse,\n  GetBrandOptions,\n  GetOrCreateBrandOptions,\n  GetOrCreateBrandResponse,\n  MaskedBrand,\n  QueryBrandsOptions,\n  UpdateBrand,\n  UpdateBrandOptions,\n  bulkCreateBrands as universalBulkCreateBrands,\n  bulkDeleteBrands as universalBulkDeleteBrands,\n  bulkGetOrCreateBrands as universalBulkGetOrCreateBrands,\n  bulkUpdateBrands as universalBulkUpdateBrands,\n  createBrand as universalCreateBrand,\n  deleteBrand as universalDeleteBrand,\n  getBrand as universalGetBrand,\n  getOrCreateBrand as universalGetOrCreateBrand,\n  queryBrands as universalQueryBrands,\n  updateBrand as universalUpdateBrand,\n} from './stores-catalog-v3-brand-brands-v-3.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/stores' };\n\nexport function createBrand(httpClient: HttpClient): CreateBrandSignature {\n  return (brand: NonNullablePaths<Brand, `name`>) =>\n    universalCreateBrand(\n      brand,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface CreateBrandSignature {\n  /**\n   * Creates a brand.\n   *\n   * To assign the brand to a product, include the `brand.id` or `brand.name`\n   * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or\n   * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.\n   * @param - Brand to create.\n   * @returns Created brand.\n   */\n  (brand: Brand): Promise<Brand>;\n}\n\nexport function getBrand(httpClient: HttpClient): GetBrandSignature {\n  return (brandId: string, options?: GetBrandOptions) =>\n    universalGetBrand(\n      brandId,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetBrandSignature {\n  /**\n   * Retrieves a brand.\n   * @param - Brand ID.\n   * @returns Brand.\n   */\n  (brandId: string, options?: GetBrandOptions | undefined): Promise<Brand>;\n}\n\nexport function updateBrand(httpClient: HttpClient): UpdateBrandSignature {\n  return (\n    _id: string,\n    brand: NonNullablePaths<UpdateBrand, `revision`>,\n    options?: UpdateBrandOptions\n  ) =>\n    universalUpdateBrand(\n      _id,\n      brand,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateBrandSignature {\n  /**\n   * Updates a brand.\n   *\n   * Each time the brand is updated, `revision` increments by 1.\n   * The current `revision` must be passed when updating the brand.\n   * This ensures you're working with the latest brand and prevents unintended overwrites.\n   * @param - Brand ID.\n   * @returns Updated brand.\n   */\n  (\n    _id: string,\n    brand: UpdateBrand,\n    options?: UpdateBrandOptions | undefined\n  ): Promise<Brand>;\n}\n\nexport function deleteBrand(httpClient: HttpClient): DeleteBrandSignature {\n  return (brandId: string) =>\n    universalDeleteBrand(\n      brandId,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteBrandSignature {\n  /**\n   * Deletes a brand.\n   *\n   * > **Note:** Deleting a brand will also remove it from all products it is assigned to.\n   * @param - Brand ID.\n   */\n  (brandId: string): Promise<void>;\n}\n\nexport function queryBrands(httpClient: HttpClient): QueryBrandsSignature {\n  return (options?: QueryBrandsOptions) =>\n    universalQueryBrands(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface QueryBrandsSignature {\n  /**\n   * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.\n   * Pass supported values to the `fields` array in the request to include those fields in the response.\n   *\n   *\n   * Query Brands runs with these defaults, which you can override:\n   *\n   * - `createdDate` is sorted in `DESC` order\n   * - `cursorPaging.limit` is `100`\n   *\n   * For field support for filters and sorting,\n   * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).\n   *\n   * To learn about working with _Query_ endpoints, see\n   * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),\n   * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n   */\n  (options?: QueryBrandsOptions | undefined): BrandsQueryBuilder;\n}\n\nexport function bulkCreateBrands(\n  httpClient: HttpClient\n): BulkCreateBrandsSignature {\n  return (\n    brands: NonNullablePaths<Brand, `name`>[],\n    options?: BulkCreateBrandsOptions\n  ) =>\n    universalBulkCreateBrands(\n      brands,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkCreateBrandsSignature {\n  /**\n   * Creates multiple brands.\n   * @param - Brands to create.\n   */\n  (\n    brands: Brand[],\n    options?: BulkCreateBrandsOptions | undefined\n  ): Promise<BulkCreateBrandsResponse>;\n}\n\nexport function bulkUpdateBrands(\n  httpClient: HttpClient\n): BulkUpdateBrandsSignature {\n  return (\n    brands: NonNullablePaths<MaskedBrand, `brand._id` | `brand.revision`>[],\n    options?: BulkUpdateBrandsOptions\n  ) =>\n    universalBulkUpdateBrands(\n      brands,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkUpdateBrandsSignature {\n  /**\n   * Updates multiple brands.\n   *\n   * Each time a brand is updated, `revision` increments by 1.\n   * The current `revision` must be passed when updating a brand.\n   * This ensures you're working with the latest brand and prevents unintended overwrites.\n   * @param - List of brands to update.\n   */\n  (\n    brands: MaskedBrand[],\n    options?: BulkUpdateBrandsOptions | undefined\n  ): Promise<BulkUpdateBrandsResponse>;\n}\n\nexport function getOrCreateBrand(\n  httpClient: HttpClient\n): GetOrCreateBrandSignature {\n  return (brandName: string, options?: GetOrCreateBrandOptions) =>\n    universalGetOrCreateBrand(\n      brandName,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetOrCreateBrandSignature {\n  /**\n   * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.\n   * @param - Brand name to retrieve or create.\n   */\n  (\n    brandName: string,\n    options?: GetOrCreateBrandOptions | undefined\n  ): Promise<GetOrCreateBrandResponse>;\n}\n\nexport function bulkGetOrCreateBrands(\n  httpClient: HttpClient\n): BulkGetOrCreateBrandsSignature {\n  return (brandNames: string[], options?: BulkGetOrCreateBrandsOptions) =>\n    universalBulkGetOrCreateBrands(\n      brandNames,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkGetOrCreateBrandsSignature {\n  /**\n   * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.\n   * @param - Brand names to retrieve or create.\n   */\n  (\n    brandNames: string[],\n    options?: BulkGetOrCreateBrandsOptions | undefined\n  ): Promise<BulkGetOrCreateBrandsResponse>;\n}\n\nexport function bulkDeleteBrands(\n  httpClient: HttpClient\n): BulkDeleteBrandsSignature {\n  return (brandIds: string[]) =>\n    universalBulkDeleteBrands(\n      brandIds,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkDeleteBrandsSignature {\n  /**\n   * Deletes multiple brands.\n   * @param - IDs of brands to delete.\n   */\n  (brandIds: string[]): Promise<BulkDeleteBrandsResponse>;\n}\n\nexport const onBrandCreated = EventDefinition(\n  'wix.stores.catalog.v3.brand_created',\n  true,\n  (event: BrandCreatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<BrandCreatedEnvelope>();\nexport const onBrandDeleted = EventDefinition(\n  'wix.stores.catalog.v3.brand_deleted',\n  true,\n  (event: BrandDeletedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'undefined.createdDate' },\n            { path: 'undefined.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<BrandDeletedEnvelope>();\nexport const onBrandUpdated = EventDefinition(\n  'wix.stores.catalog.v3.brand_updated',\n  true,\n  (event: BrandUpdatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<BrandUpdatedEnvelope>();\n\nexport {\n  ActionEvent,\n  App,\n  ApplicationError,\n  BaseEventMetadata,\n  Brand,\n  BrandCreatedEnvelope,\n  BrandDeletedEnvelope,\n  BrandUpdatedEnvelope,\n  BrandsQueryBuilder,\n  BrandsQueryResult,\n  BulkActionMetadata,\n  BulkBrandsResult,\n  BulkCreateBrandsOptions,\n  BulkCreateBrandsRequest,\n  BulkCreateBrandsResponse,\n  BulkDeleteBrandsRequest,\n  BulkDeleteBrandsResponse,\n  BulkDeleteBrandsResponseBulkBrandsResult,\n  BulkGetOrCreateBrandsOptions,\n  BulkGetOrCreateBrandsRequest,\n  BulkGetOrCreateBrandsResponse,\n  BulkUpdateBrandsOptions,\n  BulkUpdateBrandsRequest,\n  BulkUpdateBrandsResponse,\n  CreateBrandRequest,\n  CreateBrandResponse,\n  CursorPaging,\n  CursorPagingMetadata,\n  CursorQuery,\n  CursorQueryPagingMethodOneOf,\n  Cursors,\n  CustomTag,\n  DeleteBrandRequest,\n  DeleteBrandResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  Empty,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  EventMetadata,\n  File,\n  GetBrandOptions,\n  GetBrandRequest,\n  GetBrandResponse,\n  GetOrCreateBrandOptions,\n  GetOrCreateBrandRequest,\n  GetOrCreateBrandResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  InvalidateCache,\n  InvalidateCacheGetByOneOf,\n  ItemMetadata,\n  MaskedBrand,\n  MessageEnvelope,\n  Page,\n  QueryBrandsOptions,\n  QueryBrandsRequest,\n  QueryBrandsResponse,\n  RequestedFields,\n  RestoreInfo,\n  SortOrder,\n  Sorting,\n  URI,\n  UpdateBrand,\n  UpdateBrandOptions,\n  UpdateBrandRequest,\n  UpdateBrandResponse,\n  WebhookIdentityType,\n} from './stores-catalog-v3-brand-brands-v-3.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport { queryBuilder } from '@wix/sdk-runtime/query-builder';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, HttpResponse, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixStoresCatalogV3Brand from './stores-catalog-v3-brand-brands-v-3.http.js';\n// @ts-ignore\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\n/**\n * A brand is a visible property of a product.\n * Adding brands to your products can help improve site and product visibility on search engines.\n */\nexport interface Brand {\n  /**\n   * Brand ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the brand is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the brand.\n   *\n   * Ignored when creating a brand.\n   * @readonly\n   */\n  revision?: string | null;\n  /**\n   * Date and time the brand was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the brand was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Brand name.\n   * >**Note:** `name` must be unique.\n   * @minLength 1\n   * @maxLength 50\n   */\n  name?: string;\n  /**\n   * Number of products this brand is assigned to.\n   * > **Note:** Returned only when you pass `\"ASSIGNED_PRODUCTS_COUNT\"` to the `fields` array in Brand API requests.\n   * @readonly\n   */\n  assignedProductsCount?: number | null;\n}\n\nexport interface InvalidateCache extends InvalidateCacheGetByOneOf {\n  /**\n   * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  siteId?: string;\n  /** Invalidate by App */\n  app?: App;\n  /** Invalidate by page id */\n  page?: Page;\n  /** Invalidate by URI path */\n  uri?: URI;\n  /** Invalidate by file (for media files such as PDFs) */\n  file?: File;\n  /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */\n  customTag?: CustomTag;\n  /**\n   * tell us why you're invalidating the cache. You don't need to add your app name\n   * @maxLength 256\n   */\n  reason?: string | null;\n  /** Is local DS */\n  localDc?: boolean;\n  hardPurge?: boolean;\n}\n\n/** @oneof */\nexport interface InvalidateCacheGetByOneOf {\n  /**\n   * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  siteId?: string;\n  /** Invalidate by App */\n  app?: App;\n  /** Invalidate by page id */\n  page?: Page;\n  /** Invalidate by URI path */\n  uri?: URI;\n  /** Invalidate by file (for media files such as PDFs) */\n  file?: File;\n  /** Invalidate by custom tag. Tags used in BO invalidation are disabled for this endpoint (more info: https://wix-bo.com/dev/clear-ssr-cache) */\n  customTag?: CustomTag;\n}\n\nexport interface App {\n  /**\n   * The AppDefId\n   * @minLength 1\n   */\n  appDefId?: string;\n  /**\n   * The instance Id\n   * @format GUID\n   */\n  instanceId?: string;\n}\n\nexport interface Page {\n  /**\n   * the msid the page is on\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Page ID\n   * @minLength 1\n   */\n  pageId?: string;\n}\n\nexport interface URI {\n  /**\n   * the msid the URI is on\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes\n   * @minLength 1\n   */\n  uriPath?: string;\n}\n\nexport interface File {\n  /**\n   * the msid the file is related to\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by filename (for media files such as PDFs)\n   * @minLength 1\n   * @maxLength 256\n   */\n  fileName?: string;\n}\n\nexport interface CustomTag {\n  /**\n   * the msid the tag is related to\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Tag to invalidate by\n   * @minLength 1\n   * @maxLength 256\n   */\n  tag?: string;\n}\n\nexport interface CreateBrandRequest {\n  /** Brand to create. */\n  brand: Brand;\n}\n\nexport interface CreateBrandResponse {\n  /** Created brand. */\n  brand?: Brand;\n}\n\nexport interface GetBrandRequest {\n  /**\n   * Brand ID.\n   * @format GUID\n   */\n  brandId: string;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport enum RequestedFields {\n  UNKNOWN_REQUESTED_FIELD = 'UNKNOWN_REQUESTED_FIELD',\n  ASSIGNED_PRODUCTS_COUNT = 'ASSIGNED_PRODUCTS_COUNT',\n}\n\n/** @enumType */\nexport type RequestedFieldsWithLiterals =\n  | RequestedFields\n  | 'UNKNOWN_REQUESTED_FIELD'\n  | 'ASSIGNED_PRODUCTS_COUNT';\n\nexport interface GetBrandResponse {\n  /** Brand. */\n  brand?: Brand;\n}\n\nexport interface UpdateBrandRequest {\n  /** Brand to update. */\n  brand: Brand;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface UpdateBrandResponse {\n  /** Updated brand. */\n  brand?: Brand;\n}\n\nexport interface DeleteBrandRequest {\n  /**\n   * Brand ID.\n   * @format GUID\n   */\n  brandId: string;\n}\n\nexport interface DeleteBrandResponse {}\n\nexport interface QueryBrandsRequest {\n  /** Query options. */\n  query?: CursorQuery;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface CursorQuery extends CursorQueryPagingMethodOneOf {\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n  /**\n   * Filter object in the following format:\n   * `\"filter\" : {\n   * \"fieldName1\": \"value1\",\n   * \"fieldName2\":{\"$operator\":\"value2\"}\n   * }`\n   * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`\n   */\n  filter?: Record<string, any> | null;\n  /**\n   * Sort object in the following format:\n   * `[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`\n   * @maxSize 5\n   */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface CursorQueryPagingMethodOneOf {\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrderWithLiterals;\n}\n\nexport enum SortOrder {\n  /** Ascending order. */\n  ASC = 'ASC',\n  /** Descending order. */\n  DESC = 'DESC',\n}\n\n/** @enumType */\nexport type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 300\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface QueryBrandsResponse {\n  /**\n   * List of brands.\n   * @minSize 1\n   * @maxSize 300\n   */\n  brands?: Brand[];\n  /** Paging metadata. */\n  pagingMetadata?: CursorPagingMetadata;\n}\n\nexport interface CursorPagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Cursor strings that point to the next page, previous page, or both. */\n  cursors?: Cursors;\n  /**\n   * Whether there are more pages to retrieve following the current page.\n   *\n   * + `true`: Another page of results can be retrieved.\n   * + `false`: This is the last page.\n   */\n  hasNext?: boolean | null;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface BulkCreateBrandsRequest {\n  /**\n   * Brands to create.\n   * @minSize 1\n   * @maxSize 100\n   */\n  brands: Brand[];\n  /**\n   * Whether to return the full created brand entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n}\n\nexport interface BulkCreateBrandsResponse {\n  /**\n   * Brands created by bulk action.\n   * @maxSize 100\n   */\n  results?: BulkBrandsResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkBrandsResult {\n  /** Bulk action metadata for brand. */\n  itemMetadata?: ItemMetadata;\n  /**\n   * Full brand entity.\n   *\n   * Returned only if `returnEntity: true` is passed in the request.\n   */\n  item?: Brand;\n}\n\nexport interface ItemMetadata {\n  /**\n   * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).\n   * @format GUID\n   */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface BulkUpdateBrandsRequest {\n  /**\n   * List of brands to update.\n   * @minSize 1\n   * @maxSize 100\n   */\n  brands: MaskedBrand[];\n  /**\n   * Whether to return the full updated brand entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface MaskedBrand {\n  /** Brand to update. */\n  brand?: Brand;\n  /** Explicit list of fields to update. */\n  fieldMask?: string[];\n}\n\nexport interface BulkUpdateBrandsResponse {\n  /**\n   * Brands updated by bulk action.\n   * @maxSize 100\n   */\n  results?: BulkBrandsResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface GetOrCreateBrandRequest {\n  /**\n   * Brand name to retrieve or create.\n   * @minLength 1\n   * @maxLength 50\n   */\n  brandName: string;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface GetOrCreateBrandResponse {\n  /** Brand. */\n  brand?: Brand;\n}\n\nexport interface BulkGetOrCreateBrandsRequest {\n  /**\n   * Brand names to retrieve or create.\n   * @minLength 1\n   * @maxLength 50\n   * @minSize 1\n   * @maxSize 100\n   */\n  brandNames: string[];\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\nexport interface BulkGetOrCreateBrandsResponse {\n  /**\n   * Brands retrieved or created by bulk action.\n   * @maxSize 100\n   */\n  results?: BulkBrandsResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkDeleteBrandsRequest {\n  /**\n   * IDs of brands to delete.\n   * @format GUID\n   * @minSize 1\n   * @maxSize 100\n   */\n  brandIds: string[];\n}\n\nexport interface BulkDeleteBrandsResponse {\n  /** Brands deleted by bulk action. */\n  results?: BulkDeleteBrandsResponseBulkBrandsResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkDeleteBrandsResponseBulkBrandsResult {\n  /** Bulk action metadata for brand. */\n  itemMetadata?: ItemMetadata;\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface Empty {}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface BrandCreatedEnvelope {\n  entity: Brand;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a brand is created.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_READ\n * @permissionScope Manage Products\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Read Products\n * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Product write in v3 catalog\n * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE\n * @permissionScope Manage v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_WRITE\n * @permissionScope Read brands in catalog v3\n * @permissionScopeId SCOPE.STORES.BRAND_READ\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId WIX_STORES.BRAND_READ\n * @webhook\n * @eventType wix.stores.catalog.v3.brand_created\n * @serviceIdentifier com.wix.stores.catalog.brand.v3.BrandService\n * @slug created\n * @documentationMaturity preview\n */\nexport declare function onBrandCreated(\n  handler: (event: BrandCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface BrandDeletedEnvelope {\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a brand is deleted.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_READ\n * @permissionScope Manage Products\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Read Products\n * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Product write in v3 catalog\n * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE\n * @permissionScope Manage v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_WRITE\n * @permissionScope Read brands in catalog v3\n * @permissionScopeId SCOPE.STORES.BRAND_READ\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId WIX_STORES.BRAND_READ\n * @webhook\n * @eventType wix.stores.catalog.v3.brand_deleted\n * @serviceIdentifier com.wix.stores.catalog.brand.v3.BrandService\n * @slug deleted\n * @documentationMaturity preview\n */\nexport declare function onBrandDeleted(\n  handler: (event: BrandDeletedEnvelope) => void | Promise<void>\n): void;\n\nexport interface BrandUpdatedEnvelope {\n  entity: Brand;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a brand is updated.\n * @permissionScope Manage Stores - all permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES\n * @permissionScope Manage Stores\n * @permissionScopeId SCOPE.STORES.MANAGE-STORES\n * @permissionScope Read v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_READ\n * @permissionScope Manage Products\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS\n * @permissionScope Read Stores - all read permissions\n * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES\n * @permissionScope Read Products\n * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Product write in v3 catalog\n * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE\n * @permissionScope Manage v3 catalog\n * @permissionScopeId SCOPE.STORES.CATALOG_WRITE\n * @permissionScope Read brands in catalog v3\n * @permissionScopeId SCOPE.STORES.BRAND_READ\n * @permissionScope Manage Orders\n * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS\n * @permissionId WIX_STORES.BRAND_READ\n * @webhook\n * @eventType wix.stores.catalog.v3.brand_updated\n * @serviceIdentifier com.wix.stores.catalog.brand.v3.BrandService\n * @slug updated\n * @documentationMaturity preview\n */\nexport declare function onBrandUpdated(\n  handler: (event: BrandUpdatedEnvelope) => void | Promise<void>\n): void;\n\ntype BrandNonNullablePaths = `name`;\n\n/**\n * Creates a brand.\n *\n * To assign the brand to a product, include the `brand.id` or `brand.name`\n * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or\n * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.\n * @param brand - Brand to create.\n * @public\n * @documentationMaturity preview\n * @requiredField brand\n * @requiredField brand.name\n * @permissionId WIX_STORES.BRAND_CREATE\n * @applicableIdentity APP\n * @returns Created brand.\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.CreateBrand\n */\nexport async function createBrand(\n  brand: NonNullablePaths<Brand, `name`>\n): Promise<NonNullablePaths<Brand, BrandNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ brand: brand });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.createBrand(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { brand: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['brand']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a brand.\n * @param brandId - Brand ID.\n * @public\n * @documentationMaturity preview\n * @requiredField brandId\n * @permissionId WIX_STORES.BRAND_READ\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @returns Brand.\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.GetBrand\n */\nexport async function getBrand(\n  brandId: string,\n  options?: GetBrandOptions\n): Promise<NonNullablePaths<Brand, BrandNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    brandId: brandId,\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.getBrand(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { brandId: '$[0]', fields: '$[1].fields' },\n        singleArgumentUnchanged: false,\n      },\n      ['brandId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetBrandOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Updates a brand.\n *\n * Each time the brand is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating the brand.\n * This ensures you're working with the latest brand and prevents unintended overwrites.\n * @param _id - Brand ID.\n * @public\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField brand\n * @requiredField brand.revision\n * @permissionId WIX_STORES.BRAND_UPDATE\n * @applicableIdentity APP\n * @returns Updated brand.\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.UpdateBrand\n */\nexport async function updateBrand(\n  _id: string,\n  brand: NonNullablePaths<UpdateBrand, `revision`>,\n  options?: UpdateBrandOptions\n): Promise<NonNullablePaths<Brand, BrandNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    brand: { ...brand, id: _id },\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.updateBrand(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { brand: '$[1]' },\n        explicitPathsToArguments: { 'brand.id': '$[0]', fields: '$[2].fields' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'brand', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateBrand {\n  /**\n   * Brand ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the brand is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the brand.\n   *\n   * Ignored when creating a brand.\n   * @readonly\n   */\n  revision?: string | null;\n  /**\n   * Date and time the brand was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the brand was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Brand name.\n   * >**Note:** `name` must be unique.\n   * @minLength 1\n   * @maxLength 50\n   */\n  name?: string;\n  /**\n   * Number of products this brand is assigned to.\n   * > **Note:** Returned only when you pass `\"ASSIGNED_PRODUCTS_COUNT\"` to the `fields` array in Brand API requests.\n   * @readonly\n   */\n  assignedProductsCount?: number | null;\n}\n\nexport interface UpdateBrandOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Deletes a brand.\n *\n * > **Note:** Deleting a brand will also remove it from all products it is assigned to.\n * @param brandId - Brand ID.\n * @public\n * @documentationMaturity preview\n * @requiredField brandId\n * @permissionId WIX_STORES.BRAND_DELETE\n * @applicableIdentity APP\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.DeleteBrand\n */\nexport async function deleteBrand(brandId: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ brandId: brandId });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.deleteBrand(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { brandId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['brandId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.\n * Pass supported values to the `fields` array in the request to include those fields in the response.\n *\n *\n * Query Brands runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n *\n * For field support for filters and sorting,\n * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).\n *\n * To learn about working with _Query_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),\n * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n * @public\n * @documentationMaturity preview\n * @permissionId WIX_STORES.BRAND_READ\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.QueryBrands\n */\nexport function queryBrands(options?: QueryBrandsOptions): BrandsQueryBuilder {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  return queryBuilder<Brand, 'CURSOR', QueryBrandsRequest, QueryBrandsResponse>(\n    {\n      func: async (payload: QueryBrandsRequest) => {\n        const reqOpts = ambassadorWixStoresCatalogV3Brand.queryBrands({\n          ...payload,\n          ...(options ?? {}),\n        });\n\n        sideEffects?.onSiteCall?.();\n        try {\n          const result = await httpClient.request(reqOpts);\n          sideEffects?.onSuccess?.(result);\n          return result;\n        } catch (err) {\n          sideEffects?.onError?.(err);\n          throw err;\n        }\n      },\n      requestTransformer: (query: QueryBrandsRequest['query']) => {\n        const args = [query, options] as [\n          QueryBrandsRequest['query'],\n          QueryBrandsOptions\n        ];\n        return renameKeysFromSDKRequestToRESTRequest({\n          ...args?.[1],\n          query: args?.[0],\n        });\n      },\n      responseTransformer: ({ data }: HttpResponse<QueryBrandsResponse>) => {\n        const transformedData = renameKeysFromRESTResponseToSDKResponse(\n          transformPaths(data, [])\n        );\n\n        return {\n          items: transformedData?.brands,\n          pagingMetadata: transformedData?.pagingMetadata,\n        };\n      },\n      errorTransformer: (err: unknown) => {\n        const transformedError = sdkTransformError(err, {\n          spreadPathsToArguments: {},\n          explicitPathsToArguments: { query: '$[0]' },\n          singleArgumentUnchanged: false,\n        });\n\n        throw transformedError;\n      },\n      pagingMethod: 'CURSOR',\n      transformationPaths: {},\n    }\n  );\n}\n\nexport interface QueryBrandsOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[] | undefined;\n}\n\ninterface QueryCursorResult {\n  cursors: Cursors;\n  hasNext: () => boolean;\n  hasPrev: () => boolean;\n  length: number;\n  pageSize: number;\n}\n\nexport interface BrandsQueryResult extends QueryCursorResult {\n  items: Brand[];\n  query: BrandsQueryBuilder;\n  next: () => Promise<BrandsQueryResult>;\n  prev: () => Promise<BrandsQueryResult>;\n}\n\nexport interface BrandsQueryBuilder {\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   * @documentationMaturity preview\n   */\n  eq: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   * @documentationMaturity preview\n   */\n  ne: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   * @documentationMaturity preview\n   */\n  ge: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   * @documentationMaturity preview\n   */\n  gt: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   * @documentationMaturity preview\n   */\n  le: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   * @documentationMaturity preview\n   */\n  lt: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `string`.\n   * @param string - String to compare against. Case-insensitive.\n   * @documentationMaturity preview\n   */\n  startsWith: (\n    propertyName: '_id' | 'name',\n    value: string\n  ) => BrandsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `values`.\n   * @param values - List of values to compare against.\n   * @documentationMaturity preview\n   */\n  hasSome: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any[]\n  ) => BrandsQueryBuilder;\n  /** @documentationMaturity preview */\n  in: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: any\n  ) => BrandsQueryBuilder;\n  /** @documentationMaturity preview */\n  exists: (\n    propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name',\n    value: boolean\n  ) => BrandsQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.\n   * @documentationMaturity preview\n   */\n  ascending: (\n    ...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>\n  ) => BrandsQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.\n   * @documentationMaturity preview\n   */\n  descending: (\n    ...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>\n  ) => BrandsQueryBuilder;\n  /** @param limit - Number of items to return, which is also the `pageSize` of the results object.\n   * @documentationMaturity preview\n   */\n  limit: (limit: number) => BrandsQueryBuilder;\n  /** @param cursor - A pointer to specific record\n   * @documentationMaturity preview\n   */\n  skipTo: (cursor: string) => BrandsQueryBuilder;\n  /** @documentationMaturity preview */\n  find: () => Promise<BrandsQueryResult>;\n}\n\n/**\n * Creates multiple brands.\n * @param brands - Brands to create.\n * @public\n * @documentationMaturity preview\n * @requiredField brands\n * @requiredField brands.name\n * @permissionId WIX_STORES.BRAND_CREATE\n * @applicableIdentity APP\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkCreateBrands\n */\nexport async function bulkCreateBrands(\n  brands: NonNullablePaths<Brand, `name`>[],\n  options?: BulkCreateBrandsOptions\n): Promise<\n  NonNullablePaths<\n    BulkCreateBrandsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | {\n        [P in BrandNonNullablePaths]: `results.${number}.item.${P}`;\n      }[BrandNonNullablePaths]\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    brands: brands,\n    returnEntity: options?.returnEntity,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkCreateBrands(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          brands: '$[0]',\n          returnEntity: '$[1].returnEntity',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['brands', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkCreateBrandsOptions {\n  /**\n   * Whether to return the full created brand entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n}\n\n/**\n * Updates multiple brands.\n *\n * Each time a brand is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating a brand.\n * This ensures you're working with the latest brand and prevents unintended overwrites.\n * @param brands - List of brands to update.\n * @public\n * @documentationMaturity preview\n * @requiredField brands\n * @requiredField brands.brand._id\n * @requiredField brands.brand.revision\n * @permissionId WIX_STORES.BRAND_UPDATE\n * @applicableIdentity APP\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkUpdateBrands\n */\nexport async function bulkUpdateBrands(\n  brands: NonNullablePaths<MaskedBrand, `brand._id` | `brand.revision`>[],\n  options?: BulkUpdateBrandsOptions\n): Promise<\n  NonNullablePaths<\n    BulkUpdateBrandsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | {\n        [P in BrandNonNullablePaths]: `results.${number}.item.${P}`;\n      }[BrandNonNullablePaths]\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    brands: brands,\n    returnEntity: options?.returnEntity,\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkUpdateBrands(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          brands: '$[0]',\n          returnEntity: '$[1].returnEntity',\n          fields: '$[1].fields',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['brands', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkUpdateBrandsOptions {\n  /**\n   * Whether to return the full updated brand entities in the response.\n   *\n   * Default: `false`\n   */\n  returnEntity?: boolean;\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.\n * @param brandName - Brand name to retrieve or create.\n * @public\n * @documentationMaturity preview\n * @requiredField brandName\n * @permissionId WIX_STORES.BRAND_GET_OR_CREATE\n * @applicableIdentity APP\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.GetOrCreateBrand\n */\nexport async function getOrCreateBrand(\n  brandName: string,\n  options?: GetOrCreateBrandOptions\n): Promise<\n  NonNullablePaths<\n    GetOrCreateBrandResponse,\n    { [P in BrandNonNullablePaths]: `brand.${P}` }[BrandNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    brandName: brandName,\n    fields: options?.fields,\n  });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.getOrCreateBrand(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { brandName: '$[0]', fields: '$[1].fields' },\n        singleArgumentUnchanged: false,\n      },\n      ['brandName', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetOrCreateBrandOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.\n * @param brandNames - Brand names to retrieve or create.\n * @public\n * @documentationMaturity preview\n * @requiredField brandNames\n * @permissionId WIX_STORES.BRAND_GET_OR_CREATE\n * @applicableIdentity APP\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkGetOrCreateBrands\n */\nexport async function bulkGetOrCreateBrands(\n  brandNames: string[],\n  options?: BulkGetOrCreateBrandsOptions\n): Promise<\n  NonNullablePaths<\n    BulkGetOrCreateBrandsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | {\n        [P in BrandNonNullablePaths]: `results.${number}.item.${P}`;\n      }[BrandNonNullablePaths]\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    brandNames: brandNames,\n    fields: options?.fields,\n  });\n\n  const reqOpts =\n    ambassadorWixStoresCatalogV3Brand.bulkGetOrCreateBrands(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { brandNames: '$[0]', fields: '$[1].fields' },\n        singleArgumentUnchanged: false,\n      },\n      ['brandNames', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkGetOrCreateBrandsOptions {\n  /**\n   * Fields to include in the response.\n   *\n   * Supported values: `ASSIGNED_PRODUCTS_COUNT`\n   * @maxSize 100\n   */\n  fields?: RequestedFieldsWithLiterals[];\n}\n\n/**\n * Deletes multiple brands.\n * @param brandIds - IDs of brands to delete.\n * @public\n * @documentationMaturity preview\n * @requiredField brandIds\n * @permissionId WIX_STORES.BRAND_DELETE\n * @applicableIdentity APP\n * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkDeleteBrands\n */\nexport async function bulkDeleteBrands(\n  brandIds: string[]\n): Promise<\n  NonNullablePaths<\n    BulkDeleteBrandsResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ brandIds: brandIds });\n\n  const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkDeleteBrands(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { brandIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['brandIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixStoresCatalogBrandV3BrandServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/stores/v3/brands',\n        destPath: '/v3/brands',\n      },\n      {\n        srcPath: '/stores/v3/bulk/brands',\n        destPath: '/v3/bulk/brands',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/brand',\n        destPath: '',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/brand',\n        destPath: '',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/brand',\n        destPath: '',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/brand',\n        destPath: '',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/brand',\n        destPath: '',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/brand',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_stores_brands-v-3';\n\n/**\n * Creates a brand.\n *\n * To assign the brand to a product, include the `brand.id` or `brand.name`\n * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or\n * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.\n */\nexport function createBrand(payload: object): RequestOptionsFactory<any> {\n  function __createBrand({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'brand.createdDate' }, { path: 'brand.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.stores.catalog.brand.v3.BrandService.CreateBrand',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/brands',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'brand.createdDate' },\n              { path: 'brand.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createBrand;\n}\n\n/** Retrieves a brand. */\nexport function getBrand(payload: object): RequestOptionsFactory<any> {\n  function __getBrand({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'GET' as any,\n      methodFqn: 'com.wix.stores.catalog.brand.v3.BrandService.GetBrand',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/brands/{brandId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'brand.createdDate' },\n              { path: 'brand.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getBrand;\n}\n\n/**\n * Updates a brand.\n *\n * Each time the brand is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating the brand.\n * This ensures you're working with the latest brand and prevents unintended overwrites.\n */\nexport function updateBrand(payload: object): RequestOptionsFactory<any> {\n  function __updateBrand({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'brand.createdDate' }, { path: 'brand.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wix.stores.catalog.brand.v3.BrandService.UpdateBrand',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/brands/{brand.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'brand.createdDate' },\n              { path: 'brand.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateBrand;\n}\n\n/**\n * Deletes a brand.\n *\n * > **Note:** Deleting a brand will also remove it from all products it is assigned to.\n */\nexport function deleteBrand(payload: object): RequestOptionsFactory<any> {\n  function __deleteBrand({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wix.stores.catalog.brand.v3.BrandService.DeleteBrand',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/brands/{brandId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteBrand;\n}\n\n/**\n * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.\n * Pass supported values to the `fields` array in the request to include those fields in the response.\n *\n *\n * Query Brands runs with these defaults, which you can override:\n *\n * - `createdDate` is sorted in `DESC` order\n * - `cursorPaging.limit` is `100`\n *\n * For field support for filters and sorting,\n * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).\n *\n * To learn about working with _Query_ endpoints, see\n * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),\n * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).\n */\nexport function queryBrands(payload: object): RequestOptionsFactory<any> {\n  function __queryBrands({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.stores.catalog.brand.v3.BrandService.QueryBrands',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/brands/query',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'brands.createdDate' },\n              { path: 'brands.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __queryBrands;\n}\n\n/** Creates multiple brands. */\nexport function bulkCreateBrands(payload: object): RequestOptionsFactory<any> {\n  function __bulkCreateBrands({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'brands.createdDate' }, { path: 'brands.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.stores.catalog.brand.v3.BrandService.BulkCreateBrands',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/bulk/brands/create',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkCreateBrands;\n}\n\n/**\n * Updates multiple brands.\n *\n * Each time a brand is updated, `revision` increments by 1.\n * The current `revision` must be passed when updating a brand.\n * This ensures you're working with the latest brand and prevents unintended overwrites.\n */\nexport function bulkUpdateBrands(payload: object): RequestOptionsFactory<any> {\n  function __bulkUpdateBrands({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'brands.fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'brands.brand.createdDate' },\n          { path: 'brands.brand.updatedDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.stores.catalog.brand.v3.BrandService.BulkUpdateBrands',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/bulk/brands/update',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkUpdateBrands;\n}\n\n/** Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist. */\nexport function getOrCreateBrand(payload: object): RequestOptionsFactory<any> {\n  function __getOrCreateBrand({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.stores.catalog.brand.v3.BrandService.GetOrCreateBrand',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/brands/get-or-create',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'brand.createdDate' },\n              { path: 'brand.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getOrCreateBrand;\n}\n\n/** Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist. */\nexport function bulkGetOrCreateBrands(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkGetOrCreateBrands({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.stores.catalog.brand.v3.BrandService.BulkGetOrCreateBrands',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/bulk/brands/get-or-create',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'results.item.createdDate' },\n              { path: 'results.item.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __bulkGetOrCreateBrands;\n}\n\n/** Deletes multiple brands. */\nexport function bulkDeleteBrands(payload: object): RequestOptionsFactory<any> {\n  function __bulkDeleteBrands({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.stores.catalog.v3.brand',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wix.stores.catalog.brand.v3.BrandService.BulkDeleteBrands',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixStoresCatalogBrandV3BrandServiceUrl({\n        protoPath: '/v3/bulk/brands/delete',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkDeleteBrands;\n}\n","import {\n  createBrand as publicCreateBrand,\n  getBrand as publicGetBrand,\n  updateBrand as publicUpdateBrand,\n  deleteBrand as publicDeleteBrand,\n  queryBrands as publicQueryBrands,\n  bulkCreateBrands as publicBulkCreateBrands,\n  bulkUpdateBrands as publicBulkUpdateBrands,\n  getOrCreateBrand as publicGetOrCreateBrand,\n  bulkGetOrCreateBrands as publicBulkGetOrCreateBrands,\n  bulkDeleteBrands as publicBulkDeleteBrands,\n} from './stores-catalog-v3-brand-brands-v-3.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { createEventModule } from '@wix/sdk-runtime/event-definition-modules';\nimport {\n  BuildRESTFunction,\n  MaybeContext,\n  BuildEventDefinition,\n} from '@wix/sdk-types';\nimport { onBrandCreated as publicOnBrandCreated } from './stores-catalog-v3-brand-brands-v-3.public.js';\nimport { onBrandDeleted as publicOnBrandDeleted } from './stores-catalog-v3-brand-brands-v-3.public.js';\nimport { onBrandUpdated as publicOnBrandUpdated } from './stores-catalog-v3-brand-brands-v-3.public.js';\n\nexport const createBrand: MaybeContext<\n  BuildRESTFunction<typeof publicCreateBrand> & typeof publicCreateBrand\n> = /*#__PURE__*/ createRESTModule(publicCreateBrand);\nexport const getBrand: MaybeContext<\n  BuildRESTFunction<typeof publicGetBrand> & typeof publicGetBrand\n> = /*#__PURE__*/ createRESTModule(publicGetBrand);\nexport const updateBrand: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateBrand> & typeof publicUpdateBrand\n> = /*#__PURE__*/ createRESTModule(publicUpdateBrand);\nexport const deleteBrand: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteBrand> & typeof publicDeleteBrand\n> = /*#__PURE__*/ createRESTModule(publicDeleteBrand);\nexport const queryBrands: MaybeContext<\n  BuildRESTFunction<typeof publicQueryBrands> & typeof publicQueryBrands\n> = /*#__PURE__*/ createRESTModule(publicQueryBrands);\nexport const bulkCreateBrands: MaybeContext<\n  BuildRESTFunction<typeof publicBulkCreateBrands> &\n    typeof publicBulkCreateBrands\n> = /*#__PURE__*/ createRESTModule(publicBulkCreateBrands);\nexport const bulkUpdateBrands: MaybeContext<\n  BuildRESTFunction<typeof publicBulkUpdateBrands> &\n    typeof publicBulkUpdateBrands\n> = /*#__PURE__*/ createRESTModule(publicBulkUpdateBrands);\nexport const getOrCreateBrand: MaybeContext<\n  BuildRESTFunction<typeof publicGetOrCreateBrand> &\n    typeof publicGetOrCreateBrand\n> = /*#__PURE__*/ createRESTModule(publicGetOrCreateBrand);\nexport const bulkGetOrCreateBrands: MaybeContext<\n  BuildRESTFunction<typeof publicBulkGetOrCreateBrands> &\n    typeof publicBulkGetOrCreateBrands\n> = /*#__PURE__*/ createRESTModule(publicBulkGetOrCreateBrands);\nexport const bulkDeleteBrands: MaybeContext<\n  BuildRESTFunction<typeof publicBulkDeleteBrands> &\n    typeof publicBulkDeleteBrands\n> = /*#__PURE__*/ createRESTModule(publicBulkDeleteBrands);\n/**\n * Triggered when a brand is created.\n */\nexport const onBrandCreated: BuildEventDefinition<typeof publicOnBrandCreated> =\n  createEventModule(publicOnBrandCreated);\n/**\n * Triggered when a brand is deleted.\n */\nexport const onBrandDeleted: BuildEventDefinition<typeof publicOnBrandDeleted> =\n  createEventModule(publicOnBrandDeleted);\n/**\n * Triggered when a brand is updated.\n */\nexport const onBrandUpdated: BuildEventDefinition<typeof publicOnBrandUpdated> =\n  createEventModule(publicOnBrandUpdated);\n\nexport {\n  RequestedFields,\n  SortOrder,\n  WebhookIdentityType,\n} from './stores-catalog-v3-brand-brands-v-3.universal.js';\nexport {\n  Brand,\n  InvalidateCache,\n  InvalidateCacheGetByOneOf,\n  App,\n  Page,\n  URI,\n  File,\n  CustomTag,\n  CreateBrandRequest,\n  CreateBrandResponse,\n  GetBrandRequest,\n  GetBrandResponse,\n  UpdateBrandRequest,\n  UpdateBrandResponse,\n  DeleteBrandRequest,\n  DeleteBrandResponse,\n  QueryBrandsRequest,\n  CursorQuery,\n  CursorQueryPagingMethodOneOf,\n  Sorting,\n  CursorPaging,\n  QueryBrandsResponse,\n  CursorPagingMetadata,\n  Cursors,\n  BulkCreateBrandsRequest,\n  BulkCreateBrandsResponse,\n  BulkBrandsResult,\n  ItemMetadata,\n  ApplicationError,\n  BulkActionMetadata,\n  BulkUpdateBrandsRequest,\n  MaskedBrand,\n  BulkUpdateBrandsResponse,\n  GetOrCreateBrandRequest,\n  GetOrCreateBrandResponse,\n  BulkGetOrCreateBrandsRequest,\n  BulkGetOrCreateBrandsResponse,\n  BulkDeleteBrandsRequest,\n  BulkDeleteBrandsResponse,\n  BulkDeleteBrandsResponseBulkBrandsResult,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  Empty,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  BaseEventMetadata,\n  EventMetadata,\n  BrandCreatedEnvelope,\n  BrandDeletedEnvelope,\n  BrandUpdatedEnvelope,\n  GetBrandOptions,\n  UpdateBrand,\n  UpdateBrandOptions,\n  QueryBrandsOptions,\n  BrandsQueryResult,\n  BrandsQueryBuilder,\n  BulkCreateBrandsOptions,\n  BulkUpdateBrandsOptions,\n  GetOrCreateBrandOptions,\n  BulkGetOrCreateBrandsOptions,\n} from './stores-catalog-v3-brand-brands-v-3.universal.js';\n"],"mappings":"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","names":["renameKeysFromRESTResponseToSDKResponse","transformRESTTimestampToSDKTimestamp","transformPaths","payload","transformPaths","RequestedFields","SortOrder","WebhookIdentityType","createBrand","getBrand","updateBrand","deleteBrand","queryBrands","bulkCreateBrands","bulkUpdateBrands","getOrCreateBrand","bulkGetOrCreateBrands","bulkDeleteBrands","createBrand","getBrand","updateBrand","deleteBrand","queryBrands","bulkCreateBrands","bulkUpdateBrands","getOrCreateBrand","bulkGetOrCreateBrands","bulkDeleteBrands","renameKeysFromRESTResponseToSDKResponse","transformPaths","transformRESTTimestampToSDKTimestamp","createBrand","getBrand","updateBrand","deleteBrand","queryBrands","bulkCreateBrands","bulkUpdateBrands","getOrCreateBrand","bulkGetOrCreateBrands","bulkDeleteBrands","onBrandCreated","onBrandDeleted","onBrandUpdated"]}