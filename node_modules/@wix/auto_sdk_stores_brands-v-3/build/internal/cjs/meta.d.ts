import { q as CreateBrandRequest$1, r as CreateBrandResponse$1, s as GetBrandRequest$1, t as GetBrandResponse$1, u as UpdateBrandRequest$1, v as UpdateBrandResponse$1, D as DeleteBrandRequest$1, w as DeleteBrandResponse$1, x as QueryBrandsRequest$1, J as QueryBrandsResponse$1, N as BulkCreateBrandsRequest$1, d as BulkCreateBrandsResponse$1, Y as BulkUpdateBrandsRequest$1, f as BulkUpdateBrandsResponse$1, Z as GetOrCreateBrandRequest$1, h as GetOrCreateBrandResponse$1, _ as BulkGetOrCreateBrandsRequest$1, j as BulkGetOrCreateBrandsResponse$1, $ as BulkDeleteBrandsRequest$1, k as BulkDeleteBrandsResponse$1 } from './stores-catalog-v3-brand-brands-v-3.universal-BbRiIejt.js';

/**
 * A brand is a visible property of a product.
 * Adding brands to your products can help improve site and product visibility on search engines.
 */
interface Brand {
    /**
     * Brand ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the brand is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the brand.
     *
     * Ignored when creating a brand.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the brand was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the brand was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Brand name.
     * >**Note:** `name` must be unique.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Number of products this brand is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCTS_COUNT"` to the `fields` array in Brand API requests.
     * @readonly
     */
    assignedProductsCount?: number | null;
}
interface CreateBrandRequest {
    /** Brand to create. */
    brand: Brand;
}
interface CreateBrandResponse {
    /** Created brand. */
    brand?: Brand;
}
interface GetBrandRequest {
    /**
     * Brand ID.
     * @format GUID
     */
    brandId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCTS_COUNT = "ASSIGNED_PRODUCTS_COUNT"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'ASSIGNED_PRODUCTS_COUNT';
interface GetBrandResponse {
    /** Brand. */
    brand?: Brand;
}
interface UpdateBrandRequest {
    /** Brand to update. */
    brand: Brand;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface UpdateBrandResponse {
    /** Updated brand. */
    brand?: Brand;
}
interface DeleteBrandRequest {
    /**
     * Brand ID.
     * @format GUID
     */
    brandId: string;
}
interface DeleteBrandResponse {
}
interface QueryBrandsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 300
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryBrandsResponse {
    /**
     * List of brands.
     * @minSize 1
     * @maxSize 300
     */
    brands?: Brand[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface BulkCreateBrandsRequest {
    /**
     * Brands to create.
     * @minSize 1
     * @maxSize 100
     */
    brands: Brand[];
    /**
     * Whether to return the full created brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
interface BulkCreateBrandsResponse {
    /**
     * Brands created by bulk action.
     * @maxSize 100
     */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata;
    /**
     * Full brand entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Brand;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @format GUID
     */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkUpdateBrandsRequest {
    /**
     * List of brands to update.
     * @minSize 1
     * @maxSize 100
     */
    brands: MaskedBrand[];
    /**
     * Whether to return the full updated brand entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface MaskedBrand {
    /** Brand to update. */
    brand?: Brand;
    /** Explicit list of fields to update. */
    fieldMask?: string[];
}
interface BulkUpdateBrandsResponse {
    /**
     * Brands updated by bulk action.
     * @maxSize 100
     */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface GetOrCreateBrandRequest {
    /**
     * Brand name to retrieve or create.
     * @minLength 1
     * @maxLength 50
     */
    brandName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface GetOrCreateBrandResponse {
    /** Brand. */
    brand?: Brand;
}
interface BulkGetOrCreateBrandsRequest {
    /**
     * Brand names to retrieve or create.
     * @minLength 1
     * @maxLength 50
     * @minSize 1
     * @maxSize 100
     */
    brandNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface BulkGetOrCreateBrandsResponse {
    /**
     * Brands retrieved or created by bulk action.
     * @maxSize 100
     */
    results?: BulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteBrandsRequest {
    /**
     * IDs of brands to delete.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    brandIds: string[];
}
interface BulkDeleteBrandsResponse {
    /** Brands deleted by bulk action. */
    results?: BulkDeleteBrandsResponseBulkBrandsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkDeleteBrandsResponseBulkBrandsResult {
    /** Bulk action metadata for brand. */
    itemMetadata?: ItemMetadata;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createBrand(): __PublicMethodMetaInfo<'POST', {}, CreateBrandRequest$1, CreateBrandRequest, CreateBrandResponse$1, CreateBrandResponse>;
declare function getBrand(): __PublicMethodMetaInfo<'GET', {
    brandId: string;
}, GetBrandRequest$1, GetBrandRequest, GetBrandResponse$1, GetBrandResponse>;
declare function updateBrand(): __PublicMethodMetaInfo<'PATCH', {
    brandId: string;
}, UpdateBrandRequest$1, UpdateBrandRequest, UpdateBrandResponse$1, UpdateBrandResponse>;
declare function deleteBrand(): __PublicMethodMetaInfo<'DELETE', {
    brandId: string;
}, DeleteBrandRequest$1, DeleteBrandRequest, DeleteBrandResponse$1, DeleteBrandResponse>;
declare function queryBrands(): __PublicMethodMetaInfo<'POST', {}, QueryBrandsRequest$1, QueryBrandsRequest, QueryBrandsResponse$1, QueryBrandsResponse>;
declare function bulkCreateBrands(): __PublicMethodMetaInfo<'POST', {}, BulkCreateBrandsRequest$1, BulkCreateBrandsRequest, BulkCreateBrandsResponse$1, BulkCreateBrandsResponse>;
declare function bulkUpdateBrands(): __PublicMethodMetaInfo<'POST', {}, BulkUpdateBrandsRequest$1, BulkUpdateBrandsRequest, BulkUpdateBrandsResponse$1, BulkUpdateBrandsResponse>;
declare function getOrCreateBrand(): __PublicMethodMetaInfo<'POST', {}, GetOrCreateBrandRequest$1, GetOrCreateBrandRequest, GetOrCreateBrandResponse$1, GetOrCreateBrandResponse>;
declare function bulkGetOrCreateBrands(): __PublicMethodMetaInfo<'POST', {}, BulkGetOrCreateBrandsRequest$1, BulkGetOrCreateBrandsRequest, BulkGetOrCreateBrandsResponse$1, BulkGetOrCreateBrandsResponse>;
declare function bulkDeleteBrands(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteBrandsRequest$1, BulkDeleteBrandsRequest, BulkDeleteBrandsResponse$1, BulkDeleteBrandsResponse>;

export { type __PublicMethodMetaInfo, bulkCreateBrands, bulkDeleteBrands, bulkGetOrCreateBrands, bulkUpdateBrands, createBrand, deleteBrand, getBrand, getOrCreateBrand, queryBrands, updateBrand };
