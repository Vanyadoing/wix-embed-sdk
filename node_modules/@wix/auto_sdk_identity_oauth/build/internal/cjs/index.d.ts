import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { T as TokenOptions, R as RawHttpResponse, a as TokenInfoOptions, b as TokenInfoResponse } from './identity-oauth-v1-refresh-token-oauth.universal-DIzKUWYi.js';
export { s as ActionEvent, A as AuthorizeRequest, D as DeviceCodeRequest, e as DeviceCodeResponse, f as DeviceVerifyRequest, g as DeviceVerifyResponse, h as DeviceVerifyV2Request, i as DeviceVerifyV2Response, m as DomainEvent, n as DomainEventBodyOneOf, E as Empty, o as EntityCreatedEvent, r as EntityDeletedEvent, q as EntityUpdatedEvent, H as HeadersEntry, I as InvalidateUserCodeRequest, j as InvalidateUserCodeResponse, P as PathParametersEntry, Q as QueryParametersEntry, d as RawHttpRequest, c as RefreshToken, p as RestoreInfo, k as RevokeRefreshTokenRequest, l as RevokeRefreshTokenResponse, S as SubjectType } from './identity-oauth-v1-refresh-token-oauth.universal-DIzKUWYi.js';

declare function token$1(httpClient: HttpClient): TokenSignature;
interface TokenSignature {
    /**
     * Creates an access token.
     *
     *
     * The endpoint accepts raw HTTP requests. You must pass the request's body
     * parameters formatted as bytes in the raw HTTP request's `body` field,
     * following this template:
     * `{"grantType": "client_credentials", "client_id": "<APP_ID>", "client_secret": "<APP_SECRET_KEY>", "instance_id": "<INSTANCE_ID>"}`.
     *
     * When the call succeeds, Wix returns `{"statusCode": 200}` and the created access
     * token in the `body` field of the raw HTTP response.
     *
     * In case the call fails, Wix returns the relevant `4XX` error code in the raw
     * HTTP response's `statusCode` field and details
     * about the error in `body`. Error details follow the
     * [conventions of the Internet Engineering Task Force (IETF)](https://datatracker.ietf.org/doc/html/rfc6749#appendix-A.7).
     */
    (options?: TokenOptions | undefined): Promise<RawHttpResponse>;
}
declare function tokenInfo$1(httpClient: HttpClient): TokenInfoSignature;
interface TokenInfoSignature {
    /**
     * Token Introspection Endpoint.
     */
    (options?: TokenInfoOptions | undefined): Promise<TokenInfoResponse>;
}

declare const token: MaybeContext<BuildRESTFunction<typeof token$1> & typeof token$1>;
declare const tokenInfo: MaybeContext<BuildRESTFunction<typeof tokenInfo$1> & typeof tokenInfo$1>;

export { RawHttpResponse, TokenInfoOptions, TokenInfoResponse, TokenOptions, token, tokenInfo };
