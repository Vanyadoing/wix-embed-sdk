// src/identity-oauth-v1-refresh-token-oauth.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/identity-oauth-v1-refresh-token-oauth.http.ts
import { transformSDKBytesToRESTBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformRESTBytesToSDKBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixIdentityOauth2V1Oauth2NgUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/oauth2",
        destPath: "/v1/oauth"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/oauth2",
        destPath: "/v1/oauth"
      },
      {
        srcPath: "/oauth2/token_info",
        destPath: "/v1/token_info"
      }
    ],
    "users._base_domain_": [
      {
        srcPath: "/v1/oauth/device/verify",
        destPath: "/v1/oauth/device/verify"
      },
      {
        srcPath: "/v1/oauth/manage/user-code",
        destPath: "/v1/oauth/manage/user-code"
      },
      {
        srcPath: "/v2/oauth/device/verify",
        destPath: "/v2/oauth/device/verify"
      },
      {
        srcPath: "/v1/oauth/authorize",
        destPath: "/v1/oauth/authorize"
      }
    ],
    _: [
      {
        srcPath: "/_api/oauth2",
        destPath: "/v1/oauth"
      }
    ],
    "platform.rise.ai": [
      {
        srcPath: "/oauth2",
        destPath: "/v1/oauth"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/oauth2-ng",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_identity_oauth";
function token(payload) {
  function __token({ host }) {
    const serializedData = transformPaths(payload, [
      { transformFn: transformSDKBytesToRESTBytes, paths: [{ path: "body" }] }
    ]);
    const metadata = {
      entityFqdn: "wix.identity.oauth.v1.refresh_token",
      method: "POST",
      methodFqn: "wix.identity.oauth2.v1.Oauth2Ng.Token",
      packageName: PACKAGE_NAME,
      url: resolveWixIdentityOauth2V1Oauth2NgUrl({
        protoPath: "/v1/oauth/token",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "body" }]
        }
      ])
    };
    return metadata;
  }
  return __token;
}
function tokenInfo(payload) {
  function __tokenInfo({ host }) {
    const serializedData = transformPaths(payload, [
      { transformFn: transformSDKBytesToRESTBytes, paths: [{ path: "body" }] }
    ]);
    const metadata = {
      entityFqdn: "wix.identity.oauth.v1.refresh_token",
      method: "POST",
      methodFqn: "wix.identity.oauth2.v1.Oauth2Ng.TokenInfo",
      packageName: PACKAGE_NAME,
      url: resolveWixIdentityOauth2V1Oauth2NgUrl({
        protoPath: "/v1/oauth/token-info",
        data: serializedData,
        host
      }),
      data: serializedData
    };
    return metadata;
  }
  return __tokenInfo;
}

// src/identity-oauth-v1-refresh-token-oauth.universal.ts
var SubjectType = /* @__PURE__ */ ((SubjectType2) => {
  SubjectType2["UNKNOWN"] = "UNKNOWN";
  SubjectType2["USER"] = "USER";
  SubjectType2["VISITOR"] = "VISITOR";
  SubjectType2["MEMBER"] = "MEMBER";
  SubjectType2["APP"] = "APP";
  return SubjectType2;
})(SubjectType || {});
async function token2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    body: options?.body,
    pathParams: options?.pathParams,
    queryParams: options?.queryParams,
    headers: options?.headers,
    method: options?.method,
    rawPath: options?.rawPath,
    rawQuery: options?.rawQuery
  });
  const reqOpts = token(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          body: "$[0].body",
          pathParams: "$[0].pathParams",
          queryParams: "$[0].queryParams",
          headers: "$[0].headers",
          method: "$[0].method",
          rawPath: "$[0].rawPath",
          rawQuery: "$[0].rawQuery"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function tokenInfo2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    body: options?.body,
    pathParams: options?.pathParams,
    queryParams: options?.queryParams,
    headers: options?.headers,
    method: options?.method,
    rawPath: options?.rawPath,
    rawQuery: options?.rawQuery
  });
  const reqOpts = tokenInfo(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          body: "$[0].body",
          pathParams: "$[0].pathParams",
          queryParams: "$[0].queryParams",
          headers: "$[0].headers",
          method: "$[0].method",
          rawPath: "$[0].rawPath",
          rawQuery: "$[0].rawQuery"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/identity-oauth-v1-refresh-token-oauth.public.ts
function token3(httpClient) {
  return (options) => token2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function tokenInfo3(httpClient) {
  return (options) => tokenInfo2(
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/identity-oauth-v1-refresh-token-oauth.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var token4 = /* @__PURE__ */ createRESTModule(token3);
var tokenInfo4 = /* @__PURE__ */ createRESTModule(tokenInfo3);
export {
  SubjectType,
  token4 as token,
  tokenInfo4 as tokenInfo
};
//# sourceMappingURL=index.mjs.map