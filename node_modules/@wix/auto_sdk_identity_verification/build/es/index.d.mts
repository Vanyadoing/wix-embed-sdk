import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { S as StartOptions, a as StartResponse, V as VerifyDuringAuthenticationOptions, b as StateMachineResponse } from './iam-verification-v1-start-response-verification.universal-BCYrBbF0.mjs';
export { y as Address, A as AddressTag, x as AddressWrapper, $ as AuthenticationExtensionInputs, a0 as AuthenticationExtensionInputsLargeBlobOperationOneOf, o as AuthenticatorConnection, C as Connection, m as ConnectionTypeOneOf, q as CustomField, H as CustomValue, J as CustomValueValueOneOf, B as Email, E as EmailTag, G as Factor, g as FactorStatus, F as FactorType, I as Identity, p as IdentityProfile, n as IdpConnection, L as ListValue, K as MapValue, z as Metadata, Q as MfaChallengeData, M as MfaReason, w as Phone, d as PhoneTag, P as PrivacyStatus, _ as PublicKeyCredentialDescriptor, Y as PushChallengeData, R as Reason, N as RequireMfaData, a1 as ResendDuringAuthenticationRequest, v as SecondaryEmail, h as StartRequest, l as StateMachineResponseStateDataOneOf, c as StateType, f as Status, e as StatusName, D as StatusV2, T as Target, U as UserVerificationRequirement, r as V1CustomValue, s as V1CustomValueValueOneOf, O as V1Factor, t as V1ListValue, u as V1MapValue, W as VerificationChallenge, X as VerificationChallengeFactorChallengeDataOneOf, k as VerifyDuringAuthenticationRequest, i as VerifyRequest, j as VerifyResponse, Z as WebAuthnChallengeData } from './iam-verification-v1-start-response-verification.universal-BCYrBbF0.mjs';

declare function start$1(httpClient: HttpClient): StartSignature;
interface StartSignature {
    /**
     * starts a verification process
     * example: sends a code to the identity's email
     */
    (options?: StartOptions | undefined): Promise<StartResponse>;
}
declare function verifyDuringAuthentication$1(httpClient: HttpClient): VerifyDuringAuthenticationSignature;
interface VerifyDuringAuthenticationSignature {
    /**
     * Continues the registration process when a member is required to verify an email address
     * using a verification code received by email.
     *
     * Email verification is required when the registering member is already listed as a contact.
     *
     * Typically, after a successful verification, you generate and use member tokens for the
     * registered member so that subsequent API calls are called as part of a member session.
     * @param - The code to verify.
     */
    (code: string, options: VerifyDuringAuthenticationOptions): Promise<StateMachineResponse>;
}
declare function resendDuringAuthentication$1(httpClient: HttpClient): ResendDuringAuthenticationSignature;
interface ResendDuringAuthenticationSignature {
    /**
     * Resend the verification email and continue the registration process when a member is required to verify an email address
     * using a verification code received by email.
     * @param - A state token representing the `REQUIRE_EMAIL_VERIFICATION` state.
     */
    (stateToken: string): Promise<StateMachineResponse>;
}

declare const start: MaybeContext<BuildRESTFunction<typeof start$1> & typeof start$1>;
declare const verifyDuringAuthentication: MaybeContext<BuildRESTFunction<typeof verifyDuringAuthentication$1> & typeof verifyDuringAuthentication$1>;
declare const resendDuringAuthentication: MaybeContext<BuildRESTFunction<typeof resendDuringAuthentication$1> & typeof resendDuringAuthentication$1>;

export { StartOptions, StartResponse, StateMachineResponse, VerifyDuringAuthenticationOptions, resendDuringAuthentication, start, verifyDuringAuthentication };
