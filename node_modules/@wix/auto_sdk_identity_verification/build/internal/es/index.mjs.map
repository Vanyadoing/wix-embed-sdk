{"version":3,"sources":["../../../src/iam-verification-v1-start-response-verification.universal.ts","../../../src/iam-verification-v1-start-response-verification.http.ts","../../../src/iam-verification-v1-start-response-verification.public.ts","../../../src/iam-verification-v1-start-response-verification.context.ts"],"sourcesContent":["import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixIamVerificationV1StartResponse from './iam-verification-v1-start-response-verification.http.js';\nimport { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\nexport interface StartResponse {\n  /** the identifier of the verification process */\n  verificationId?: string;\n}\n\nexport interface StartRequest {\n  /**\n   * an identity_Id.\n   * If not provided - currently, an exception is thrown. In the future the identity from identity response will be taken.\n   * @format GUID\n   */\n  identityId?: string | null;\n  /** the delivery target */\n  target?: TargetWithLiterals;\n}\n\nexport enum Target {\n  UNKNOWN_TARGET = 'UNKNOWN_TARGET',\n  EMAIL = 'EMAIL',\n}\n\n/** @enumType */\nexport type TargetWithLiterals = Target | 'UNKNOWN_TARGET' | 'EMAIL';\n\nexport interface VerifyRequest {\n  /**\n   * the code to verify\n   * @minLength 6\n   * @maxLength 6\n   */\n  code?: string;\n  /** the identifier of the verification process */\n  verificationId?: string;\n}\n\nexport interface VerifyResponse {}\n\nexport interface VerifyDuringAuthenticationRequest {\n  /** The code to verify. */\n  code: string;\n  /** A state token representing the `REQUIRE_EMAIL_VERIFICATION` state. */\n  stateToken: string;\n}\n\nexport interface StateMachineResponse\n  extends StateMachineResponseStateDataOneOf {\n  /** Current state of the login or registration process. */\n  state?: StateTypeWithLiterals;\n  /** Session token. If `state` is not `SUCCESS`, this field is undefined. */\n  sessionToken?: string | null;\n  /** Token that represents the current state of the login or registration process. */\n  stateToken?: string | null;\n  /** Identity of the current member. */\n  identity?: Identity;\n  /** Additional data relevant to the login or registration process. */\n  additionalData?: Record<string, CustomValue>;\n}\n\n/** @oneof */\nexport interface StateMachineResponseStateDataOneOf {}\n\nexport enum StateType {\n  /** Initial unknown state. */\n  UNKNOWN_STATE = 'UNKNOWN_STATE',\n  /** Login completed successfully. */\n  SUCCESS = 'SUCCESS',\n  /** Indicates that the member needs the owner to approve their registration. */\n  REQUIRE_OWNER_APPROVAL = 'REQUIRE_OWNER_APPROVAL',\n  /** Indicates that the member needs to verify their email. */\n  REQUIRE_EMAIL_VERIFICATION = 'REQUIRE_EMAIL_VERIFICATION',\n  /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */\n  STATUS_CHECK = 'STATUS_CHECK',\n}\n\n/** @enumType */\nexport type StateTypeWithLiterals =\n  | StateType\n  | 'UNKNOWN_STATE'\n  | 'SUCCESS'\n  | 'REQUIRE_OWNER_APPROVAL'\n  | 'REQUIRE_EMAIL_VERIFICATION'\n  | 'STATUS_CHECK';\n\nexport interface Identity {\n  /**\n   * Identity ID.\n   * @format GUID\n   */\n  _id?: string | null;\n  /**\n   * Revision number, which increments by 1 each time the identity is updated.\n   * To prevent conflicting changes,\n   * the current revision must be passed when updating the identity.\n   *\n   * Ignored when creating an identity.\n   */\n  revision?: string | null;\n  /**\n   * Date and time the identity was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time the identity was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /** The identity configured connections to authenticate with. */\n  connections?: Connection[];\n  /** Identity profile. */\n  identityProfile?: IdentityProfile;\n  /**\n   * Additional information about the identity that can impact user access.\n   * This data cannot be set.\n   */\n  metadata?: Metadata;\n  /** Identity email address. */\n  email?: Email;\n  /** Identity's current status. */\n  status?: StatusV2;\n  /** Custom attributes. */\n  customAttributes?: Record<string, any> | null;\n  /**\n   * Identity verification factors.\n   * @maxSize 10\n   * @readonly\n   */\n  factors?: Factor[];\n}\n\nexport interface Connection extends ConnectionTypeOneOf {\n  /** IDP connection. */\n  idpConnection?: IdpConnection;\n  /** Authenticator connection. */\n  authenticatorConnection?: AuthenticatorConnection;\n}\n\n/** @oneof */\nexport interface ConnectionTypeOneOf {\n  /** IDP connection. */\n  idpConnection?: IdpConnection;\n  /** Authenticator connection. */\n  authenticatorConnection?: AuthenticatorConnection;\n}\n\nexport interface IdpConnection {\n  /**\n   * IDP connection ID.\n   * @format GUID\n   */\n  idpConnectionId?: string;\n  /** IDP user ID. */\n  idpUserId?: string;\n}\n\nexport interface AuthenticatorConnection {\n  /**\n   * Authenticator connection ID.\n   * @format GUID\n   */\n  authenticatorConnectionId?: string;\n  /** Whether re-enrollment is required. */\n  reEnrollmentRequired?: boolean;\n}\n\nexport interface IdentityProfile {\n  /** Profile first name. */\n  firstName?: string | null;\n  /** Profile last name. */\n  lastName?: string | null;\n  /** Profile nickname. */\n  nickname?: string | null;\n  /** Profile picture URL. */\n  picture?: string | null;\n  /**\n   * Deprecated. Use `secondaryEmails` instead.\n   * @deprecated Deprecated. Use `secondaryEmails` instead.\n   * @replacedBy secondary_emails\n   * @targetRemovalDate 2023-11-01\n   */\n  emails?: string[];\n  /**\n   * Deprecated. Use `phonesV2` instead.\n   * @deprecated Deprecated. Use `phonesV2` instead.\n   * @replacedBy phones_v2\n   * @targetRemovalDate 2023-11-01\n   */\n  phones?: string[];\n  /**\n   * List of profile labels.\n   * @maxSize 2000\n   */\n  labels?: string[];\n  /**\n   * Profile language.\n   * @format LANGUAGE\n   */\n  language?: string | null;\n  /** Profile privacy status. */\n  privacyStatus?: PrivacyStatusWithLiterals;\n  /**\n   * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\n   * are used to store additional information about your site or app's contacts.\n   */\n  customFields?: CustomField[];\n  /** List of profile email addresses. */\n  secondaryEmails?: SecondaryEmail[];\n  /** List of profile phone numbers. */\n  phonesV2?: Phone[];\n  /** List of profile physical addresses. */\n  addresses?: AddressWrapper[];\n  /**\n   * Company name.\n   * @maxLength 1000\n   */\n  company?: string | null;\n  /**\n   * Position within company.\n   * @maxLength 1000\n   */\n  position?: string | null;\n  /**\n   * Profile birthdate in `YYYY-MM-DD` format.\n   * @format LOCAL_DATE\n   */\n  birthdate?: string | null;\n  /**\n   * Profile slug.\n   * @maxLength 255\n   */\n  slug?: string | null;\n  /** Consent to be added to mailing list */\n  subscription?: boolean | null;\n  /**\n   * Government id for personal/corporate (Vat ID).\n   * @maxLength 1000\n   */\n  vatId?: string | null;\n}\n\nexport enum PrivacyStatus {\n  /** No defined privacy status. */\n  UNDEFINED = 'UNDEFINED',\n  /** Profile details, such as profile name and profile picture, are visible to other members. */\n  PUBLIC = 'PUBLIC',\n  /** Profile details aren't visible to other members. */\n  PRIVATE = 'PRIVATE',\n}\n\n/** @enumType */\nexport type PrivacyStatusWithLiterals =\n  | PrivacyStatus\n  | 'UNDEFINED'\n  | 'PUBLIC'\n  | 'PRIVATE';\n\nexport interface CustomField {\n  /**\n   * Custom field name. The name must match one of the key properties of the objects returned by\n   * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)\n   * with the `custom.` prefix removed.\n   */\n  name?: string;\n  /** Custom field value. */\n  value?: V1CustomValue;\n}\n\nexport interface V1CustomValue extends V1CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Array of values. */\n  listValue?: V1ListValue;\n  /** Map of values. */\n  mapValue?: V1MapValue;\n}\n\n/** @oneof */\nexport interface V1CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Array of values. */\n  listValue?: V1ListValue;\n  /** Map of values. */\n  mapValue?: V1MapValue;\n}\n\nexport interface V1ListValue {\n  /** Custom value. */\n  value?: V1CustomValue[];\n}\n\nexport interface V1MapValue {\n  /** Mapped custom value. */\n  value?: Record<string, V1CustomValue>;\n}\n\nexport interface SecondaryEmail {\n  /**\n   * Email address.\n   * @format EMAIL\n   */\n  email?: string;\n  /** Email tag. */\n  tag?: EmailTagWithLiterals;\n}\n\nexport enum EmailTag {\n  UNTAGGED = 'UNTAGGED',\n  MAIN = 'MAIN',\n  HOME = 'HOME',\n  WORK = 'WORK',\n}\n\n/** @enumType */\nexport type EmailTagWithLiterals =\n  | EmailTag\n  | 'UNTAGGED'\n  | 'MAIN'\n  | 'HOME'\n  | 'WORK';\n\nexport interface Phone {\n  /**\n   * Phone country code.\n   * @format COUNTRY\n   */\n  countryCode?: string | null;\n  /**\n   * Phone number.\n   * @format PHONE\n   */\n  phone?: string;\n  /** Phone tag. */\n  tag?: PhoneTagWithLiterals;\n}\n\nexport enum PhoneTag {\n  UNTAGGED = 'UNTAGGED',\n  MAIN = 'MAIN',\n  HOME = 'HOME',\n  MOBILE = 'MOBILE',\n  WORK = 'WORK',\n  FAX = 'FAX',\n}\n\n/** @enumType */\nexport type PhoneTagWithLiterals =\n  | PhoneTag\n  | 'UNTAGGED'\n  | 'MAIN'\n  | 'HOME'\n  | 'MOBILE'\n  | 'WORK'\n  | 'FAX';\n\nexport interface AddressWrapper {\n  /** Address. */\n  address?: Address;\n  /** Address tag. */\n  tag?: AddressTagWithLiterals;\n}\n\n/** Physical address */\nexport interface Address {\n  /**\n   * Country code.\n   * @format COUNTRY\n   */\n  country?: string | null;\n  /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */\n  subdivision?: string | null;\n  /** City name. */\n  city?: string | null;\n  /** Zip/postal code. */\n  postalCode?: string | null;\n  /** Main address line, usually street and number as free text. */\n  addressLine1?: string | null;\n  /** Free text providing more detailed address info. Usually contains apartment, suite, and floor. */\n  addressLine2?: string | null;\n}\n\nexport enum AddressTag {\n  UNTAGGED = 'UNTAGGED',\n  HOME = 'HOME',\n  WORK = 'WORK',\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\n/** @enumType */\nexport type AddressTagWithLiterals =\n  | AddressTag\n  | 'UNTAGGED'\n  | 'HOME'\n  | 'WORK'\n  | 'BILLING'\n  | 'SHIPPING';\n\nexport interface Metadata {\n  /**\n   * General tags. For example, `\"isOwner\"`.\n   * @readonly\n   */\n  tags?: string[];\n}\n\nexport interface Email {\n  /**\n   * Email address.\n   * @format EMAIL\n   */\n  address?: string;\n  /** Whether the email address is verified. */\n  isVerified?: boolean;\n}\n\nexport interface StatusV2 {\n  name?: StatusNameWithLiterals;\n  reasons?: ReasonWithLiterals[];\n}\n\nexport enum StatusName {\n  UNKNOWN_STATUS = 'UNKNOWN_STATUS',\n  PENDING = 'PENDING',\n  ACTIVE = 'ACTIVE',\n  DELETED = 'DELETED',\n  BLOCKED = 'BLOCKED',\n  OFFLINE = 'OFFLINE',\n}\n\n/** @enumType */\nexport type StatusNameWithLiterals =\n  | StatusName\n  | 'UNKNOWN_STATUS'\n  | 'PENDING'\n  | 'ACTIVE'\n  | 'DELETED'\n  | 'BLOCKED'\n  | 'OFFLINE';\n\nexport enum Reason {\n  UNKNOWN_REASON = 'UNKNOWN_REASON',\n  PENDING_ADMIN_APPROVAL_REQUIRED = 'PENDING_ADMIN_APPROVAL_REQUIRED',\n  PENDING_EMAIL_VERIFICATION_REQUIRED = 'PENDING_EMAIL_VERIFICATION_REQUIRED',\n}\n\n/** @enumType */\nexport type ReasonWithLiterals =\n  | Reason\n  | 'UNKNOWN_REASON'\n  | 'PENDING_ADMIN_APPROVAL_REQUIRED'\n  | 'PENDING_EMAIL_VERIFICATION_REQUIRED';\n\nexport interface Factor {\n  /**\n   * Factor ID.\n   * @format GUID\n   */\n  factorId?: string;\n  /** Factor type. */\n  type?: FactorTypeWithLiterals;\n  /** Factor status. */\n  status?: StatusWithLiterals;\n}\n\nexport enum FactorType {\n  /** Unknown factor type. */\n  UNKNOWN_FACTOR_TYPE = 'UNKNOWN_FACTOR_TYPE',\n  /** Requires a password. */\n  PASSWORD = 'PASSWORD',\n  /** Requires a code sent via SMS. */\n  SMS = 'SMS',\n  /** Requires a code sent by phone call. */\n  CALL = 'CALL',\n  /** Requires a code sent by email. */\n  EMAIL = 'EMAIL',\n  /** Requires authentication via an authenticator app. */\n  TOTP = 'TOTP',\n  /** Requires authentication via a push notification. */\n  PUSH = 'PUSH',\n  /** Requires authentication via WebAuthn/passkey. */\n  WEBAUTHN = 'WEBAUTHN',\n}\n\n/** @enumType */\nexport type FactorTypeWithLiterals =\n  | FactorType\n  | 'UNKNOWN_FACTOR_TYPE'\n  | 'PASSWORD'\n  | 'SMS'\n  | 'CALL'\n  | 'EMAIL'\n  | 'TOTP'\n  | 'PUSH'\n  | 'WEBAUTHN';\n\nexport enum Status {\n  /** Factor requires activation. */\n  INACTIVE = 'INACTIVE',\n  /** Factor is active and can be used for authentication. */\n  ACTIVE = 'ACTIVE',\n  /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */\n  REQUIRE_REENROLL = 'REQUIRE_REENROLL',\n}\n\n/** @enumType */\nexport type StatusWithLiterals =\n  | Status\n  | 'INACTIVE'\n  | 'ACTIVE'\n  | 'REQUIRE_REENROLL';\n\nexport interface CustomValue extends CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** List value. */\n  listValue?: ListValue;\n  /** Map value. */\n  mapValue?: MapValue;\n}\n\n/** @oneof */\nexport interface CustomValueValueOneOf {\n  /** String value. */\n  strValue?: string;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** List value. */\n  listValue?: ListValue;\n  /** Map value. */\n  mapValue?: MapValue;\n}\n\nexport interface ListValue {\n  /** Custom value. */\n  value?: CustomValue[];\n}\n\nexport interface MapValue {\n  /** Mapped custom value. */\n  value?: Record<string, CustomValue>;\n}\n\nexport interface RequireMfaData {\n  /**\n   * The factors available for the user to perform the required MFA.\n   * @maxSize 100\n   */\n  availableFactors?: V1Factor[];\n  /** The reason the user is required to perform MFA. */\n  reason?: MfaReasonWithLiterals;\n}\n\nexport interface V1Factor {\n  /** Type of verification factor. */\n  factorType?: FactorTypeWithLiterals;\n  /** Availability status for second factor */\n  factorStatus?: FactorStatusWithLiterals;\n}\n\nexport enum FactorStatus {\n  UNKNOWN_FACTOR_STATUS = 'UNKNOWN_FACTOR_STATUS',\n  ENABLED = 'ENABLED',\n  REQUIRE_ACTIVATION = 'REQUIRE_ACTIVATION',\n  REQUIRE_REENROLL = 'REQUIRE_REENROLL',\n  ENABLED_BY_RULE = 'ENABLED_BY_RULE',\n  DISABLED_BY_RULE = 'DISABLED_BY_RULE',\n}\n\n/** @enumType */\nexport type FactorStatusWithLiterals =\n  | FactorStatus\n  | 'UNKNOWN_FACTOR_STATUS'\n  | 'ENABLED'\n  | 'REQUIRE_ACTIVATION'\n  | 'REQUIRE_REENROLL'\n  | 'ENABLED_BY_RULE'\n  | 'DISABLED_BY_RULE';\n\nexport enum MfaReason {\n  UNKNOWN_MFA_REASON = 'UNKNOWN_MFA_REASON',\n  /** Mfa is required due to user settings */\n  USER_SETTINGS = 'USER_SETTINGS',\n  /** Mfa is required due to high risk login */\n  HIGH_RISK_LOGIN = 'HIGH_RISK_LOGIN',\n}\n\n/** @enumType */\nexport type MfaReasonWithLiterals =\n  | MfaReason\n  | 'UNKNOWN_MFA_REASON'\n  | 'USER_SETTINGS'\n  | 'HIGH_RISK_LOGIN';\n\nexport interface MfaChallengeData {\n  /** Type of verifation factor. */\n  factorType?: FactorTypeWithLiterals;\n  verificationChallengeData?: VerificationChallenge;\n  /**\n   * Factors types the member can choose from to verify themselves.\n   * @maxSize 100\n   */\n  availableFactors?: V1Factor[];\n  /** The reason the user is required to perform MFA. */\n  reason?: MfaReasonWithLiterals;\n}\n\nexport interface VerificationChallenge\n  extends VerificationChallengeFactorChallengeDataOneOf {\n  pushData?: PushChallengeData;\n  webauthnData?: WebAuthnChallengeData;\n  /** @maxLength 200 */\n  hint?: string | null;\n}\n\n/** @oneof */\nexport interface VerificationChallengeFactorChallengeDataOneOf {\n  pushData?: PushChallengeData;\n  webauthnData?: WebAuthnChallengeData;\n}\n\nexport interface PushChallengeData {\n  /**\n   * This should be tied to a specific push notification.\n   * It will be sent in subsequent requests to verify the factor.\n   * @maxLength 36\n   */\n  transactionId?: string;\n}\n\nexport interface WebAuthnChallengeData {\n  /**\n   * A unique identifier for this challenge that will be used to correlate\n   * the authentication response with this challenge.\n   * This should be a cryptographically random GUID to prevent guessing attacks.\n   * @format GUID\n   */\n  challengeId?: string;\n  /**\n   * The challenge that will be signed by the authenticator during the WebAuthn authentication ceremony.\n   * This should be a cryptographically secure random value with at least 16 bytes of entropy.\n   * The value is used to prevent replay attacks and MUST be randomly generated by the implementer.\n   */\n  challenge?: Uint8Array;\n  /**\n   * The timeout in milliseconds for the WebAuthn authentication ceremony.\n   * After this time, the challenge will be considered expired and the authentication will need to be restarted.\n   * This is optional and may be overridden by the client if provided.\n   * The WebAuthn spec recommends a timeout of at least 1 minute (60000ms).\n   */\n  timeoutMs?: number | null;\n  /**\n   * Optional list of credentials that are acceptable for this authentication ceremony.\n   * If empty, all credentials associated with the user will be considered.\n   * @maxSize 10\n   */\n  allowCredentials?: PublicKeyCredentialDescriptor[];\n  /** Specifies the requirement for user verification during the authentication ceremony. */\n  userVerification?: UserVerificationRequirementWithLiterals;\n  /**\n   * Optional hints to guide the client UI\n   * Examples include \"security-key\" to emphasize external authenticators\n   * or \"client-device\" to emphasize built-in authenticators\n   * @maxLength 50\n   * @maxSize 10\n   */\n  hints?: string[];\n  /**\n   * Optional extensions for the authentication ceremony\n   * Provides additional parameters for specialized WebAuthn functionality\n   */\n  extensions?: AuthenticationExtensionInputs;\n}\n\nexport interface PublicKeyCredentialDescriptor {\n  /** The credential ID */\n  _id?: Uint8Array;\n  /**\n   * An optional hint as to the transports used by the credential\n   * Examples include \"usb\", \"nfc\", \"ble\", \"internal\", \"hybrid\"\n   * @maxLength 50\n   * @maxSize 10\n   */\n  transports?: string[];\n}\n\nexport enum UserVerificationRequirement {\n  /** Default unspecified value */\n  USER_VERIFICATION_UNSPECIFIED = 'USER_VERIFICATION_UNSPECIFIED',\n  /**\n   * The Relying Party requires user verification and will fail the operation if the response doesn't have the UV flag\n   * set\n   */\n  USER_VERIFICATION_REQUIRED = 'USER_VERIFICATION_REQUIRED',\n  /** The Relying Party prefers user verification but will not fail the operation if unavailable */\n  USER_VERIFICATION_PREFERRED = 'USER_VERIFICATION_PREFERRED',\n  /** The Relying Party does not want user verification employed (e.g., to minimize disruption to the user experience) */\n  USER_VERIFICATION_DISCOURAGED = 'USER_VERIFICATION_DISCOURAGED',\n}\n\n/** @enumType */\nexport type UserVerificationRequirementWithLiterals =\n  | UserVerificationRequirement\n  | 'USER_VERIFICATION_UNSPECIFIED'\n  | 'USER_VERIFICATION_REQUIRED'\n  | 'USER_VERIFICATION_PREFERRED'\n  | 'USER_VERIFICATION_DISCOURAGED';\n\nexport interface AuthenticationExtensionInputs\n  extends AuthenticationExtensionInputsLargeBlobOperationOneOf {\n  /** Read existing large blob data from the authenticator */\n  largeBlobRead?: boolean;\n  /** Write data to the authenticator's large blob storage */\n  largeBlobWrite?: Uint8Array;\n  /**\n   * FIDO AppID Extension (appid)\n   * An AppID that was used for previously registered U2F authenticators\n   * This makes already-registered U2F credentials forward-compatible with the WebAuthn API\n   * @maxLength 256\n   */\n  appid?: string;\n  /**\n   * User Verification Method Extension (uvm)\n   * Requests the authenticator to report which verification methods were used\n   * Examples include fingerprint, PIN, or facial recognition\n   */\n  uvm?: boolean;\n}\n\n/** @oneof */\nexport interface AuthenticationExtensionInputsLargeBlobOperationOneOf {\n  /** Read existing large blob data from the authenticator */\n  largeBlobRead?: boolean;\n  /** Write data to the authenticator's large blob storage */\n  largeBlobWrite?: Uint8Array;\n}\n\nexport interface ResendDuringAuthenticationRequest {\n  /** A state token representing the `REQUIRE_EMAIL_VERIFICATION` state. */\n  stateToken: string;\n}\n\ntype StartResponseNonNullablePaths = `verificationId`;\n\n/**\n * starts a verification process\n * example: sends a code to the identity's email\n * @public\n * @documentationMaturity preview\n * @permissionId IAM.START\n * @fqn wix.iam.verification.v1.VerificationService.Start\n */\nexport async function start(\n  options?: StartOptions\n): Promise<NonNullablePaths<StartResponse, StartResponseNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    identityId: options?.identityId,\n    target: options?.target,\n  });\n\n  const reqOpts = ambassadorWixIamVerificationV1StartResponse.start(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          identityId: '$[0].identityId',\n          target: '$[0].target',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface StartOptions {\n  /**\n   * an identity_Id.\n   * If not provided - currently, an exception is thrown. In the future the identity from identity response will be taken.\n   * @format GUID\n   */\n  identityId?: string | null;\n  /** the delivery target */\n  target?: TargetWithLiterals;\n}\n\n/**\n * Continues the registration process when a member is required to verify an email address\n * using a verification code received by email.\n *\n * Email verification is required when the registering member is already listed as a contact.\n *\n * Typically, after a successful verification, you generate and use member tokens for the\n * registered member so that subsequent API calls are called as part of a member session.\n * @param code - The code to verify.\n * @public\n * @documentationMaturity preview\n * @requiredField code\n * @requiredField options\n * @requiredField options.stateToken\n * @fqn wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication\n */\nexport async function verifyDuringAuthentication(\n  code: string,\n  options: NonNullablePaths<VerifyDuringAuthenticationOptions, `stateToken`>\n): Promise<\n  NonNullablePaths<\n    StateMachineResponse,\n    | `state`\n    | `identity.connections`\n    | `identity.connections.${number}.idpConnection.idpConnectionId`\n    | `identity.connections.${number}.idpConnection.idpUserId`\n    | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId`\n    | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired`\n    | `identity.identityProfile.emails`\n    | `identity.identityProfile.phones`\n    | `identity.identityProfile.labels`\n    | `identity.identityProfile.privacyStatus`\n    | `identity.identityProfile.customFields`\n    | `identity.identityProfile.customFields.${number}.name`\n    | `identity.identityProfile.customFields.${number}.value.strValue`\n    | `identity.identityProfile.customFields.${number}.value.numValue`\n    | `identity.identityProfile.secondaryEmails`\n    | `identity.identityProfile.secondaryEmails.${number}.email`\n    | `identity.identityProfile.secondaryEmails.${number}.tag`\n    | `identity.identityProfile.phonesV2`\n    | `identity.identityProfile.phonesV2.${number}.phone`\n    | `identity.identityProfile.phonesV2.${number}.tag`\n    | `identity.identityProfile.addresses`\n    | `identity.identityProfile.addresses.${number}.tag`\n    | `identity.metadata.tags`\n    | `identity.email.address`\n    | `identity.email.isVerified`\n    | `identity.status.name`\n    | `identity.status.reasons`\n    | `identity.factors`\n    | `identity.factors.${number}.factorId`\n    | `identity.factors.${number}.type`\n    | `identity.factors.${number}.status`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    code: code,\n    stateToken: options?.stateToken,\n  });\n\n  const reqOpts =\n    ambassadorWixIamVerificationV1StartResponse.verifyDuringAuthentication(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [{ path: 'identity.identityProfile.addresses.address' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          code: '$[0]',\n          stateToken: '$[1].stateToken',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['code', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface VerifyDuringAuthenticationOptions {\n  /** A state token representing the `REQUIRE_EMAIL_VERIFICATION` state. */\n  stateToken: string;\n}\n\n/**\n * Resend the verification email and continue the registration process when a member is required to verify an email address\n * using a verification code received by email.\n * @param stateToken - A state token representing the `REQUIRE_EMAIL_VERIFICATION` state.\n * @public\n * @documentationMaturity preview\n * @requiredField stateToken\n * @permissionId IAM.RESEND_DURING_AUTHENTICATION\n * @fqn wix.iam.verification.v1.VerificationService.ResendDuringAuthentication\n */\nexport async function resendDuringAuthentication(\n  stateToken: string\n): Promise<\n  NonNullablePaths<\n    StateMachineResponse,\n    | `state`\n    | `identity.connections`\n    | `identity.connections.${number}.idpConnection.idpConnectionId`\n    | `identity.connections.${number}.idpConnection.idpUserId`\n    | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId`\n    | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired`\n    | `identity.identityProfile.emails`\n    | `identity.identityProfile.phones`\n    | `identity.identityProfile.labels`\n    | `identity.identityProfile.privacyStatus`\n    | `identity.identityProfile.customFields`\n    | `identity.identityProfile.customFields.${number}.name`\n    | `identity.identityProfile.customFields.${number}.value.strValue`\n    | `identity.identityProfile.customFields.${number}.value.numValue`\n    | `identity.identityProfile.secondaryEmails`\n    | `identity.identityProfile.secondaryEmails.${number}.email`\n    | `identity.identityProfile.secondaryEmails.${number}.tag`\n    | `identity.identityProfile.phonesV2`\n    | `identity.identityProfile.phonesV2.${number}.phone`\n    | `identity.identityProfile.phonesV2.${number}.tag`\n    | `identity.identityProfile.addresses`\n    | `identity.identityProfile.addresses.${number}.tag`\n    | `identity.metadata.tags`\n    | `identity.email.address`\n    | `identity.email.isVerified`\n    | `identity.status.name`\n    | `identity.status.reasons`\n    | `identity.factors`\n    | `identity.factors.${number}.factorId`\n    | `identity.factors.${number}.type`\n    | `identity.factors.${number}.status`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    stateToken: stateToken,\n  });\n\n  const reqOpts =\n    ambassadorWixIamVerificationV1StartResponse.resendDuringAuthentication(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTAddressToSDKAddress,\n          paths: [{ path: 'identity.identityProfile.addresses.address' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { stateToken: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['stateToken']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTBytesToSDKBytes } from '@wix/sdk-runtime/transformations/bytes';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixIamVerificationV1VerificationServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/_api/iam/verification',\n        destPath: '',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/iam/verification',\n        destPath: '',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/iam/verification',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_identity_verification';\n\n/**\n * starts a verification process\n * example: sends a code to the identity's email\n */\nexport function start(payload: object): RequestOptionsFactory<any> {\n  function __start({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.verification.v1.start_response',\n      method: 'POST' as any,\n      methodFqn: 'wix.iam.verification.v1.VerificationService.Start',\n      packageName: PACKAGE_NAME,\n      url: resolveWixIamVerificationV1VerificationServiceUrl({\n        protoPath: '/v1/Start',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __start;\n}\n\n/**\n * Continues the registration process when a member is required to verify an email address\n * using a verification code received by email.\n *\n * Email verification is required when the registering member is already listed as a contact.\n *\n * Typically, after a successful verification, you generate and use member tokens for the\n * registered member so that subsequent API calls are called as part of a member session.\n */\nexport function verifyDuringAuthentication(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __verifyDuringAuthentication({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.verification.v1.start_response',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication',\n      packageName: PACKAGE_NAME,\n      url: resolveWixIamVerificationV1VerificationServiceUrl({\n        protoPath: '/v1/auth/verify',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.challenge',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite',\n              },\n            ],\n          },\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n              { path: 'additionalData.*.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n              { path: 'additionalData.*.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __verifyDuringAuthentication;\n}\n\n/**\n * Resend the verification email and continue the registration process when a member is required to verify an email address\n * using a verification code received by email.\n */\nexport function resendDuringAuthentication(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __resendDuringAuthentication({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.iam.verification.v1.start_response',\n      method: 'POST' as any,\n      methodFqn:\n        'wix.iam.verification.v1.VerificationService.ResendDuringAuthentication',\n      packageName: PACKAGE_NAME,\n      url: resolveWixIamVerificationV1VerificationServiceUrl({\n        protoPath: '/v1/auth/resend',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTBytesToSDKBytes,\n            paths: [\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.challenge',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.allowCredentials.id',\n              },\n              {\n                path: 'mfaChallengeData.verificationChallengeData.webauthnData.extensions.largeBlobWrite',\n              },\n            ],\n          },\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'identity.createdDate' },\n              { path: 'identity.updatedDate' },\n              { path: 'identity.identityProfile.customFields.value.dateValue' },\n              { path: 'additionalData.*.dateValue' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'identity.identityProfile.customFields.value.numValue' },\n              { path: 'additionalData.*.numValue' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __resendDuringAuthentication;\n}\n","import { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  StartOptions,\n  StartResponse,\n  StateMachineResponse,\n  VerifyDuringAuthenticationOptions,\n  resendDuringAuthentication as universalResendDuringAuthentication,\n  start as universalStart,\n  verifyDuringAuthentication as universalVerifyDuringAuthentication,\n} from './iam-verification-v1-start-response-verification.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/identity' };\n\nexport function start(httpClient: HttpClient): StartSignature {\n  return (options?: StartOptions) =>\n    universalStart(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface StartSignature {\n  /**\n   * starts a verification process\n   * example: sends a code to the identity's email\n   */\n  (options?: StartOptions | undefined): Promise<StartResponse>;\n}\n\nexport function verifyDuringAuthentication(\n  httpClient: HttpClient\n): VerifyDuringAuthenticationSignature {\n  return (\n    code: string,\n    options: NonNullablePaths<VerifyDuringAuthenticationOptions, `stateToken`>\n  ) =>\n    universalVerifyDuringAuthentication(\n      code,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface VerifyDuringAuthenticationSignature {\n  /**\n   * Continues the registration process when a member is required to verify an email address\n   * using a verification code received by email.\n   *\n   * Email verification is required when the registering member is already listed as a contact.\n   *\n   * Typically, after a successful verification, you generate and use member tokens for the\n   * registered member so that subsequent API calls are called as part of a member session.\n   * @param - The code to verify.\n   */\n  (\n    code: string,\n    options: VerifyDuringAuthenticationOptions\n  ): Promise<StateMachineResponse>;\n}\n\nexport function resendDuringAuthentication(\n  httpClient: HttpClient\n): ResendDuringAuthenticationSignature {\n  return (stateToken: string) =>\n    universalResendDuringAuthentication(\n      stateToken,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ResendDuringAuthenticationSignature {\n  /**\n   * Resend the verification email and continue the registration process when a member is required to verify an email address\n   * using a verification code received by email.\n   * @param - A state token representing the `REQUIRE_EMAIL_VERIFICATION` state.\n   */\n  (stateToken: string): Promise<StateMachineResponse>;\n}\n\nexport {\n  Address,\n  AddressTag,\n  AddressWrapper,\n  AuthenticationExtensionInputs,\n  AuthenticationExtensionInputsLargeBlobOperationOneOf,\n  AuthenticatorConnection,\n  Connection,\n  ConnectionTypeOneOf,\n  CustomField,\n  CustomValue,\n  CustomValueValueOneOf,\n  Email,\n  EmailTag,\n  Factor,\n  FactorStatus,\n  FactorType,\n  Identity,\n  IdentityProfile,\n  IdpConnection,\n  ListValue,\n  MapValue,\n  Metadata,\n  MfaChallengeData,\n  MfaReason,\n  Phone,\n  PhoneTag,\n  PrivacyStatus,\n  PublicKeyCredentialDescriptor,\n  PushChallengeData,\n  Reason,\n  RequireMfaData,\n  ResendDuringAuthenticationRequest,\n  SecondaryEmail,\n  StartOptions,\n  StartRequest,\n  StartResponse,\n  StateMachineResponse,\n  StateMachineResponseStateDataOneOf,\n  StateType,\n  Status,\n  StatusName,\n  StatusV2,\n  Target,\n  UserVerificationRequirement,\n  V1CustomValue,\n  V1CustomValueValueOneOf,\n  V1Factor,\n  V1ListValue,\n  V1MapValue,\n  VerificationChallenge,\n  VerificationChallengeFactorChallengeDataOneOf,\n  VerifyDuringAuthenticationOptions,\n  VerifyDuringAuthenticationRequest,\n  VerifyRequest,\n  VerifyResponse,\n  WebAuthnChallengeData,\n} from './iam-verification-v1-start-response-verification.universal.js';\n","import {\n  start as publicStart,\n  verifyDuringAuthentication as publicVerifyDuringAuthentication,\n  resendDuringAuthentication as publicResendDuringAuthentication,\n} from './iam-verification-v1-start-response-verification.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const start: MaybeContext<\n  BuildRESTFunction<typeof publicStart> & typeof publicStart\n> = /*#__PURE__*/ createRESTModule(publicStart);\nexport const verifyDuringAuthentication: MaybeContext<\n  BuildRESTFunction<typeof publicVerifyDuringAuthentication> &\n    typeof publicVerifyDuringAuthentication\n> = /*#__PURE__*/ createRESTModule(publicVerifyDuringAuthentication);\nexport const resendDuringAuthentication: MaybeContext<\n  BuildRESTFunction<typeof publicResendDuringAuthentication> &\n    typeof publicResendDuringAuthentication\n> = /*#__PURE__*/ createRESTModule(publicResendDuringAuthentication);\n\nexport {\n  Target,\n  StateType,\n  PrivacyStatus,\n  EmailTag,\n  PhoneTag,\n  AddressTag,\n  StatusName,\n  Reason,\n  FactorType,\n  Status,\n  FactorStatus,\n  MfaReason,\n  UserVerificationRequirement,\n} from './iam-verification-v1-start-response-verification.universal.js';\nexport {\n  StartResponse,\n  StartRequest,\n  VerifyRequest,\n  VerifyResponse,\n  VerifyDuringAuthenticationRequest,\n  StateMachineResponse,\n  StateMachineResponseStateDataOneOf,\n  Identity,\n  Connection,\n  ConnectionTypeOneOf,\n  IdpConnection,\n  AuthenticatorConnection,\n  IdentityProfile,\n  CustomField,\n  V1CustomValue,\n  V1CustomValueValueOneOf,\n  V1ListValue,\n  V1MapValue,\n  SecondaryEmail,\n  Phone,\n  AddressWrapper,\n  Address,\n  Metadata,\n  Email,\n  StatusV2,\n  Factor,\n  CustomValue,\n  CustomValueValueOneOf,\n  ListValue,\n  MapValue,\n  RequireMfaData,\n  V1Factor,\n  MfaChallengeData,\n  VerificationChallenge,\n  VerificationChallengeFactorChallengeDataOneOf,\n  PushChallengeData,\n  WebAuthnChallengeData,\n  PublicKeyCredentialDescriptor,\n  AuthenticationExtensionInputs,\n  AuthenticationExtensionInputsLargeBlobOperationOneOf,\n  ResendDuringAuthenticationRequest,\n  StartOptions,\n  VerifyDuringAuthenticationOptions,\n} from './iam-verification-v1-start-response-verification.universal.js';\n"],"mappings":"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","names":["payload","transformPaths","Target","StateType","PrivacyStatus","EmailTag","PhoneTag","AddressTag","StatusName","Reason","FactorType","Status","FactorStatus","MfaReason","UserVerificationRequirement","start","verifyDuringAuthentication","resendDuringAuthentication","start","verifyDuringAuthentication","resendDuringAuthentication","start","verifyDuringAuthentication","resendDuringAuthentication"]}