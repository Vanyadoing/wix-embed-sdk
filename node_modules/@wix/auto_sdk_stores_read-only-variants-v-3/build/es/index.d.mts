import { SearchSpec } from '@wix/sdk-types';

interface ReadOnlyVariant extends ReadOnlyVariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: V3VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: V3VariantDigitalProperties;
    /**
     * Variant ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     * @readonly
     */
    visible?: boolean | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     * @readonly
     */
    sku?: string | null;
    /**
     * Variant barcode.
     * @minLength 1
     * @maxLength 40
     * @readonly
     */
    barcode?: string | null;
    /**
     * List of option choices
     * In case this list is empty, this is the default variant of an unmanaged product. - check if bridges need more than ids
     * @maxSize 6
     * @readonly
     */
    optionChoices?: V3OptionChoice[];
    /**
     * Variant price.
     * @readonly
     */
    price?: V3PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    revenueDetails?: V3RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: V3ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.actualPrice`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: V3SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: V3InventoryStatus;
    /**
     * Product fields
     * @readonly
     */
    productData?: ProductFields;
}
/** @oneof */
interface ReadOnlyVariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: V3VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: V3VariantDigitalProperties;
}
interface V3OptionChoice {
    /**
     * Option and choice IDs.
     * @readonly
     */
    optionChoiceIds?: V3OptionChoiceIds;
    /**
     * Option and choice names.
     * @readonly
     */
    optionChoiceNames?: V3OptionChoiceNames;
}
interface V3OptionChoiceIds {
    /**
     * Option ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    optionId?: string;
    /**
     * Choice ID.
     * @format GUID
     * @readonly
     */
    choiceId?: string;
}
interface V3OptionChoiceNames {
    /**
     * Option name.
     * @minLength 1
     * @maxLength 50
     * @readonly
     */
    optionName?: string;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     * @readonly
     */
    choiceName?: string;
    /**
     * Render type.
     * @readonly
     * @maxLength 50
     */
    renderType?: string;
}
interface V3PriceInfo {
    /**
     * Variant price.
     * @readonly
     */
    actualPrice?: V3FixedMonetaryAmount;
    /**
     * The compare-at-price represents the original price of a product before any discount.
     * @readonly
     */
    compareAtPrice?: V3FixedMonetaryAmount;
}
interface V3FixedMonetaryAmount {
    /**
     * Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     * @readonly
     */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * @readonly
     * @maxLength 20
     */
    formattedAmount?: string | null;
}
interface V3RevenueDetails {
    /**
     * Item cost.
     * @readonly
     */
    cost?: V3FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: V3FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     * @max 1
     */
    profitMargin?: number;
}
interface V3ProductMedia extends V3ProductMediaSetByOneOf, V3ProductMediaMediaOneOf {
    /**
     * ID of existing media from Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     * @readonly
     */
    _id?: string;
    /**
     * Media URL.
     * @format WEB_URL
     * @readonly
     */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
    /**
     * Image alt text.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     * @maxLength 80
     * @readonly
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: ProductMediaMediaTypeWithLiterals;
    /**
     * Media thumbnail.
     * @readonly
     */
    thumbnail?: V3Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     * @format GUID
     */
    uploadId?: string;
}
/** @oneof */
interface V3ProductMediaSetByOneOf {
    /**
     * ID of existing media from Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     * @readonly
     */
    _id?: string;
    /**
     * Media URL.
     * @format WEB_URL
     * @readonly
     */
    url?: string;
}
/** @oneof */
interface V3ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
}
interface CommonVideoResolution {
    /**
     * Video URL.
     * @format WEB_URL
     */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /**
     * Video format for example, mp4, hls.
     * @maxLength 200
     */
    format?: string;
}
declare enum ProductMediaMediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    /** Image media type. */
    IMAGE = "IMAGE",
    /** Video media type. */
    VIDEO = "VIDEO"
}
/** @enumType */
type ProductMediaMediaTypeWithLiterals = ProductMediaMediaType | 'UNKNOWN_MEDIA_TYPE' | 'IMAGE' | 'VIDEO';
interface V3Thumbnail {
    /**
     * Thumbnail url.
     * @format WEB_URL
     * @readonly
     */
    url?: string;
    /**
     * Thumbnail height.
     * @readonly
     */
    height?: number;
    /**
     * Thumbnail width.
     * @readonly
     */
    width?: number;
    /**
     * Thumbnail alt text.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    altText?: string | null;
}
interface V3VariantPhysicalProperties {
    /**
     * Variant shipping weight.
     * @max 999999999.99
     * @readonly
     */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     * @readonly
     */
    pricePerUnit?: V3PricePerUnit;
}
interface V3PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     * @readonly
     */
    settings?: V3PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * @readonly
     * @maxLength 100
     */
    description?: string | null;
}
interface V3PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     * @min 0.01
     * @max 999999999.99
     * @readonly
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     * @readonly
     */
    measurementUnit?: MeasurementUnitWithLiterals;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
/** @enumType */
type MeasurementUnitWithLiterals = MeasurementUnit | 'UNSPECIFIED' | 'ML' | 'CL' | 'L' | 'CBM' | 'MG' | 'G' | 'KG' | 'MM' | 'CM' | 'M' | 'SQM' | 'OZ' | 'LB' | 'FLOZ' | 'PT' | 'QT' | 'GAL' | 'IN' | 'FT' | 'YD' | 'SQFT';
interface V3VariantDigitalProperties {
    /**
     * Digital file which will be downloaded by customer after successful purchase.
     * @readonly
     */
    digitalFile?: V3SecuredMedia;
}
interface V3SecuredMedia {
    /**
     * Media ID in media manager.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    _id?: string;
    /**
     * Original file name.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { maxScale:0 }
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: SecuredMediaFileTypeWithLiterals;
}
declare enum SecuredMediaFileType {
    /** Unspecified file type. */
    UNSPECIFIED = "UNSPECIFIED",
    /** Secure picture file. */
    SECURE_PICTURE = "SECURE_PICTURE",
    /** Secure video file. */
    SECURE_VIDEO = "SECURE_VIDEO",
    /** Secure document file. */
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    /** Secure music file. */
    SECURE_MUSIC = "SECURE_MUSIC",
    /** Secure archive file. */
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** @enumType */
type SecuredMediaFileTypeWithLiterals = SecuredMediaFileType | 'UNSPECIFIED' | 'SECURE_PICTURE' | 'SECURE_VIDEO' | 'SECURE_DOCUMENT' | 'SECURE_MUSIC' | 'SECURE_ARCHIVE';
interface V3SubscriptionPricesInfo {
    /**
     * Subscription prices.
     * @maxSize 6
     * @readonly
     */
    subscriptionPrices?: V3SubscriptionPrice[];
}
interface V3SubscriptionPrice {
    /**
     * Subscription ID.
     * @format GUID
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.salePrice`
     * @readonly
     */
    price?: V3FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: V3SubscriptionPricePerUnit;
}
interface V3SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * @readonly
     * @maxLength 20
     */
    description?: string | null;
}
interface V3InventoryStatus {
    /**
     * Whether the variant is in stock.
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether preorder is enabled for this variant.
     * @readonly
     */
    preorderEnabled?: boolean;
}
interface ProductFields extends ProductFieldsTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: V3PhysicalProperties;
    /**
     * product id
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    productId?: string;
    /**
     * Product name.
     * @minLength 1
     * @maxLength 80
     * @readonly
     */
    name?: string | null;
    /**
     * product type
     * @readonly
     */
    productType?: V3ProductTypeWithLiterals;
    /**
     * Product slug.
     * @format URL_SLUG
     * @readonly
     */
    slug?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     * @readonly
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     * @readonly
     */
    visibleInPos?: boolean | null;
    /**
     * Main category ID.
     * @format GUID
     * @readonly
     */
    mainCategoryId?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @format CURRENCY
     * @readonly
     */
    currency?: string | null;
    /**
     * Product entity revision.
     * @readonly
     */
    revision?: string | null;
}
/** @oneof */
interface ProductFieldsTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: V3PhysicalProperties;
}
declare enum V3ProductType {
    /** Not implemented. */
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    /** Physical product. */
    PHYSICAL = "PHYSICAL",
    /** Digital product. */
    DIGITAL = "DIGITAL"
}
/** @enumType */
type V3ProductTypeWithLiterals = V3ProductType | 'UNKNOWN_PRODUCT_TYPE' | 'PHYSICAL' | 'DIGITAL';
interface V3PhysicalProperties {
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: V3WeightMeasurementUnitInfo;
}
interface V3WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnitWithLiterals;
}
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface InternalMetadata {
}
declare enum InternalRowState {
    /** Not implemented. */
    UNKNOWN_ROW_STATE = "UNKNOWN_ROW_STATE",
    /** Variant is ready to be read. */
    READY = "READY",
    /** Variant is being processed. */
    IN_PROCESS = "IN_PROCESS",
    /** Variant is soft deleted. */
    SOFT_DELETED = "SOFT_DELETED",
    /** Variant is permanently deleted. */
    PERMANENTLY_DELETED = "PERMANENTLY_DELETED"
}
interface QueryVariantsRequest {
    /** WQL expression. */
    query?: CursorQuery;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 1000
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
declare enum RequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    CURRENCY = "CURRENCY",
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    MERCHANT_DATA = "MERCHANT_DATA",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'CURRENCY' | 'MERCHANT_DATA' | 'SUBSCRIPTION_PRICES_INFO' | 'WEIGHT_MEASUREMENT_UNIT_INFO';
interface QueryVariantsResponse {
    /** List of ReadOnlyVariants. */
    variants?: ReadOnlyVariant[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SearchVariantsRequest {
    /** WQL expression */
    search?: CursorSearch;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition.
     * @maxSize 10
     */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CursorPaging;
}
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum SortType {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
/** @enumType */
type SortTypeWithLiterals = SortType | 'COUNT' | 'VALUE';
declare enum SortDirection {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
/** @enumType */
type SortDirectionWithLiterals = SortDirection | 'DESC' | 'ASC';
declare enum MissingValues {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type MissingValuesWithLiterals = MissingValues | 'EXCLUDE' | 'INCLUDE';
interface IncludeMissingValuesOptions {
    /**
     * Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ...
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum ScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX"
}
/** @enumType */
type ScalarTypeWithLiterals = ScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: SortTypeWithLiterals;
    /** Should sort in ascending or descending order */
    sortDirection?: SortDirectionWithLiterals;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: MissingValuesWithLiterals;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationTypeWithLiterals = NestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface RangeAggregation {
    /**
     * List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds
     * @maxSize 50
     */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: ScalarTypeWithLiterals;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: IntervalWithLiterals;
}
declare enum Interval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
/** @enumType */
type IntervalWithLiterals = Interval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: NestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dont notation to specify json path
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** @enumType */
type AggregationTypeWithLiterals = AggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface NestedAggregation {
    /**
     * Flattened list of aggregations, where each next aggregation is nested within previous one
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationItem[];
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: ModeWithLiterals;
    /**
     * Search term or expression
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
/** @enumType */
type ModeWithLiterals = Mode | 'OR' | 'AND';
interface SearchVariantsResponse {
    /** Variants which satisfy the provided query. */
    variants?: ReadOnlyVariant[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface AggregationData {
    /**
     * key = aggregation name (as derived from search request)
     * @maxSize 10000
     */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /**
     * Value of the field
     * @maxLength 100
     */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /**
     * User-defined name of aggregation, matches the one provided in request
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that matches result */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, matches the one provided in request
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /**
     * List of value aggregations
     * @maxSize 250
     */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /**
     * List of ranges returned in same order as requested
     * @maxSize 50
     */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: ScalarTypeWithLiterals;
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedValueAggregationResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Nested aggregations */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /**
     * Date in ISO 8601 format
     * @maxLength 100
     */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface GroupByValueResults {
    /**
     * List of value aggregations
     * @maxSize 1000
     */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /**
     * List of date histogram aggregations
     * @maxSize 200
     */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /**
     * List of nested aggregations
     * @maxSize 1000
     */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
    /**
     * User-defined name of aggregation as derived from search request
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by as derived from search request
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
}
interface DeprecatedSearchVariantsWithOffsetRequest {
    /** Filter and sort with limit/offset based paging */
    search?: PlatformOffsetSearch;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface PlatformOffsetSearch extends PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
    /** A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: CommonAggregation[];
    /** free text to match in searchable fields */
    search?: CommonSearchDetails;
}
/** @oneof */
interface PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
}
interface CommonSorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrderWithLiterals;
}
declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type CommonSortOrderWithLiterals = CommonSortOrder | 'ASC' | 'DESC';
interface CommonAggregation extends CommonAggregationKindOneOf {
    /** A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`. */
    nested?: AggregationNestedAggregation;
    /**
     * Aggregation name, returned in `aggregations.results.name`.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation to perform. Must align with the corresponding aggregation field. */
    type?: CommonAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
interface CommonAggregationKindOneOf {
    /** A value aggregation calculates metrics such as count for specific fields within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of products for each price listed in the store. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.) For example, use a date histogram to find how many reservations have been made at a restaurant each week. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** A nested aggregation is applied within the results of another aggregation. Rather than aggregating directly on the primary dataset, first group data using one aggregation and then apply another aggregation within each group. It allows for more complex analyses where you can summarize data at different levels of detail or hierarchy. For example, to get the number of products that are in stock and out of stock for each price listed, first perform a value aggregation on `discountedPriceNumeric`, and a second value aggregation on `inStock`. */
    nested?: AggregationNestedAggregation;
}
interface RangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
declare enum ValueAggregationSortType {
    /** Number of matches in the results. */
    COUNT = "COUNT",
    /** Alphabetically by the field value. */
    VALUE = "VALUE"
}
/** @enumType */
type ValueAggregationSortTypeWithLiterals = ValueAggregationSortType | 'COUNT' | 'VALUE';
declare enum ValueAggregationSortDirection {
    /** Descending order. */
    DESC = "DESC",
    /** Ascending order. */
    ASC = "ASC"
}
/** @enumType */
type ValueAggregationSortDirectionWithLiterals = ValueAggregationSortDirection | 'DESC' | 'ASC';
declare enum ValueAggregationMissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type ValueAggregationMissingValuesWithLiterals = ValueAggregationMissingValues | 'EXCLUDE' | 'INCLUDE';
interface ValueAggregationIncludeMissingValuesOptions {
    /**
     * Specify a custom name for the bucket containing the missing values. Defaults are `"N/A"` for strings, `0` for integers, and `false` for booleans.
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum CommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Total number of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
/** @enumType */
type CommonScalarTypeWithLiterals = CommonScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface AggregationValueAggregation extends AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values in results. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
    /** Sort type. */
    sortType?: ValueAggregationSortTypeWithLiterals;
    /** Sort direction. */
    sortDirection?: ValueAggregationSortDirectionWithLiterals;
    /**
     * Number of aggregation results to return.
     * Min: `1`
     * Max: `250`
     * Default: `10`
     */
    limit?: number | null;
    /**
     * Whether to include or exclude missing values in the aggregation results.
     * Default: `EXCLUDE`.
     */
    missingValues?: ValueAggregationMissingValuesWithLiterals;
}
/** @oneof */
interface AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values in results. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
}
declare enum NestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** Calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. */
    VALUE = "VALUE",
    /** Calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. */
    RANGE = "RANGE",
    /** Calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    SCALAR = "SCALAR",
    /** Calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationNestedAggregationTypeWithLiterals = NestedAggregationNestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface AggregationRangeAggregation {
    /**
     * List of range buckets. During aggregation each entity is placed in the first bucket its value falls into, based on the provided range bounds.
     * @maxSize 50
     */
    buckets?: RangeAggregationRangeBucket[];
}
interface AggregationScalarAggregation {
    /** Operator type for the scalar aggregation. */
    type?: CommonScalarTypeWithLiterals;
}
interface AggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: DateHistogramAggregationIntervalWithLiterals;
}
declare enum DateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    YEAR = "YEAR",
    MONTH = "MONTH",
    WEEK = "WEEK",
    DAY = "DAY",
    HOUR = "HOUR",
    MINUTE = "MINUTE",
    SECOND = "SECOND"
}
/** @enumType */
type DateHistogramAggregationIntervalWithLiterals = DateHistogramAggregationInterval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationNestedAggregationItem extends NestedAggregationNestedAggregationItemKindOneOf {
    /** A value aggregation calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of orders for each order status. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). For example, use a date histogram to determine how many reservations have been made at a restaurant each week. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /**
     * Unique, caller-defined aggregation name, returned in `aggregations.results`.
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation to perform. The matching aggregation field must be passed. */
    type?: NestedAggregationNestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by. Use dot notation to specify a JSON path. For example, `order.address.streetName`.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationNestedAggregationItemKindOneOf {
    /** A value aggregation calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. For example, use a value aggregation to get the number (count) of orders for each order status. */
    value?: AggregationValueAggregation;
    /** A range aggregation calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. For example, use a range aggregation to compare the number of reservations made for parties of 4 or less to the number of reservations made for parties with 5 or more. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    range?: AggregationRangeAggregation;
    /** A scalar aggregation calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    scalar?: AggregationScalarAggregation;
    /** A date histogram calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). For example, use a date histogram to determine how many reservations have been made at a restaurant each week. If ranges overlap, a record that fits more than one range will only be counted in the first range that matches the criteria. */
    dateHistogram?: AggregationDateHistogramAggregation;
}
declare enum CommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** Calculates the distribution of a specific field's values within a dataset, providing insights into the overall distribution and key statistics of those values. */
    VALUE = "VALUE",
    /** Calculates the count of the values from the specified field in the dataset that fall within the range of each bucket you define. */
    RANGE = "RANGE",
    /** Calculates a single numerical value from a dataset, summarizing the dataset into one key metric: `COUNT_DISTINCT`, `SUM`, `AVG`, `MIN`, or `MAX`. */
    SCALAR = "SCALAR",
    /** Calculates the count of time values from the specified field in the dataset that fall within each time interval you define (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Flattened list of aggregations, where each aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** @enumType */
type CommonAggregationTypeWithLiterals = CommonAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
interface AggregationNestedAggregation {
    /**
     * Flattened list of aggregations, where each aggregation is nested within previous one.
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationNestedAggregationItem[];
}
interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
    /**
     * Unique, caller-defined aggregation name, returned in `aggregations.results`.
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Field to aggregate by.
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
}
interface CommonSearchDetails {
    /** Search mode. Defines the search logic for combining multiple terms in the `expression`. */
    mode?: SearchDetailsModeWithLiterals;
    /**
     * Search term or expression.
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If the array is empty, all searchable fields are searched. Use dot notation to specify a JSON path. For example, For example, `order.address.streetName`.
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Whether to enable the search function to use an algorithm to automatically find results that are close to the search expression, such as typos and declensions. */
    fuzzy?: boolean;
}
declare enum SearchDetailsMode {
    /** At least one of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
/** @enumType */
type SearchDetailsModeWithLiterals = SearchDetailsMode | 'OR' | 'AND';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface DeprecatedSearchVariantsWithOffsetResponse {
    /** Products which satisfy the provided query. */
    variants?: ReadOnlyVariant[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadata;
    /** Aggregation data. */
    aggregationData?: Aggregation;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface MigrateProductVariantsRequest {
    /** The product */
    product?: Product;
    /** The event sequence number of the product. */
    eventSequence?: string | null;
}
interface Product extends ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Product name. Translatable.
     * @minLength 1
     * @maxLength 80
     */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: string;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /**
     * Tax group ID.
     * @format GUID
     */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * @maxSize 6
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * @maxSize 10
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     * @maxSize 10
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /**
     * Main category ID.
     * @format GUID
     */
    mainCategoryId?: string | null;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     * @immutable
     */
    productType?: ProductTypeWithLiterals;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    handle?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @format CURRENCY
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /**
     * Product actualPrice range - minimum and maximum prices of all product variants.
     * @readonly
     */
    actualPriceRange?: PriceRange;
    /**
     * Product compareAtPrice range - minimum and maximum compare at prices of all product variants.
     * @readonly
     */
    compareAtPriceRange?: PriceRange;
    /**
     * Product variants. Each variant must reference all product options via its `choices` array.
     * Each choice references an option using `optionChoiceNames` for all requests.
     */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
/** @oneof */
interface ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeTypeWithLiterals;
    /** Node ID. */
    id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
}
declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    /** @deprecated */
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION",
    LAYOUT = "LAYOUT",
    LAYOUT_CELL = "LAYOUT_CELL"
}
/** @enumType */
type NodeTypeWithLiterals = NodeType | 'PARAGRAPH' | 'TEXT' | 'HEADING' | 'BULLETED_LIST' | 'ORDERED_LIST' | 'LIST_ITEM' | 'BLOCKQUOTE' | 'CODE_BLOCK' | 'VIDEO' | 'DIVIDER' | 'FILE' | 'GALLERY' | 'GIF' | 'HTML' | 'IMAGE' | 'LINK_PREVIEW' | 'MAP' | 'POLL' | 'APP_EMBED' | 'BUTTON' | 'COLLAPSIBLE_LIST' | 'TABLE' | 'EMBED' | 'COLLAPSIBLE_ITEM' | 'COLLAPSIBLE_ITEM_TITLE' | 'COLLAPSIBLE_ITEM_BODY' | 'TABLE_CELL' | 'TABLE_ROW' | 'EXTERNAL' | 'AUDIO' | 'CAPTION' | 'LAYOUT' | 'LAYOUT_CELL';
interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: TypeWithLiterals;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
interface Border {
    /**
     * Deprecated: Use `borderWidth` in `styles` instead.
     * @deprecated
     */
    width?: number | null;
    /**
     * Deprecated: Use `borderRadius` in `styles` instead.
     * @deprecated
     */
    radius?: number | null;
}
interface Colors {
    /**
     * Deprecated: Use `textColor` in `styles` instead.
     * @deprecated
     */
    text?: string | null;
    /**
     * Deprecated: Use `borderColor` in `styles` instead.
     * @deprecated
     */
    border?: string | null;
    /**
     * Deprecated: Use `backgroundColor` in `styles` instead.
     * @deprecated
     */
    background?: string | null;
}
interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignmentWithLiterals;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
/** @enumType */
type WidthTypeWithLiterals = WidthType | 'CONTENT' | 'SMALL' | 'ORIGINAL' | 'FULL_WIDTH';
interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthTypeWithLiterals;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthTypeWithLiterals;
    /** A custom width value in pixels. */
    custom?: string | null;
}
declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
/** @enumType */
type PluginContainerDataAlignmentWithLiterals = PluginContainerDataAlignment | 'CENTER' | 'LEFT' | 'RIGHT';
interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
declare enum Type {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
/** @enumType */
type TypeWithLiterals = Type | 'LINK' | 'ACTION';
interface Styles {
    /**
     * Deprecated: Use `borderWidth` and `borderRadius` instead.
     * @deprecated
     */
    border?: Border;
    /**
     * Deprecated: Use `textColor`, `borderColor` and `backgroundColor` instead.
     * @deprecated
     */
    colors?: Colors;
    /** Border width in pixels. */
    borderWidth?: number | null;
    /**
     * Deprecated: Use `borderWidth` for normal/hover states instead.
     * @deprecated
     */
    borderWidthHover?: number | null;
    /** Border radius in pixels. */
    borderRadius?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /**
     * Border color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    borderColorHover?: string | null;
    /**
     * Text color as a hexadecimal value.
     * @format COLOR_HEX
     */
    textColor?: string | null;
    /**
     * Text color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    textColorHover?: string | null;
    /**
     * Background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Background color as a hexadecimal value (hover state).
     * @format COLOR_HEX
     */
    backgroundColorHover?: string | null;
    /** Button size option, one of `SMALL`, `MEDIUM` or `LARGE`. Defaults to `MEDIUM`. */
    buttonSize?: string | null;
}
interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: TargetWithLiterals;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
/** @enumType */
type TargetWithLiterals = Target | 'SELF' | 'BLANK' | 'PARENT' | 'TOP';
interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignmentWithLiterals;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
/** @enumType */
type TextAlignmentWithLiterals = TextAlignment | 'AUTO' | 'LEFT' | 'RIGHT' | 'CENTER' | 'JUSTIFY';
interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyleWithLiterals;
    /** Divider width. */
    width?: WidthWithLiterals;
    /** Divider alignment. */
    alignment?: AlignmentWithLiterals;
}
declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
/** @enumType */
type LineStyleWithLiterals = LineStyle | 'SINGLE' | 'DOUBLE' | 'DASHED' | 'DOTTED';
declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
/** @enumType */
type WidthWithLiterals = Width | 'LARGE' | 'MEDIUM' | 'SMALL';
declare enum Alignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
/** @enumType */
type AlignmentWithLiterals = Alignment | 'CENTER' | 'LEFT' | 'RIGHT';
interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
/** @enumType */
type ViewModeWithLiterals = ViewMode | 'NONE' | 'FULL' | 'MINI';
interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
}
interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewModeWithLiterals;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
interface V1Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
interface Image {
    /** Image file details. */
    media?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
}
interface Video {
    /** Video file details. */
    media?: V1Media;
    /** Video thumbnail file details. */
    thumbnail?: V1Media;
}
interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
interface ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
}
interface GalleryOptions {
    /** Gallery layout. */
    layout?: Layout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
/** @enumType */
type LayoutTypeWithLiterals = LayoutType | 'COLLAGE' | 'MASONRY' | 'GRID' | 'THUMBNAIL' | 'SLIDER' | 'SLIDESHOW' | 'PANORAMA' | 'COLUMN' | 'MAGIC' | 'FULLSIZE';
declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
/** @enumType */
type OrientationWithLiterals = Orientation | 'ROWS' | 'COLUMNS';
declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
/** @enumType */
type CropWithLiterals = Crop | 'FILL' | 'FIT';
declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
/** @enumType */
type ThumbnailsAlignmentWithLiterals = ThumbnailsAlignment | 'TOP' | 'RIGHT' | 'BOTTOM' | 'LEFT' | 'NONE';
interface Layout {
    /** Gallery layout type. */
    type?: LayoutTypeWithLiterals;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: OrientationWithLiterals;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: CropWithLiterals;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignmentWithLiterals;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
    /** Type of GIF (Sticker or NORMAL). Defaults to `NORMAL`. */
    gifType?: GIFTypeWithLiterals;
}
interface GIF {
    /**
     * GIF format URL.
     * @format WEB_URL
     */
    gif?: string | null;
    /**
     * MP4 format URL.
     * @format WEB_URL
     */
    mp4?: string | null;
    /**
     * Thumbnail URL.
     * @format WEB_URL
     */
    still?: string | null;
}
declare enum GIFType {
    NORMAL = "NORMAL",
    STICKER = "STICKER"
}
/** @enumType */
type GIFTypeWithLiterals = GIFType | 'NORMAL' | 'STICKER';
interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. Height property is irrelevant for HTML embeds when autoHeight is set to `true`. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: SourceWithLiterals;
    /** If container height is aligned with its content height. Defaults to `true`. */
    autoHeight?: boolean | null;
}
/** @oneof */
interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
/** @enumType */
type SourceWithLiterals = Source | 'HTML' | 'ADSENSE';
interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the image is decorative and does not need an explanation. Defaults to `false`. */
    decorative?: boolean | null;
    /** Styling for the image. */
    styles?: ImageDataStyles;
}
interface StylesBorder {
    /** Border width in pixels. */
    width?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    color?: string | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
interface ImageDataStyles {
    /** Border attributes. */
    border?: StylesBorder;
}
interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
    /** Styling for the link preview. */
    styles?: LinkPreviewDataStyles;
}
declare enum Position {
    /** Thumbnail positioned at the start (left in LTR layouts, right in RTL layouts) */
    START = "START",
    /** Thumbnail positioned at the end (right in LTR layouts, left in RTL layouts) */
    END = "END",
    /** Thumbnail positioned at the top */
    TOP = "TOP",
    /** Thumbnail hidden and not displayed */
    HIDDEN = "HIDDEN"
}
/** @enumType */
type PositionWithLiterals = Position | 'START' | 'END' | 'TOP' | 'HIDDEN';
interface LinkPreviewDataStyles {
    /**
     * Background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Title color as a hexadecimal value.
     * @format COLOR_HEX
     */
    titleColor?: string | null;
    /**
     * Subtitle color as a hexadecimal value.
     * @format COLOR_HEX
     */
    subtitleColor?: string | null;
    /**
     * Link color as a hexadecimal value.
     * @format COLOR_HEX
     */
    linkColor?: string | null;
    /** Border width in pixels. */
    borderWidth?: number | null;
    /** Border radius in pixels. */
    borderRadius?: number | null;
    /**
     * Border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    borderColor?: string | null;
    /** Position of thumbnail. Defaults to `START`. */
    thumbnailPosition?: PositionWithLiterals;
}
interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapTypeWithLiterals;
}
declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
/** @enumType */
type MapTypeWithLiterals = MapType | 'ROADMAP' | 'SATELITE' | 'HYBRID' | 'TERRAIN';
interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
/** @enumType */
type ViewRoleWithLiterals = ViewRole | 'CREATOR' | 'VOTERS' | 'EVERYONE';
declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
/** @enumType */
type VoteRoleWithLiterals = VoteRole | 'SITE_MEMBERS' | 'ALL';
interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRoleWithLiterals;
    /** Sets who can vote. */
    vote?: VoteRoleWithLiterals;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
interface Option {
    /** Option ID. */
    id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media;
}
interface PollSettings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
/** @enumType */
type PollLayoutTypeWithLiterals = PollLayoutType | 'LIST' | 'GRID';
declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
/** @enumType */
type PollLayoutDirectionWithLiterals = PollLayoutDirection | 'LTR' | 'RTL';
interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutTypeWithLiterals;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirectionWithLiterals;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
/** @enumType */
type BackgroundTypeWithLiterals = BackgroundType | 'COLOR' | 'IMAGE' | 'GRADIENT';
interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /**
     * The start color as a hexademical value.
     * @format COLOR_HEX
     */
    startColor?: string | null;
    /**
     * The end color as a hexademical value.
     * @format COLOR_HEX
     */
    lastColor?: string | null;
}
interface Background extends BackgroundBackgroundOneOf {
    /**
     * The background color as a hexademical value.
     * @format COLOR_HEX
     */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundTypeWithLiterals;
}
/** @oneof */
interface BackgroundBackgroundOneOf {
    /**
     * The background color as a hexademical value.
     * @format COLOR_HEX
     */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
interface Poll {
    /** Poll ID. */
    id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings;
}
interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** Data for a strikethrough decoration. Defaults to `true`. */
    strikethroughData?: boolean | null;
    /** Data for a superscript decoration. Defaults to `true`. */
    superscriptData?: boolean | null;
    /** Data for a subscript decoration. Defaults to `true`. */
    subscriptData?: boolean | null;
    /** The type of decoration to apply. */
    type?: DecorationTypeWithLiterals;
}
/** @oneof */
interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** Data for a strikethrough decoration. Defaults to `true`. */
    strikethroughData?: boolean | null;
    /** Data for a superscript decoration. Defaults to `true`. */
    superscriptData?: boolean | null;
    /** Data for a subscript decoration. Defaults to `true`. */
    subscriptData?: boolean | null;
}
declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL",
    STRIKETHROUGH = "STRIKETHROUGH",
    SUPERSCRIPT = "SUPERSCRIPT",
    SUBSCRIPT = "SUBSCRIPT"
}
/** @enumType */
type DecorationTypeWithLiterals = DecorationType | 'BOLD' | 'ITALIC' | 'UNDERLINE' | 'SPOILER' | 'ANCHOR' | 'MENTION' | 'LINK' | 'COLOR' | 'FONT_SIZE' | 'EXTERNAL' | 'STRIKETHROUGH' | 'SUPERSCRIPT' | 'SUBSCRIPT';
interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
interface LinkData {
    /** Link details. */
    link?: Link;
}
interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    id?: string | null;
}
interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontTypeWithLiterals;
    /** Font size value. */
    value?: number | null;
}
declare enum FontType {
    PX = "PX",
    EM = "EM"
}
/** @enumType */
type FontTypeWithLiterals = FontType | 'PX' | 'EM';
interface SpoilerData {
    /** Spoiler ID. */
    id?: string | null;
}
interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppTypeWithLiterals;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media;
}
/** @oneof */
interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
/** @enumType */
type AppTypeWithLiterals = AppType | 'PRODUCT' | 'EVENT' | 'BOOKING';
interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: V1Media;
    /** Video thumbnail details. */
    thumbnail?: V1Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItemsWithLiterals;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: DirectionWithLiterals;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
/** @enumType */
type InitialExpandedItemsWithLiterals = InitialExpandedItems | 'FIRST' | 'ALL' | 'NONE';
declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
/** @enumType */
type DirectionWithLiterals = Direction | 'LTR' | 'RTL';
interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
/** @enumType */
type VerticalAlignmentWithLiterals = VerticalAlignment | 'TOP' | 'MIDDLE' | 'BOTTOM';
interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignmentWithLiterals;
    /**
     * Cell background color as a hexadecimal value.
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
}
interface BorderColors {
    /**
     * Left border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    left?: string | null;
    /**
     * Right border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    right?: string | null;
    /**
     * Top border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    top?: string | null;
    /**
     * Bottom border color as a hexadecimal value.
     * @format COLOR_HEX
     */
    bottom?: string | null;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
declare enum NullValue {
    /** Null value. */
    NULL_VALUE = "NULL_VALUE"
}
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
interface ListValue {
    /** Repeated field of dynamically typed values. */
    values?: any[];
}
interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: V1Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
interface CaptionData {
    textStyle?: TextStyle;
}
interface LayoutCellData {
    /** Size of the cell in 12 columns grid. */
    colSpan?: number | null;
}
interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
interface Media {
    /**
     * Main media (image, video, etc.) associated with this product.
     * @readonly
     */
    main?: ProductMedia;
    /**
     * All media items.
     * > **Note:** Returned only when you pass `"MEDIA_ITEMS_INFO"` to the `fields` array in Products API requests.
     */
    itemsInfo?: MediaItemsInfo;
}
interface ProductMedia extends ProductMediaSetByOneOf, ProductMediaMediaOneOf {
    /**
     * Set media by ID of an existing file in Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     */
    _id?: string;
    /**
     * Set media using an external media URL.
     * @format WEB_URL
     */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
    /**
     * Image alt text.
     * @minLength 1
     * @maxLength 1000
     */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     * @maxLength 80
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: MediaTypeWithLiterals;
    /**
     * Media thumbnail.
     * > **Note:** Returned only when you pass `"THUMBNAIL"` to the `fields` array in Products API requests.
     */
    thumbnail?: Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     * @format GUID
     */
    uploadId?: string;
}
/** @oneof */
interface ProductMediaSetByOneOf {
    /**
     * Set media by ID of an existing file in Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     */
    _id?: string;
    /**
     * Set media using an external media URL.
     * @format WEB_URL
     */
    url?: string;
}
/** @oneof */
interface ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: string;
    /**
     * Product video.
     * @readonly
     */
    video?: string;
}
interface VideoResolution {
    /**
     * Video URL.
     * @format WEB_URL
     */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /**
     * Video format for example, mp4, hls.
     * @maxLength 200
     */
    format?: string;
}
declare enum MediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    /** Image media type. */
    IMAGE = "IMAGE",
    /** Video media type. */
    VIDEO = "VIDEO"
}
/** @enumType */
type MediaTypeWithLiterals = MediaType | 'UNKNOWN_MEDIA_TYPE' | 'IMAGE' | 'VIDEO';
interface Thumbnail {
    /**
     * Thumbnail url.
     * @format WEB_URL
     */
    url?: string;
    /** Thumbnail height. */
    height?: number;
    /** Thumbnail width. */
    width?: number;
    /**
     * Thumbnail alt text.
     * @minLength 1
     * @maxLength 1000
     */
    altText?: string | null;
}
interface MediaItemsInfo {
    /**
     * All media items (images, videos etc) associated with this product.
     * @maxSize 15
     */
    items?: ProductMedia[];
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /**
     * The source that added the keyword terms to the SEO settings.
     * @maxLength 1000
     */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /**
     * User-selected keyword terms for a specific page.
     * @maxSize 5
     */
    keywords?: Keyword[];
}
interface ConnectedOption extends ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
    /**
     * ID of a customization with `customizationType: PRODUCT_OPTION`.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /**
     * Option name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /** Option render type. */
    optionRenderType?: ProductOptionRenderTypeWithLiterals;
}
/** @oneof */
interface ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
}
declare enum ProductOptionRenderType {
    /** Not implemented. */
    UNKNOWN_OPTION_RENDER_TYPE = "UNKNOWN_OPTION_RENDER_TYPE",
    /** Text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Swatch choices. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
/** @enumType */
type ProductOptionRenderTypeWithLiterals = ProductOptionRenderType | 'UNKNOWN_OPTION_RENDER_TYPE' | 'TEXT_CHOICES' | 'SWATCH_CHOICES';
interface ChoicesSettings {
    /**
     * List of available choices for the option.
     * @minSize 1
     * @maxSize 100
     * @immutable
     */
    choices?: ConnectedOptionChoice[];
}
interface ConnectedOptionChoice extends ConnectedOptionChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
    /**
     * The id of the choice.
     * @format GUID
     */
    choiceId?: string | null;
    /**
     * Product media overrides. When not empty only these images will be shown when such choices selected by customer. Otherwise all images of product.
     * When several choices from different options selected only media filter present in `media_overrides` of ALL choices will be shown.
     * For example if Color:red has images 1,2,3 and Material:Silk has images 2,3,5 then only images 2,3 will be shown when both of them selected.
     * @maxSize 100
     */
    linkedMedia?: ProductMedia[];
    /** The type of this choice. */
    choiceType?: ChoiceTypeWithLiterals;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * A flag that indicates if at least one variant with this choice is in stock in the default store's location.
     * For example, a product with 'Color' and 'Size' options with variants: [Blue, Small] which is out of stock and [Red Large] which is in stock. For choice 'Blue' ths flag will be 'false' and for 'Red' the flag will be true
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether at least one variant with this choice is visible.
     *
     * Default: `false`
     * @readonly
     */
    visible?: boolean;
}
/** @oneof */
interface ConnectedOptionChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
}
declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    /** Text choice. */
    CHOICE_TEXT = "CHOICE_TEXT",
    /** Single color choice. */
    ONE_COLOR = "ONE_COLOR",
    /** Multiple colors choice. */
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    /** Image choice. */
    IMAGE = "IMAGE"
}
/** @enumType */
type ChoiceTypeWithLiterals = ChoiceType | 'UNKNOWN_CHOICE_TYPE' | 'CHOICE_TEXT' | 'ONE_COLOR' | 'MULTIPLE_COLORS' | 'IMAGE';
interface MultipleColors {
    /**
     * List of color codes.
     * @minLength 3
     * @maxLength 20
     * @minSize 2
     * @maxSize 2
     */
    colorCodes?: string[];
}
interface ConnectedModifier extends ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
    /**
     * ID of a customization with `customizationType: MODIFIER`.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /**
     * Modifier title.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /** Modifier render type. */
    modifierRenderType?: ModifierRenderTypeWithLiterals;
    /** Whether customer input is required for this modifier. */
    mandatory?: boolean;
}
/** @oneof */
interface ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
}
declare enum ModifierRenderType {
    /** Not implemented. */
    UNKNOWN_MODIFIER_RENDER_TYPE = "UNKNOWN_MODIFIER_RENDER_TYPE",
    /** Free text. */
    FREE_TEXT = "FREE_TEXT",
    /** Text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Swatch choices. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
/** @enumType */
type ModifierRenderTypeWithLiterals = ModifierRenderType | 'UNKNOWN_MODIFIER_RENDER_TYPE' | 'FREE_TEXT' | 'TEXT_CHOICES' | 'SWATCH_CHOICES';
interface FreeTextSettings {
    /** Minimum number of characters. */
    minCharCount?: number;
    /**
     * Maximum number of characters.
     * @max 500
     */
    maxCharCount?: number;
    /**
     * Default amount to be added to the product's price.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    defaultAddedPrice?: string | null;
    /**
     * Title of the text to be input by the customer.
     * @minLength 1
     * @maxLength 150
     */
    title?: string;
}
interface ModifierChoicesSettings {
    /**
     * List of modifier choices.
     * @minSize 1
     * @maxSize 100
     * @immutable
     */
    choices?: ConnectedModifierChoice[];
}
interface ConnectedModifierChoice extends ConnectedModifierChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
    /**
     * Choice ID.
     * @format GUID
     */
    choiceId?: string | null;
    /**
     * Product media.
     * @maxSize 100
     */
    linkedMedia?: ProductMedia[];
    /** Choice type. */
    choiceType?: ChoiceTypeWithLiterals;
    /**
     * Modifier key. Used for eCommerce integration.
     * @readonly
     * @minLength 1
     * @maxLength 50
     */
    key?: string;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Added price.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    addedPrice?: string | null;
}
/** @oneof */
interface ConnectedModifierChoiceValueOneOf {
    /**
     * Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color).
     * @minLength 3
     * @maxLength 20
     */
    colorCode?: string;
}
interface Brand {
    /**
     * Brand ID.
     * @format GUID
     */
    _id?: string | null;
    /**
     * Brand name.
     * @maxLength 50
     */
    name?: string | null;
}
interface InfoSection {
    /**
     * Info section ID.
     * @format GUID
     */
    _id?: string | null;
    /**
     * Info section unique name.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @maxLength 100
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @minLength 1
     * @maxLength 50
     * @readonly
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     * > **Note:** Returned only when you pass `"INFO_SECTION_DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"INFO_SECTION_PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     * @maxLength 16000
     */
    plainDescription?: string | null;
}
interface Ribbon {
    /**
     * Ribbon ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string | null;
    /**
     * Ribbon name.
     * @maxLength 30
     */
    name?: string | null;
}
interface ProductCategoriesInfo {
    /**
     * A list of categories related to product.
     * @readonly
     * @maxSize 2000
     */
    categories?: ProductCategory[];
}
interface ProductCategory {
    /**
     * Category ID.
     * @format GUID
     */
    _id?: string;
    /**
     * Index location of the product within the category, which can be utilized for sorting products in a specific category. For detailed instructions on how to set this up, refer to the [Add and arrange products in category](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/sample-use-cases-and-flows#add-and-arrange-products-in-category) sample flow.
     * @max 200
     */
    index?: number | null;
}
interface ProductCategoryIdsInfo {
    /**
     * A list of category ids related to product.
     * @readonly
     * @maxSize 2000
     * @format GUID
     */
    categoryIds?: string[];
}
interface PriceRange {
    /** Minimum value. */
    minValue?: FixedMonetaryAmount;
    /** Maximum value. */
    maxValue?: FixedMonetaryAmount;
}
interface FixedMonetaryAmount {
    /**
     * Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     * @maxLength 20
     */
    formattedAmount?: string | null;
}
interface Inventory {
    /**
     * Current availability status.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatusWithLiterals;
    /**
     * Current preorder status.
     * @readonly
     */
    preorderStatus?: PreorderStatusWithLiterals;
    /**
     * Preorder availability status.
     * @readonly
     */
    preorderAvailability?: ProductPreorderAvailabilityWithLiterals;
}
declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** All variants are in stock and available for purchase. */
    IN_STOCK = "IN_STOCK",
    /** All variants are out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Some variants are out of stock and some are in stock and available for purchase. */
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
/** @enumType */
type AvailabilityStatusWithLiterals = AvailabilityStatus | 'UNKNOWN_AVAILABILITY_STATUS' | 'IN_STOCK' | 'OUT_OF_STOCK' | 'PARTIALLY_OUT_OF_STOCK';
declare enum PreorderStatus {
    UNKNOWN_PREORDER_STATUS = "UNKNOWN_PREORDER_STATUS",
    /** All variants are enabled for preorder. */
    ENABLED = "ENABLED",
    /** All variants are disabled for preorder. */
    DISABLED = "DISABLED",
    /** Some variants are disabled and some are enabled for preorder. */
    PARTIALLY_ENABLED = "PARTIALLY_ENABLED"
}
/** @enumType */
type PreorderStatusWithLiterals = PreorderStatus | 'UNKNOWN_PREORDER_STATUS' | 'ENABLED' | 'DISABLED' | 'PARTIALLY_ENABLED';
declare enum ProductPreorderAvailability {
    UNKNOWN_PREORDER_AVAILABILITY_STATUS = "UNKNOWN_PREORDER_AVAILABILITY_STATUS",
    /** All the product variants are available for preorder. */
    ALL_VARIANTS = "ALL_VARIANTS",
    /** None of the product variants are available for preorder. */
    NO_VARIANTS = "NO_VARIANTS",
    /** Some of the product variants are available for preorder. */
    SOME_VARIANTS = "SOME_VARIANTS"
}
/** @enumType */
type ProductPreorderAvailabilityWithLiterals = ProductPreorderAvailability | 'UNKNOWN_PREORDER_AVAILABILITY_STATUS' | 'ALL_VARIANTS' | 'NO_VARIANTS' | 'SOME_VARIANTS';
declare enum ProductType {
    /** Not implemented. */
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    /** Physical product. */
    PHYSICAL = "PHYSICAL",
    /** Digital product. */
    DIGITAL = "DIGITAL"
}
/** @enumType */
type ProductTypeWithLiterals = ProductType | 'UNKNOWN_PRODUCT_TYPE' | 'PHYSICAL' | 'DIGITAL';
interface PhysicalProperties {
    /**
     * Price per unit settings.
     * > **Note:** Use this field only when relevant. For example, for products that are sold by weight, volume, or length.
     */
    pricePerUnit?: PricePerUnitSettings;
    /**
     * Fulfiller ID.
     * @format GUID
     */
    fulfillerId?: string | null;
    /**
     * Product shipping weight range - Calculated from the lightest and heaviest variant shipping weights.
     * @readonly
     */
    shippingWeightRange?: WeightRange;
    /**
     * Product price per unit range. The minimum and maximum price per unit of all the variants.
     * @readonly
     */
    pricePerUnitRange?: PricePerUnitRange;
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfo;
    /**
     * Delivery profile ID.
     * @format GUID
     */
    deliveryProfileId?: string | null;
}
interface PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     * @min 0.01
     * @max 999999999.99
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     */
    measurementUnit?: MeasurementUnitWithLiterals;
}
interface WeightRange {
    /**
     * Minimum weight across all variants associated with this product.
     * @max 999999999.99
     */
    minValue?: number;
    /**
     * Maximum weight across all variants associated with this product.
     * @max 999999999.99
     */
    maxValue?: number;
}
interface PricePerUnitRange {
    /** Minimum price per unit across all variants. */
    minValue?: PricePerUnitRangePricePerUnit;
    /** Maximum price per unit across all variants. */
    maxValue?: PricePerUnitRangePricePerUnit;
}
interface PricePerUnitRangePricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account pricePerUnit settings of product and variants and price of variants.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit info in the format of variant specific data / product setting, for example €4.00 / 1 Kg.
     * > **Note:** This field is returned by the API only when you pass `fields: "CURRENCY"` in a request.
     * @readonly
     * @maxLength 100
     */
    description?: string | null;
}
interface WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnitWithLiterals;
}
interface BreadcrumbsInfo {
    /**
     * Breadcrumbs.
     * @readonly
     * @maxSize 5
     */
    breadcrumbs?: BreadCrumb[];
}
interface BreadCrumb {
    /**
     * Category ID.
     * @format GUID
     */
    categoryId?: string;
    /**
     * Category name.
     * @minLength 1
     * @maxLength 80
     */
    categoryName?: string;
    /**
     * Category slug.
     * @minLength 1
     * @maxLength 100
     */
    categorySlug?: string;
}
interface VariantsInfo {
    /**
     * List of related variants.
     * @minSize 1
     * @maxSize 1000
     */
    variants?: Variant[];
}
interface Variant extends VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /**
     * Variant ID.
     * @format GUID
     * @immutable
     */
    _id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     */
    sku?: string | null;
    /**
     * Variant barcode.
     * @minLength 1
     * @maxLength 40
     */
    barcode?: string | null;
    /**
     * List of choices that define the product's variant, which requires exactly one choice per product option.
     * Must use `optionChoiceNames` in all requests this field is required.
     * Empty only for default variants of unmanaged products.
     * @maxSize 6
     * @immutable
     */
    choices?: OptionChoice[];
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.actual_price`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: InventoryStatus;
}
/** @oneof */
interface VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
interface OptionChoice {
    /** Option and choice IDs. These match the IDs of the option and choice from the product's options field. */
    optionChoiceIds?: OptionChoiceIds;
    /**
     * Option and choice names.
     * This needs to be used in all requests `OptionChoice` is needed, and all `OptionChoiceNames` fields are required.
     * > **Note:** Returned only when you pass `"VARIANT_OPTION_CHOICE_NAMES"` to the `fields` array in Products API requests.
     */
    optionChoiceNames?: OptionChoiceNames;
}
interface OptionChoiceIds {
    /**
     * Option ID.
     * @minLength 1
     * @maxLength 36
     * @immutable
     */
    optionId?: string;
    /**
     * Choice ID.
     * @format GUID
     * @immutable
     */
    choiceId?: string;
}
interface OptionChoiceNames {
    /**
     * Option name.
     * @minLength 1
     */
    optionName?: string;
    /**
     * Choice name.
     * @minLength 1
     */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderTypeWithLiterals;
}
interface PriceInfo {
    /** Variant price. Must be greater or equal to 0. */
    actualPrice?: FixedMonetaryAmount;
    /** The compare-at-price represents the original price of a product before any discount. It is optional and should only be set if a discount applies. When set, it must be higher than the current price to reflect accurate savings. */
    compareAtPrice?: FixedMonetaryAmount;
}
interface RevenueDetails {
    /** Item cost. */
    cost?: FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     * @max 1
     */
    profitMargin?: number;
}
interface VariantPhysicalProperties {
    /**
     * Variant shipping weight.
     * product.physicalProperties.shipping_weight_range values are taken from here.
     * @max 999999999.99
     */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     */
    pricePerUnit?: PricePerUnit;
}
interface PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     */
    settings?: PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     * @maxLength 100
     */
    description?: string | null;
}
interface VariantDigitalProperties {
    /** Digital file which will be downloaded by customer after successful purchase. */
    digitalFile?: SecuredMedia;
}
interface SecuredMedia {
    /**
     * Media ID in media manager.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * Original file name.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { maxScale:0 }
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: FileTypeWithLiterals;
}
declare enum FileType {
    /** Unspecified file type. */
    UNSPECIFIED = "UNSPECIFIED",
    /** Secure picture file. */
    SECURE_PICTURE = "SECURE_PICTURE",
    /** Secure video file. */
    SECURE_VIDEO = "SECURE_VIDEO",
    /** Secure document file. */
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    /** Secure music file. */
    SECURE_MUSIC = "SECURE_MUSIC",
    /** Secure archive file. */
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** @enumType */
type FileTypeWithLiterals = FileType | 'UNSPECIFIED' | 'SECURE_PICTURE' | 'SECURE_VIDEO' | 'SECURE_DOCUMENT' | 'SECURE_MUSIC' | 'SECURE_ARCHIVE';
interface SubscriptionPricesInfo {
    /**
     * Subscription prices.
     * @maxSize 6
     */
    subscriptionPrices?: SubscriptionPrice[];
}
interface SubscriptionPrice {
    /**
     * Subscription ID.
     * @format GUID
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.actual_price`
     * @readonly
     */
    price?: FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: SubscriptionPricePerUnit;
}
interface SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     * @maxLength 20
     */
    description?: string | null;
}
interface InventoryStatus {
    /** Whether the variant is in stock. */
    inStock?: boolean;
    /** Whether preorder is enabled for this variant. */
    preorderEnabled?: boolean;
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface SubscriptionDetails {
    /**
     * Subscriptions.
     * @minSize 1
     * @maxSize 6
     */
    subscriptions?: Subscription[];
    /**
     * Whether to allow one-time purchases in addition to subscription-based purchases.
     *
     * Default: `false`
     */
    allowOneTimePurchases?: boolean | null;
}
interface Subscription extends SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends.
     * @min 2
     * @max 999
     */
    billingCycles?: number;
    /**
     * Subscription ID.
     * @format GUID
     * @immutable
     */
    _id?: string | null;
    /**
     * Subscription title.
     * @minLength 1
     * @maxLength 20
     */
    title?: string;
    /**
     * Subscription description.
     * @maxLength 60
     */
    description?: string | null;
    /**
     * Whether the subscription is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Frequency of recurring payment.
     * For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     */
    frequency?: SubscriptionFrequencyWithLiterals;
    /**
     * Interval of recurring payment. Default: `1`. For example, if `frequency: MONTH`, `billingCycles: 3` and `interval: 2`; payment will be made every 2 months for a total of 6 months.
     * @min 1
     * @max 50
     */
    interval?: number | null;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `amount: 20`, `type: AMOUNT`.
     */
    discount?: SubscriptionDiscount;
}
/** @oneof */
interface SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends.
     * @min 2
     * @max 999
     */
    billingCycles?: number;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface SubscriptionDiscount extends SubscriptionDiscountDiscountOneOf {
    /**
     * Amount to discount from the variant discounted_price.
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    amountOff?: string;
    /**
     * Percentage to discount from variant discounted_price.
     * @min 0.1
     * @max 99.9
     */
    percentOff?: number;
    /** Discount type. */
    type?: DiscountTypeWithLiterals;
}
/** @oneof */
interface SubscriptionDiscountDiscountOneOf {
    /**
     * Amount to discount from the variant discounted_price.
     * @decimalValue options { gt:0, lte:999999999, maxScale:3 }
     */
    amountOff?: string;
    /**
     * Percentage to discount from variant discounted_price.
     * @min 0.1
     * @max 99.9
     */
    percentOff?: number;
}
declare enum DiscountType {
    UNKNOWN_DISCOUNT = "UNKNOWN_DISCOUNT",
    /** Discount by a specific amount. */
    AMOUNT = "AMOUNT",
    /** Discount by a percentage. */
    PERCENT = "PERCENT"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'UNKNOWN_DISCOUNT' | 'AMOUNT' | 'PERCENT';
interface VariantSummary {
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantCount?: number;
}
interface MinVariantPriceInfo {
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.actualPrice`
     * @readonly
     */
    minSubscriptionPrice?: FixedMonetaryAmount;
    /**
     * Subscription price per unit calculated value of price per unit.
     * Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    minSubscriptionPricePerUnit?: string | null;
    /**
     * Variant price per unit.
     * @readonly
     */
    pricePerUnitData?: PricePerUnit;
    /**
     * Variant SKU (stock keeping unit).
     * @readonly
     * @minLength 1
     * @maxLength 40
     */
    sku?: string | null;
    /**
     * Variant shipping weight.
     * @readonly
     * @max 999999999.99
     */
    weight?: number | null;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    revenueDetails?: RevenueDetails;
    /** Variant price. Must be greater or equal to 0. */
    actualPrice?: FixedMonetaryAmount;
    /** The compare-at-price represents the original price of a product before any discount. It is optional and should only be set if a discount applies. When set, it must be higher than the current price to reflect accurate savings. */
    compareAtPrice?: FixedMonetaryAmount;
}
interface MigrateProductVariantsResponse {
}
interface RecoverProductVariantsRequest {
}
interface RecoverProductVariantsResponse {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface QueryVariantsOptions {
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[] | undefined;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface VariantsQueryResult extends QueryCursorResult {
    items: ReadOnlyVariant[];
    query: VariantsQueryBuilder;
    next: () => Promise<VariantsQueryResult>;
    prev: () => Promise<VariantsQueryResult>;
}
interface VariantsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'productData.productId', value: string) => VariantsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'productData.productId', value: any[]) => VariantsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'productData.productId', value: any) => VariantsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'productData.productId', value: boolean) => VariantsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'productData.productId'>) => VariantsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'productData.productId'>) => VariantsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => VariantsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => VariantsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<VariantsQueryResult>;
}
interface SearchVariantsOptions {
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface ReadOnlyVariantSearchSpec extends SearchSpec {
    aggregatable: [
        'barcode',
        'internalMetadata.rowState',
        'inventoryStatus.inStock',
        'inventoryStatus.preorderEnabled',
        'optionChoices.optionChoiceIds.choiceId',
        'optionChoices.optionChoiceIds.optionId',
        'price.actualPrice.amount',
        'price.compareAtPrice.amount',
        'productData.directCategoryIds',
        'productData.name',
        'productData.productId',
        'productData.productType',
        'productData.slug',
        'productData.visible',
        'productData.visibleInPos',
        'sku',
        'visible'
    ];
    paging: 'cursor';
    wql: [
        {
            operators: ['$hasAll', '$hasSome'];
            fields: [
                'optionChoices.optionChoiceIds.choiceId',
                'optionChoices.optionChoiceIds.optionId'
            ];
            sort: 'NONE';
        },
        {
            operators: '*';
            fields: [
                'barcode',
                'internalMetadata.rowState',
                'inventoryStatus.inStock',
                'inventoryStatus.preorderEnabled',
                'price.actualPrice.amount',
                'price.compareAtPrice.amount',
                'productData.directCategoryIds',
                'productData.name',
                'productData.productId',
                'productData.productType',
                'productData.slug',
                'productData.visible',
                'productData.visibleInPos',
                'sku',
                'visible'
            ];
            sort: 'NONE';
        }
    ];
}

export { type ActionEvent, type Aggregation, type AggregationData, type AggregationDateHistogramAggregation, type AggregationKindOneOf, type AggregationNestedAggregation, type AggregationRangeAggregation, type AggregationResults, type AggregationResultsResultOneOf, type AggregationResultsScalarResult, type AggregationScalarAggregation, AggregationType, type AggregationValueAggregation, type AggregationValueAggregationOptionsOneOf, Alignment, type AnchorData, type AppEmbedData, type AppEmbedDataAppDataOneOf, AppType, type AudioData, AvailabilityStatus, type Background, type BackgroundBackgroundOneOf, BackgroundType, type BlockquoteData, type BookingData, type Border, type BorderColors, type Brand, type BreadCrumb, type BreadcrumbsInfo, type BulletedListData, type ButtonData, type CaptionData, type CellStyle, ChoiceType, type ChoicesSettings, type CodeBlockData, type CollapsibleListData, type ColorData, type Colors, type CommonAggregation, type CommonAggregationKindOneOf, CommonAggregationType, CommonScalarType, type CommonSearchDetails, CommonSortOrder, type CommonSorting, type CommonVideoResolution, type ConnectedModifier, type ConnectedModifierChoice, type ConnectedModifierChoiceValueOneOf, type ConnectedModifierModifierSettingsOneOf, type ConnectedOption, type ConnectedOptionChoice, type ConnectedOptionChoiceValueOneOf, type ConnectedOptionOptionSettingsOneOf, Crop, type CursorPaging, type CursorPagingMetadata, type CursorQuery, type CursorQueryPagingMethodOneOf, type CursorSearch, type CursorSearchPagingMethodOneOf, type Cursors, type DateHistogramAggregation, DateHistogramAggregationInterval, type DateHistogramResult, type DateHistogramResults, type Decoration, type DecorationDataOneOf, DecorationType, type DeprecatedSearchVariantsWithOffsetRequest, type DeprecatedSearchVariantsWithOffsetResponse, type Design, type Dimensions, Direction, DiscountType, type DividerData, type DocumentStyle, type DomainEvent, type DomainEventBodyOneOf, type EmbedData, type Empty, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventData, type ExtendedFields, type FileData, type FileSource, type FileSourceDataOneOf, FileType, type FixedMonetaryAmount, type FontSizeData, FontType, type FreeTextSettings, type GIF, type GIFData, GIFType, type GalleryData, type GalleryOptions, type Gradient, type GroupByAggregation, type GroupByAggregationKindOneOf, type GroupByValueResults, type HTMLData, type HTMLDataDataOneOf, type HeadingData, type Height, type IdentificationData, type IdentificationDataIdOneOf, type Image, type ImageData, type ImageDataStyles, type IncludeMissingValuesOptions, type InfoSection, InitialExpandedItems, type InternalMetadata, InternalRowState, Interval, type Inventory, type InventoryStatus, type Item, type ItemDataOneOf, type ItemStyle, type Keyword, type Layout, type LayoutCellData, LayoutType, LineStyle, type Link, type LinkData, type LinkDataOneOf, type LinkPreviewData, type LinkPreviewDataStyles, type ListValue, type MapData, type MapSettings, MapType, MeasurementUnit, type Media, type MediaItemsInfo, MediaType, type MentionData, type MessageEnvelope, type Metadata, type MigrateProductVariantsRequest, type MigrateProductVariantsResponse, type MinVariantPriceInfo, MissingValues, Mode, type ModifierChoicesSettings, ModifierRenderType, type MultipleColors, type NestedAggregation, type NestedAggregationItem, type NestedAggregationItemKindOneOf, type NestedAggregationNestedAggregationItem, type NestedAggregationNestedAggregationItemKindOneOf, NestedAggregationNestedAggregationType, type NestedAggregationResults, type NestedAggregationResultsResultOneOf, NestedAggregationType, type NestedResultValue, type NestedResultValueResultOneOf, type NestedResults, type NestedValueAggregationResult, type Node, type NodeDataOneOf, type NodeStyle, NodeType, NullValue, type Oembed, type Option, type OptionChoice, type OptionChoiceIds, type OptionChoiceNames, type OptionDesign, type OptionLayout, type OrderedListData, Orientation, type PDFSettings, type PagingMetadata, type ParagraphData, type Permissions, type PhysicalProperties, type PlatformOffsetSearch, type PlatformOffsetSearchPagingMethodOneOf, type PlatformPaging, type PlaybackOptions, type PluginContainerData, PluginContainerDataAlignment, type PluginContainerDataWidth, type PluginContainerDataWidthDataOneOf, type Poll, type PollData, type PollDataLayout, type PollDesign, type PollLayout, PollLayoutDirection, PollLayoutType, type PollSettings, Position, PreorderStatus, type PriceInfo, type PricePerUnit, type PricePerUnitRange, type PricePerUnitRangePricePerUnit, type PricePerUnitSettings, type PriceRange, type Product, type ProductCategoriesInfo, type ProductCategory, type ProductCategoryIdsInfo, type ProductFields, type ProductFieldsTypedPropertiesOneOf, type ProductMedia, type ProductMediaMediaOneOf, ProductMediaMediaType, type ProductMediaSetByOneOf, ProductOptionRenderType, ProductPreorderAvailability, ProductType, type ProductTypedPropertiesOneOf, type QueryVariantsOptions, type QueryVariantsRequest, type QueryVariantsResponse, type RangeAggregation, type RangeAggregationRangeBucket, type RangeAggregationResult, type RangeBucket, type RangeResult, type RangeResults, type ReadOnlyVariant, type ReadOnlyVariantSearchSpec, type ReadOnlyVariantTypedPropertiesOneOf, type RecoverProductVariantsRequest, type RecoverProductVariantsResponse, type Rel, RequestedFields, type RestoreInfo, type Results, type RevenueDetails, type Ribbon, type RichContent, type ScalarAggregation, type ScalarResult, ScalarType, type SearchDetails, SearchDetailsMode, type SearchVariantsOptions, type SearchVariantsRequest, type SearchVariantsResponse, type SecuredMedia, SecuredMediaFileType, type SeoSchema, type Settings, SortDirection, SortOrder, SortType, type Sorting, Source, type Spoiler, type SpoilerData, type Styles, type StylesBorder, type Subscription, type SubscriptionCyclesOneOf, type SubscriptionDetails, type SubscriptionDiscount, type SubscriptionDiscountDiscountOneOf, SubscriptionFrequency, type SubscriptionPrice, type SubscriptionPricePerUnit, type SubscriptionPricesInfo, type TableCellData, type TableData, type Tag, Target, TextAlignment, type TextData, type TextNodeStyle, type TextStyle, type Thumbnail, type Thumbnails, ThumbnailsAlignment, Type, type V1Media, type V3FixedMonetaryAmount, type V3InventoryStatus, type V3OptionChoice, type V3OptionChoiceIds, type V3OptionChoiceNames, type V3PhysicalProperties, type V3PriceInfo, type V3PricePerUnit, type V3PricePerUnitSettings, type V3ProductMedia, type V3ProductMediaMediaOneOf, type V3ProductMediaSetByOneOf, V3ProductType, type V3RevenueDetails, type V3SecuredMedia, type V3SubscriptionPrice, type V3SubscriptionPricePerUnit, type V3SubscriptionPricesInfo, type V3Thumbnail, type V3VariantDigitalProperties, type V3VariantPhysicalProperties, type V3WeightMeasurementUnitInfo, type ValueAggregation, type ValueAggregationIncludeMissingValuesOptions, ValueAggregationMissingValues, type ValueAggregationOptionsOneOf, type ValueAggregationResult, ValueAggregationSortDirection, ValueAggregationSortType, type ValueResult, type ValueResults, type Variant, type VariantDigitalProperties, type VariantPhysicalProperties, type VariantSummary, type VariantTypedPropertiesOneOf, type VariantsInfo, type VariantsQueryBuilder, type VariantsQueryResult, VerticalAlignment, type Video, type VideoData, type VideoResolution, ViewMode, ViewRole, VoteRole, WebhookIdentityType, type WeightMeasurementUnitInfo, type WeightRange, WeightUnit, Width, WidthType };
