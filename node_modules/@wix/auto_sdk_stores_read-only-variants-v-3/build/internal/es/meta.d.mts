import { aJ as QueryVariantsRequest$1, aO as QueryVariantsResponse$1, aR as SearchVariantsRequest$1, a as SearchVariantsResponse$1 } from './stores-catalog-v3-read-only-variant-read-only-variants-v-3.universal-Ba22Ko-1.mjs';
import '@wix/sdk-types';

interface ReadOnlyVariant extends ReadOnlyVariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: V3VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: V3VariantDigitalProperties;
    /**
     * Variant ID.
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     * @readonly
     */
    visible?: boolean | null;
    /**
     * Variant SKU (stock keeping unit).
     * @minLength 1
     * @maxLength 40
     * @readonly
     */
    sku?: string | null;
    /**
     * Variant barcode.
     * @minLength 1
     * @maxLength 40
     * @readonly
     */
    barcode?: string | null;
    /**
     * List of option choices
     * In case this list is empty, this is the default variant of an unmanaged product. - check if bridges need more than ids
     * @maxSize 6
     * @readonly
     */
    optionChoices?: V3OptionChoice[];
    /**
     * Variant price.
     * @readonly
     */
    price?: V3PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    revenueDetails?: V3RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: V3ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.actualPrice`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: V3SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: V3InventoryStatus;
    /**
     * Product fields
     * @readonly
     */
    productData?: ProductFields;
}
/** @oneof */
interface ReadOnlyVariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: V3VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: V3VariantDigitalProperties;
}
interface V3OptionChoice {
    /**
     * Option and choice IDs.
     * @readonly
     */
    optionChoiceIds?: V3OptionChoiceIds;
    /**
     * Option and choice names.
     * @readonly
     */
    optionChoiceNames?: V3OptionChoiceNames;
}
interface V3OptionChoiceIds {
    /**
     * Option ID.
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    optionId?: string;
    /**
     * Choice ID.
     * @format GUID
     * @readonly
     */
    choiceId?: string;
}
interface V3OptionChoiceNames {
    /**
     * Option name.
     * @minLength 1
     * @maxLength 50
     * @readonly
     */
    optionName?: string;
    /**
     * Choice name.
     * @minLength 1
     * @maxLength 50
     * @readonly
     */
    choiceName?: string;
    /**
     * Render type.
     * @readonly
     * @maxLength 50
     */
    renderType?: string;
}
interface V3PriceInfo {
    /**
     * Variant price.
     * @readonly
     */
    actualPrice?: V3FixedMonetaryAmount;
    /**
     * The compare-at-price represents the original price of a product before any discount.
     * @readonly
     */
    compareAtPrice?: V3FixedMonetaryAmount;
}
interface V3FixedMonetaryAmount {
    /**
     * Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount.
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     * @readonly
     */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * @readonly
     * @maxLength 20
     */
    formattedAmount?: string | null;
}
interface V3RevenueDetails {
    /**
     * Item cost.
     * @readonly
     */
    cost?: V3FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: V3FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     * @max 1
     */
    profitMargin?: number;
}
interface V3ProductMedia extends V3ProductMediaSetByOneOf, V3ProductMediaMediaOneOf {
    /**
     * ID of existing media from Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     * @readonly
     */
    id?: string;
    /**
     * Media URL.
     * @format WEB_URL
     * @readonly
     */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: CommonImage;
    /**
     * Product video.
     * @readonly
     */
    video?: CommonVideoV2;
    /**
     * Image alt text.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     * @maxLength 80
     * @readonly
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: ProductMediaMediaTypeWithLiterals;
    /**
     * Media thumbnail.
     * @readonly
     */
    thumbnail?: V3Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     * @format GUID
     */
    uploadId?: string;
}
/** @oneof */
interface V3ProductMediaSetByOneOf {
    /**
     * ID of existing media from Wix Media Manager.
     * @minLength 1
     * @maxLength 200
     * @readonly
     */
    id?: string;
    /**
     * Media URL.
     * @format WEB_URL
     * @readonly
     */
    url?: string;
}
/** @oneof */
interface V3ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: CommonImage;
    /**
     * Product video.
     * @readonly
     */
    video?: CommonVideoV2;
}
interface CommonImage {
    /**
     * WixMedia image ID.
     * @maxLength 400
     */
    id?: string;
    /**
     * Image URL.
     * @format WEB_URL
     */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /**
     * Image alt text.
     * @maxLength 200
     */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     * @maxLength 200
     */
    filename?: string | null;
}
interface CommonVideoV2 {
    /**
     * WixMedia ID.
     * @maxLength 400
     */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     * @maxSize 100
     */
    resolutions?: CommonVideoResolution[];
    /**
     * Video filename.
     * @readonly
     * @maxLength 200
     */
    filename?: string | null;
}
interface CommonVideoResolution {
    /**
     * Video URL.
     * @format WEB_URL
     */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /**
     * Video format for example, mp4, hls.
     * @maxLength 200
     */
    format?: string;
}
declare enum ProductMediaMediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    /** Image media type. */
    IMAGE = "IMAGE",
    /** Video media type. */
    VIDEO = "VIDEO"
}
/** @enumType */
type ProductMediaMediaTypeWithLiterals = ProductMediaMediaType | 'UNKNOWN_MEDIA_TYPE' | 'IMAGE' | 'VIDEO';
interface V3Thumbnail {
    /**
     * Thumbnail url.
     * @format WEB_URL
     * @readonly
     */
    url?: string;
    /**
     * Thumbnail height.
     * @readonly
     */
    height?: number;
    /**
     * Thumbnail width.
     * @readonly
     */
    width?: number;
    /**
     * Thumbnail alt text.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    altText?: string | null;
}
interface V3VariantPhysicalProperties {
    /**
     * Variant shipping weight.
     * @max 999999999.99
     * @readonly
     */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     * @readonly
     */
    pricePerUnit?: V3PricePerUnit;
}
interface V3PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     * @readonly
     */
    settings?: V3PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * @readonly
     * @maxLength 100
     */
    description?: string | null;
}
interface V3PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     * @min 0.01
     * @max 999999999.99
     * @readonly
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     * @readonly
     */
    measurementUnit?: MeasurementUnitWithLiterals;
}
declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
/** @enumType */
type MeasurementUnitWithLiterals = MeasurementUnit | 'UNSPECIFIED' | 'ML' | 'CL' | 'L' | 'CBM' | 'MG' | 'G' | 'KG' | 'MM' | 'CM' | 'M' | 'SQM' | 'OZ' | 'LB' | 'FLOZ' | 'PT' | 'QT' | 'GAL' | 'IN' | 'FT' | 'YD' | 'SQFT';
interface V3VariantDigitalProperties {
    /**
     * Digital file which will be downloaded by customer after successful purchase.
     * @readonly
     */
    digitalFile?: V3SecuredMedia;
}
interface V3SecuredMedia {
    /**
     * Media ID in media manager.
     * @minLength 1
     * @maxLength 100
     * @readonly
     */
    id?: string;
    /**
     * Original file name.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @minLength 1
     * @maxLength 1000
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { maxScale:0 }
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: SecuredMediaFileTypeWithLiterals;
}
declare enum SecuredMediaFileType {
    /** Unspecified file type. */
    UNSPECIFIED = "UNSPECIFIED",
    /** Secure picture file. */
    SECURE_PICTURE = "SECURE_PICTURE",
    /** Secure video file. */
    SECURE_VIDEO = "SECURE_VIDEO",
    /** Secure document file. */
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    /** Secure music file. */
    SECURE_MUSIC = "SECURE_MUSIC",
    /** Secure archive file. */
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** @enumType */
type SecuredMediaFileTypeWithLiterals = SecuredMediaFileType | 'UNSPECIFIED' | 'SECURE_PICTURE' | 'SECURE_VIDEO' | 'SECURE_DOCUMENT' | 'SECURE_MUSIC' | 'SECURE_ARCHIVE';
interface V3SubscriptionPricesInfo {
    /**
     * Subscription prices.
     * @maxSize 6
     * @readonly
     */
    subscriptionPrices?: V3SubscriptionPrice[];
}
interface V3SubscriptionPrice {
    /**
     * Subscription ID.
     * @format GUID
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.salePrice`
     * @readonly
     */
    price?: V3FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: V3SubscriptionPricePerUnit;
}
interface V3SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     * @decimalValue options { gte:0, lte:999999999, maxScale:3 }
     */
    value?: string;
    /**
     * Price per unit description.
     * @readonly
     * @maxLength 20
     */
    description?: string | null;
}
interface V3InventoryStatus {
    /**
     * Whether the variant is in stock.
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether preorder is enabled for this variant.
     * @readonly
     */
    preorderEnabled?: boolean;
}
interface ProductFields extends ProductFieldsTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: V3PhysicalProperties;
    /**
     * product id
     * @minLength 1
     * @maxLength 36
     * @readonly
     */
    productId?: string;
    /**
     * Product name.
     * @minLength 1
     * @maxLength 80
     * @readonly
     */
    name?: string | null;
    /**
     * product type
     * @readonly
     */
    productType?: V3ProductTypeWithLiterals;
    /**
     * Product slug.
     * @format URL_SLUG
     * @readonly
     */
    slug?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     * @readonly
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     * @readonly
     */
    visibleInPos?: boolean | null;
    /**
     * Main category ID.
     * @format GUID
     * @readonly
     */
    mainCategoryId?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @format CURRENCY
     * @readonly
     */
    currency?: string | null;
    /**
     * Product entity revision.
     * @readonly
     */
    revision?: string | null;
}
/** @oneof */
interface ProductFieldsTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: V3PhysicalProperties;
}
declare enum V3ProductType {
    /** Not implemented. */
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    /** Physical product. */
    PHYSICAL = "PHYSICAL",
    /** Digital product. */
    DIGITAL = "DIGITAL"
}
/** @enumType */
type V3ProductTypeWithLiterals = V3ProductType | 'UNKNOWN_PRODUCT_TYPE' | 'PHYSICAL' | 'DIGITAL';
interface V3PhysicalProperties {
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: V3WeightMeasurementUnitInfo;
}
interface V3WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnitWithLiterals;
}
declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
/** @enumType */
type WeightUnitWithLiterals = WeightUnit | 'UNSPECIFIED_WEIGHT_UNIT' | 'KG' | 'LB';
interface QueryVariantsRequest {
    /** WQL expression. */
    query?: CursorQuery;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 1000
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
declare enum RequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    CURRENCY = "CURRENCY",
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    MERCHANT_DATA = "MERCHANT_DATA",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO"
}
/** @enumType */
type RequestedFieldsWithLiterals = RequestedFields | 'UNKNOWN_REQUESTED_FIELD' | 'CURRENCY' | 'MERCHANT_DATA' | 'SUBSCRIPTION_PRICES_INFO' | 'WEIGHT_MEASUREMENT_UNIT_INFO';
interface QueryVariantsResponse {
    /** List of ReadOnlyVariants. */
    variants?: ReadOnlyVariant[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface SearchVariantsRequest {
    /** WQL expression */
    search?: CursorSearch;
    /**
     * A list of requested fields to be included in the response.
     * @maxSize 100
     */
    fields?: RequestedFieldsWithLiterals[];
}
interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]
     * @maxSize 10
     */
    sort?: Sorting[];
    /**
     * Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition.
     * @maxSize 10
     */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     * @maxLength 50
     */
    timeZone?: string | null;
}
/** @oneof */
interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CursorPaging;
}
interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dot notation to specify json path
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
}
interface RangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
declare enum SortType {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
/** @enumType */
type SortTypeWithLiterals = SortType | 'COUNT' | 'VALUE';
declare enum SortDirection {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
/** @enumType */
type SortDirectionWithLiterals = SortDirection | 'DESC' | 'ASC';
declare enum MissingValues {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
/** @enumType */
type MissingValuesWithLiterals = MissingValues | 'EXCLUDE' | 'INCLUDE';
interface IncludeMissingValuesOptions {
    /**
     * Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ...
     * @maxLength 20
     */
    addToBucket?: string;
}
declare enum ScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX"
}
/** @enumType */
type ScalarTypeWithLiterals = ScalarType | 'UNKNOWN_SCALAR_TYPE' | 'COUNT_DISTINCT' | 'MIN' | 'MAX';
interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: SortTypeWithLiterals;
    /** Should sort in ascending or descending order */
    sortDirection?: SortDirectionWithLiterals;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: MissingValuesWithLiterals;
}
/** @oneof */
interface ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
}
declare enum NestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
/** @enumType */
type NestedAggregationTypeWithLiterals = NestedAggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM';
interface RangeAggregation {
    /**
     * List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds
     * @maxSize 50
     */
    buckets?: RangeBucket[];
}
interface ScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: ScalarTypeWithLiterals;
}
interface DateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: IntervalWithLiterals;
}
declare enum Interval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
/** @enumType */
type IntervalWithLiterals = Interval | 'UNKNOWN_INTERVAL' | 'YEAR' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND';
interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /**
     * User-defined name of aggregation, should be unique, will appear in aggregation results
     * @maxLength 100
     */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: NestedAggregationTypeWithLiterals;
    /**
     * Field to aggregate by, use dont notation to specify json path
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
}
declare enum AggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** @enumType */
type AggregationTypeWithLiterals = AggregationType | 'UNKNOWN_AGGREGATION_TYPE' | 'VALUE' | 'RANGE' | 'SCALAR' | 'DATE_HISTOGRAM' | 'NESTED';
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
interface NestedAggregation {
    /**
     * Flattened list of aggregations, where each next aggregation is nested within previous one
     * @minSize 2
     * @maxSize 3
     */
    nestedAggregations?: NestedAggregationItem[];
}
interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: ModeWithLiterals;
    /**
     * Search term or expression
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path
     * @maxLength 200
     * @maxSize 20
     */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
declare enum Mode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
/** @enumType */
type ModeWithLiterals = Mode | 'OR' | 'AND';
interface SearchVariantsResponse {
    /** Variants which satisfy the provided query. */
    variants?: ReadOnlyVariant[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
interface AggregationData {
    /**
     * key = aggregation name (as derived from search request)
     * @maxSize 10000
     */
    results?: AggregationResults[];
}
interface ValueAggregationResult {
    /**
     * Value of the field
     * @maxLength 100
     */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
interface RangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /**
     * User-defined name of aggregation, matches the one provided in request
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that matches result */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by, matches the one provided in request
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
}
interface ValueResults {
    /**
     * List of value aggregations
     * @maxSize 250
     */
    results?: ValueAggregationResult[];
}
interface RangeResults {
    /**
     * List of ranges returned in same order as requested
     * @maxSize 50
     */
    results?: RangeAggregationResult[];
}
interface AggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: ScalarTypeWithLiterals;
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedValueAggregationResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Nested aggregations */
    nestedResults?: NestedAggregationResults;
}
interface ValueResult {
    /**
     * Value of the field
     * @maxLength 1000
     */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
interface RangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
interface ScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
/** @oneof */
interface NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
interface Results {
    /** List of nested aggregations */
    results?: Record<string, NestedResultValue>;
}
interface DateHistogramResult {
    /**
     * Date in ISO 8601 format
     * @maxLength 100
     */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
interface GroupByValueResults {
    /**
     * List of value aggregations
     * @maxSize 1000
     */
    results?: NestedValueAggregationResult[];
}
interface DateHistogramResults {
    /**
     * List of date histogram aggregations
     * @maxSize 200
     */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
interface NestedResults {
    /**
     * List of nested aggregations
     * @maxSize 1000
     */
    results?: Results[];
}
interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
    /**
     * User-defined name of aggregation as derived from search request
     * @maxLength 100
     */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: AggregationTypeWithLiterals;
    /**
     * Field to aggregate by as derived from search request
     * @maxLength 200
     */
    fieldPath?: string;
}
/** @oneof */
interface AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function queryVariants(): __PublicMethodMetaInfo<'POST', {}, QueryVariantsRequest$1, QueryVariantsRequest, QueryVariantsResponse$1, QueryVariantsResponse>;
declare function searchVariants(): __PublicMethodMetaInfo<'POST', {}, SearchVariantsRequest$1, SearchVariantsRequest, SearchVariantsResponse$1, SearchVariantsResponse>;

export { type __PublicMethodMetaInfo, queryVariants, searchVariants };
