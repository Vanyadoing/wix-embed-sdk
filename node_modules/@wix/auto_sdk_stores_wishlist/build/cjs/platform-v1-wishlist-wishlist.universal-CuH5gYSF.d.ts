interface WishlistData {
    /**
     * GUID unique to this list for this site
     * @format GUID
     */
    _id?: string | null;
    /** Member id the list belongs to */
    ownerId?: string;
    /**
     * List of items in the list. Not necessarily the full list (can depends on request data)
     * @minSize 1
     * @maxSize 100
     */
    items?: WishlistItem[];
    /**
     * Total count of items in the list
     * @min 1
     * @max 100
     */
    totalCount?: number;
}
interface WishlistItem {
    /** Unique identifier for an item of this type and origin */
    _id?: string;
    /**
     * The data the item was save to the list
     * @readonly
     */
    dateAdded?: Date | null;
    /** The type of the item. For example "product" */
    type?: string;
    /** The origin of the item. Should be the scope the item type is related to. For example "wixstores" */
    origin?: string;
}
interface ItemsAddedToWishlist {
    /**
     * GUID unique to this list for its site
     * @format GUID
     */
    _id?: string | null;
    /** Member id the list belongs to */
    ownerId?: string;
    /**
     * List of items that were added to wishlist
     * @minSize 1
     * @maxSize 100
     */
    items?: WishlistItem[];
}
interface ItemsRemovedFromWishlist {
    /**
     * GUID unique to this list for its site
     * @format GUID
     */
    _id?: string | null;
    /** Member id the list belongs to */
    ownerId?: string;
    /**
     * List of items that were removed from wishlist
     * @minSize 1
     * @maxSize 100
     */
    items?: WishlistItem[];
}
interface GetWishlistRequest {
    /**
     * List length limit. Default is 100
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /**
     * List starting index offset. Default is 0
     * @max 100
     */
    offset?: number | null;
    /** Filter requested list by specific kinds of items */
    kind?: WishlistItemKind[];
}
interface WishlistItemKind {
    /** The type of the item. For example "product" */
    type?: string;
    /** The origin of the item. Should be the scope the item type is related to. For example "wixstores" */
    origin?: string;
}
interface GetWishlistResponse {
    /** Object containing requested list data */
    wishlist?: WishlistData;
}
interface AddToWishlistRequest {
    /**
     * List of items to add to list
     * @minSize 1
     * @maxSize 100
     */
    items?: WishlistItem[];
}
interface AddToWishlistResponse {
}
interface RemoveFromWishlistRequest {
    /**
     * List of items to remove from list
     * @minSize 1
     * @maxSize 100
     */
    items?: WishlistItem[];
}
interface RemoveFromWishlistResponse {
}
interface GetWishlistByIdRequest {
    /**
     * Unique identifier representing requested list
     * @format GUID
     */
    _id: string;
    /**
     * List length limit. Default is 100
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /**
     * List starting index offset. Default is 0
     * @max 100
     */
    offset?: number | null;
    /** Filter requested list by specific kinds of items */
    kind?: WishlistItemKind[];
}
interface GetWishlistByIdResponse {
    /** Object containing requested list data */
    wishlist?: WishlistData;
}
interface GetWishlistsRequest {
    /**
     * List length limit. Default is 100
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /**
     * List starting index offset. Default is 0
     * @max 100
     */
    offset?: number | null;
}
interface GetWishlistsResponse {
    /** List result of requested wishlists */
    wishlists?: WishlistData[];
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface GetWishlistByIdOptions {
    /**
     * List length limit. Default is 100
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /**
     * List starting index offset. Default is 0
     * @max 100
     */
    offset?: number | null;
    /** Filter requested list by specific kinds of items */
    kind?: WishlistItemKind[];
}

export { type AddToWishlistRequest as A, type GetWishlistByIdOptions as G, type ItemsAddedToWishlist as I, type MessageEnvelope as M, type RemoveFromWishlistRequest as R, type WishlistData as W, WebhookIdentityType as a, type WishlistItem as b, type ItemsRemovedFromWishlist as c, type GetWishlistRequest as d, type WishlistItemKind as e, type GetWishlistResponse as f, type AddToWishlistResponse as g, type RemoveFromWishlistResponse as h, type GetWishlistByIdRequest as i, type GetWishlistByIdResponse as j, type GetWishlistsRequest as k, type GetWishlistsResponse as l, type IdentificationData as m, type IdentificationDataIdOneOf as n };
