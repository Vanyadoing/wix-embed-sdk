// src/stores-catalog-v1-collection-collections.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/stores-catalog-v1-collection-collections.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixCatalogApiV2CollectionReadApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores-reader/v2/collections",
        destPath: "/v2/collections"
      },
      {
        srcPath: "/stores-reader/v2/inventoryItems",
        destPath: "/v2/inventoryItems"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/wix-ecommerce-catalog-reader-web",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/stores-reader/v2/inventoryItems",
        destPath: "/v2/inventoryItems"
      },
      {
        srcPath: "/stores-reader/v2/collections",
        destPath: "/v2/collections"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_collections";
function queryCollections(payload) {
  function __queryCollections({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.collection",
      method: "POST",
      methodFqn: "wix.catalog.api.v2.CollectionReadApi.QueryCollections",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV2CollectionReadApiUrl({
        protoPath: "/v2/collections/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collections.lastUpdated" }]
        }
      ]),
      fallback: [
        {
          method: "POST",
          url: resolveWixCatalogApiV2CollectionReadApiUrl({
            protoPath: "/v2/collections/query",
            data: payload,
            host
          }),
          data: payload
        }
      ]
    };
    return metadata;
  }
  return __queryCollections;
}
function getCollection(payload) {
  function __getCollection({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.collection",
      method: "GET",
      methodFqn: "wix.catalog.api.v2.CollectionReadApi.GetCollection",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV2CollectionReadApiUrl({
        protoPath: "/v2/collections/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __getCollection;
}
function getCollectionBySlug(payload) {
  function __getCollectionBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.catalog.v1.collection",
      method: "GET",
      methodFqn: "wix.catalog.api.v2.CollectionReadApi.GetCollectionBySlug",
      packageName: PACKAGE_NAME,
      url: resolveWixCatalogApiV2CollectionReadApiUrl({
        protoPath: "/v2/collections/slug/{slug}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "collection.lastUpdated" }]
        }
      ])
    };
    return metadata;
  }
  return __getCollectionBySlug;
}

// src/stores-catalog-v1-collection-collections.universal.ts
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var MediaItemType = /* @__PURE__ */ ((MediaItemType2) => {
  MediaItemType2["unspecified_media_item_type"] = "unspecified_media_item_type";
  MediaItemType2["image"] = "image";
  MediaItemType2["video"] = "video";
  MediaItemType2["audio"] = "audio";
  MediaItemType2["document"] = "document";
  MediaItemType2["zip"] = "zip";
  return MediaItemType2;
})(MediaItemType || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
function queryCollections2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryCollections(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [])
      );
      return {
        items: transformedData?.collections,
        pagingMetadata: transformedData?.metadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "OFFSET",
    transformationPaths: {}
  });
}
async function getCollection2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getCollection(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.collection;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCollectionBySlug2(slug) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ slug });
  const reqOpts = getCollectionBySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { slug: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["slug"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-catalog-v1-collection-collections.public.ts
function queryCollections3(httpClient) {
  return () => queryCollections2(
    // @ts-ignore
    { httpClient }
  );
}
function getCollection3(httpClient) {
  return (_id) => getCollection2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function getCollectionBySlug3(httpClient) {
  return (slug) => getCollectionBySlug2(
    slug,
    // @ts-ignore
    { httpClient }
  );
}

// src/stores-catalog-v1-collection-collections.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var queryCollections4 = /* @__PURE__ */ createRESTModule(queryCollections3);
var getCollection4 = /* @__PURE__ */ createRESTModule(getCollection3);
var getCollectionBySlug4 = /* @__PURE__ */ createRESTModule(getCollectionBySlug3);
export {
  MediaItemType,
  SortOrder,
  getCollection4 as getCollection,
  getCollectionBySlug4 as getCollectionBySlug,
  queryCollections4 as queryCollections
};
//# sourceMappingURL=index.mjs.map