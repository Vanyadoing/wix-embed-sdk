import { Q as QueryCollectionsRequest$1, m as QueryCollectionsResponse$1, p as GetCollectionRequest$1, q as GetCollectionResponse$1, r as GetCollectionBySlugRequest$1, G as GetCollectionBySlugResponse$1 } from './stores-catalog-v1-collection-collections.universal-DXVGSHC4.js';

interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @minLength 35
     * @maxLength 36
     * @readonly
     */
    id?: string | null;
    /**
     * Collection name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /**
     * Collection description.
     * @maxLength 600
     */
    description?: string | null;
    /**
     * Collection slug.
     * @minLength 1
     * @maxLength 100
     */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
interface Media {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemTypeWithLiterals;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    id?: string;
}
/** @oneof */
interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
interface MediaItemUrlAndSize {
    /**
     * Media item URL.
     * @format WEB_URL
     */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    /** Image media type. */
    image = "image",
    /** Video media type. */
    video = "video",
    /** Audio media type. */
    audio = "audio",
    /** Document media type. */
    document = "document",
    /** Zip media type. */
    zip = "zip"
}
/** @enumType */
type MediaItemTypeWithLiterals = MediaItemType | 'unspecified_media_item_type' | 'image' | 'video' | 'audio' | 'document' | 'zip';
interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
interface QueryCollectionsRequest {
    query?: PlatformQuery;
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface PlatformPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface QueryCollectionsResponse {
    /** @maxSize 100 */
    collections?: Collection[];
    metadata?: PlatformPagingMetadata;
}
interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface GetCollectionRequest {
    /** Requested collection ID. */
    id: string;
}
interface GetCollectionResponse {
    collection?: Collection;
}
interface GetCollectionBySlugRequest {
    /**
     * Slug of the collection to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    slug: string;
}
interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function queryCollections(): __PublicMethodMetaInfo<'GET', {}, QueryCollectionsRequest$1, QueryCollectionsRequest, QueryCollectionsResponse$1, QueryCollectionsResponse>;
declare function getCollection(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCollectionRequest$1, GetCollectionRequest, GetCollectionResponse$1, GetCollectionResponse>;
declare function getCollectionBySlug(): __PublicMethodMetaInfo<'GET', {
    slug: string;
}, GetCollectionBySlugRequest$1, GetCollectionBySlugRequest, GetCollectionBySlugResponse$1, GetCollectionBySlugResponse>;

export { type __PublicMethodMetaInfo, getCollection, getCollectionBySlug, queryCollections };
