import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { S as SubscriptionOption, G as GetSubscriptionOptionsForProductOptions, a as GetSubscriptionOptionsForProductResponse, b as GetProductIdsForSubscriptionOptionOptions, c as GetProductIdsForSubscriptionOptionResponse, d as GetOneTimePurchasesStatusResponse, U as UpdateSubscriptionOption, B as BulkCreateSubscriptionOptionsResponse, e as BulkUpdateSubscriptionOptionsResponse, A as AssignSubscriptionOptionsToProductOptions } from './stores-v1-subscription-option-subscription-options.universal-CvhCuWKj.mjs';
export { T as AllowOneTimePurchasesRequest, V as AllowOneTimePurchasesResponse, Q as AssignSubscriptionOptionsToProductRequest, R as AssignSubscriptionOptionsToProductResponse, q as BulkCalculatePricesRequest, t as BulkCalculatePricesRequestItem, s as BulkCalculatePricesRequestV2, r as BulkCalculatePricesResponse, v as BulkCalculatePricesResponseItem, u as BulkCalculatePricesResponseV2, K as BulkCreateSubscriptionOptionsRequest, N as BulkDeleteSubscriptionOptionsRequest, O as BulkDeleteSubscriptionOptionsResponse, M as BulkUpdateSubscriptionOptionsRequest, C as CalculatePricesRequest, n as CalculatePricesResponse, z as CreateSubscriptionOptionRequest, E as CreateSubscriptionOptionResponse, I as DeleteSubscriptionOptionRequest, J as DeleteSubscriptionOptionResponse, h as Discount, D as DiscountType, y as GetOneTimePurchasesStatusRequest, w as GetProductIdsForSubscriptionOptionRequest, i as GetSubscriptionOptionRequest, j as GetSubscriptionOptionResponse, k as GetSubscriptionOptionsForProductRequest, L as ListSubscriptionOptionsRequest, m as ListSubscriptionOptionsResponse, P as Paging, x as PagingMetadata, f as SubscriptionFrequency, l as SubscriptionOptionInProduct, p as SubscriptionOptionPriceData, o as SubscriptionOptionPrices, g as SubscriptionSettings, F as UpdateSubscriptionOptionRequest, H as UpdateSubscriptionOptionResponse } from './stores-v1-subscription-option-subscription-options.universal-CvhCuWKj.mjs';

declare function getSubscriptionOption$1(httpClient: HttpClient): GetSubscriptionOptionSignature;
interface GetSubscriptionOptionSignature {
    /**
     * Retrieves a subscription option by ID.
     * @param - Subscription option ID.
     * @returns Subscription option.
     * @deprecated
     */
    (_id: string): Promise<SubscriptionOption>;
}
declare function getSubscriptionOptionsForProduct$1(httpClient: HttpClient): GetSubscriptionOptionsForProductSignature;
interface GetSubscriptionOptionsForProductSignature {
    /**
     * Retrieves all subscription options assigned to a specified product.
     * By default, hidden subscription options are not returned. To retrieve all subscription options you must pass `includeHiddenSubscriptionOptions = true`.
     * @param - Product ID.
     * @param - Options.
     * @deprecated
     */
    (productId: string, options?: GetSubscriptionOptionsForProductOptions | undefined): Promise<GetSubscriptionOptionsForProductResponse>;
}
declare function getProductIdsForSubscriptionOption$1(httpClient: HttpClient): GetProductIdsForSubscriptionOptionSignature;
interface GetProductIdsForSubscriptionOptionSignature {
    /**
     * Retrieves the IDs of products associated with a specified subscription option.
     * @param - Subscription option ID.
     * @param - Paging and other options.
     * @deprecated
     */
    (_id: string, options?: GetProductIdsForSubscriptionOptionOptions | undefined): Promise<GetProductIdsForSubscriptionOptionResponse>;
}
declare function getOneTimePurchasesStatus$1(httpClient: HttpClient): GetOneTimePurchasesStatusSignature;
interface GetOneTimePurchasesStatusSignature {
    /**
     * Checks whether a specified product (associated with subscription options) is available for one-time purchase.
     * @param - Product ID.
     * @deprecated
     */
    (productId: string): Promise<GetOneTimePurchasesStatusResponse>;
}
declare function createSubscriptionOption$1(httpClient: HttpClient): CreateSubscriptionOptionSignature;
interface CreateSubscriptionOptionSignature {
    /**
     * Creates a subscription option.
     * To assign to a product, call [`assignSubscriptionOptionsToProduct()`](https://www.wix.com/velo/reference/wix-stores-v2/subscriptionoptions/assign-subscription-options-to-product).
     * Subscription options that are not assigned to a product will not be visible in the Wix business manager.
     * @param - Subscription option info.
     * @returns Newly created subscription option.
     * @deprecated
     */
    (subscriptionOption: SubscriptionOption): Promise<SubscriptionOption>;
}
declare function updateSubscriptionOption$1(httpClient: HttpClient): UpdateSubscriptionOptionSignature;
interface UpdateSubscriptionOptionSignature {
    /**
     * Updates a subscription option.
     * Only parameters passed will be updated.
     * @param - Subscription option ID (auto-generated upon subscription option creation).
     * @param - Subscription option update options.
     * @returns Updated subscription option.
     * @deprecated
     */
    (_id: string, subscriptionOption: UpdateSubscriptionOption): Promise<SubscriptionOption>;
}
declare function deleteSubscriptionOption$1(httpClient: HttpClient): DeleteSubscriptionOptionSignature;
interface DeleteSubscriptionOptionSignature {
    /**
     * Deletes a subscription option.
     * @param - ID of the subscription option to delete.
     * @deprecated
     */
    (_id: string): Promise<void>;
}
declare function bulkCreateSubscriptionOptions$1(httpClient: HttpClient): BulkCreateSubscriptionOptionsSignature;
interface BulkCreateSubscriptionOptionsSignature {
    /**
     * Creates multiple subscription options (up to 100).
     * To assign to a product, call [`assignSubscriptionOptionsToProduct()`](https://www.wix.com/velo/reference/wix-stores-v2/subscriptionoptions/assign-subscription-options-to-product).
     * Subscription options that are not assigned to a product will not be visible in the Wix business manager.
     * @param - Subscription options info.
     * @deprecated
     */
    (subscriptionOptions: SubscriptionOption[]): Promise<BulkCreateSubscriptionOptionsResponse>;
}
declare function bulkUpdateSubscriptionOptions$1(httpClient: HttpClient): BulkUpdateSubscriptionOptionsSignature;
interface BulkUpdateSubscriptionOptionsSignature {
    /**
     * Updates multiple subscription options.
     * Only parameters passed will be updated.
     * @param - Subscription options info. Only the passed parameters in each subscription option will be updated.
     * @deprecated
     */
    (subscriptionOptions: SubscriptionOption[]): Promise<BulkUpdateSubscriptionOptionsResponse>;
}
declare function bulkDeleteSubscriptionOptions$1(httpClient: HttpClient): BulkDeleteSubscriptionOptionsSignature;
interface BulkDeleteSubscriptionOptionsSignature {
    /**
     * Deletes multiple subscription options.
     * @param - IDs of the subscription options to delete.
     * @deprecated
     */
    (ids: string[]): Promise<void>;
}
declare function assignSubscriptionOptionsToProduct$1(httpClient: HttpClient): AssignSubscriptionOptionsToProductSignature;
interface AssignSubscriptionOptionsToProductSignature {
    /**
     * Assign up to 6 subscription options to a specified product.
     * Pass an empty array to remove all subscription options assigned to a product.
     * @param - Product ID.
     * @param - Subscription option assignment options.
     * @deprecated
     */
    (productId: string, options?: AssignSubscriptionOptionsToProductOptions | undefined): Promise<void>;
}
declare function allowOneTimePurchases$1(httpClient: HttpClient): AllowOneTimePurchasesSignature;
interface AllowOneTimePurchasesSignature {
    /**
     * Allow for one-time purchase of a product.
     * By default, product can be sold only as part of a subscription, not as a one-time purchase.
     * @param - Product ID.
     * @param - Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only.
     * @deprecated
     */
    (productId: string, allowed: boolean): Promise<void>;
}

declare const getSubscriptionOption: MaybeContext<BuildRESTFunction<typeof getSubscriptionOption$1> & typeof getSubscriptionOption$1>;
declare const getSubscriptionOptionsForProduct: MaybeContext<BuildRESTFunction<typeof getSubscriptionOptionsForProduct$1> & typeof getSubscriptionOptionsForProduct$1>;
declare const getProductIdsForSubscriptionOption: MaybeContext<BuildRESTFunction<typeof getProductIdsForSubscriptionOption$1> & typeof getProductIdsForSubscriptionOption$1>;
declare const getOneTimePurchasesStatus: MaybeContext<BuildRESTFunction<typeof getOneTimePurchasesStatus$1> & typeof getOneTimePurchasesStatus$1>;
declare const createSubscriptionOption: MaybeContext<BuildRESTFunction<typeof createSubscriptionOption$1> & typeof createSubscriptionOption$1>;
declare const updateSubscriptionOption: MaybeContext<BuildRESTFunction<typeof updateSubscriptionOption$1> & typeof updateSubscriptionOption$1>;
declare const deleteSubscriptionOption: MaybeContext<BuildRESTFunction<typeof deleteSubscriptionOption$1> & typeof deleteSubscriptionOption$1>;
declare const bulkCreateSubscriptionOptions: MaybeContext<BuildRESTFunction<typeof bulkCreateSubscriptionOptions$1> & typeof bulkCreateSubscriptionOptions$1>;
declare const bulkUpdateSubscriptionOptions: MaybeContext<BuildRESTFunction<typeof bulkUpdateSubscriptionOptions$1> & typeof bulkUpdateSubscriptionOptions$1>;
declare const bulkDeleteSubscriptionOptions: MaybeContext<BuildRESTFunction<typeof bulkDeleteSubscriptionOptions$1> & typeof bulkDeleteSubscriptionOptions$1>;
declare const assignSubscriptionOptionsToProduct: MaybeContext<BuildRESTFunction<typeof assignSubscriptionOptionsToProduct$1> & typeof assignSubscriptionOptionsToProduct$1>;
declare const allowOneTimePurchases: MaybeContext<BuildRESTFunction<typeof allowOneTimePurchases$1> & typeof allowOneTimePurchases$1>;

export { AssignSubscriptionOptionsToProductOptions, BulkCreateSubscriptionOptionsResponse, BulkUpdateSubscriptionOptionsResponse, GetOneTimePurchasesStatusResponse, GetProductIdsForSubscriptionOptionOptions, GetProductIdsForSubscriptionOptionResponse, GetSubscriptionOptionsForProductOptions, GetSubscriptionOptionsForProductResponse, SubscriptionOption, UpdateSubscriptionOption, allowOneTimePurchases, assignSubscriptionOptionsToProduct, bulkCreateSubscriptionOptions, bulkDeleteSubscriptionOptions, bulkUpdateSubscriptionOptions, createSubscriptionOption, deleteSubscriptionOption, getOneTimePurchasesStatus, getProductIdsForSubscriptionOption, getSubscriptionOption, getSubscriptionOptionsForProduct, updateSubscriptionOption };
