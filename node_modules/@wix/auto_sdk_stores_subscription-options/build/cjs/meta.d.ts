import { i as GetSubscriptionOptionRequest$1, j as GetSubscriptionOptionResponse$1, k as GetSubscriptionOptionsForProductRequest$1, a as GetSubscriptionOptionsForProductResponse$1, w as GetProductIdsForSubscriptionOptionRequest$1, c as GetProductIdsForSubscriptionOptionResponse$1, y as GetOneTimePurchasesStatusRequest$1, d as GetOneTimePurchasesStatusResponse$1, z as CreateSubscriptionOptionRequest$1, E as CreateSubscriptionOptionResponse$1, F as UpdateSubscriptionOptionRequest$1, H as UpdateSubscriptionOptionResponse$1, I as DeleteSubscriptionOptionRequest$1, J as DeleteSubscriptionOptionResponse$1, K as BulkCreateSubscriptionOptionsRequest$1, B as BulkCreateSubscriptionOptionsResponse$1, M as BulkUpdateSubscriptionOptionsRequest$1, e as BulkUpdateSubscriptionOptionsResponse$1, N as BulkDeleteSubscriptionOptionsRequest$1, O as BulkDeleteSubscriptionOptionsResponse$1, Q as AssignSubscriptionOptionsToProductRequest$1, R as AssignSubscriptionOptionsToProductResponse$1, T as AllowOneTimePurchasesRequest$1, V as AllowOneTimePurchasesResponse$1 } from './stores-v1-subscription-option-subscription-options.universal-CvhCuWKj.js';

interface SubscriptionOption {
    /**
     * Subscription option ID (auto-generated upon subscription option creation).
     * @format GUID
     */
    id?: string | null;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequencyWithLiterals;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.
     * @min 2
     * @max 999
     */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface Discount {
    /** Discount type. */
    type?: DiscountTypeWithLiterals;
    /** Discount value. */
    value?: number;
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'UNDEFINED' | 'AMOUNT' | 'PERCENT';
interface GetSubscriptionOptionRequest {
    /**
     * Subscription option ID.
     * @minLength 1
     * @format GUID
     */
    id: string;
}
interface GetSubscriptionOptionResponse {
    /** Subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface GetSubscriptionOptionsForProductRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetSubscriptionOptionsForProductResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOptionInProduct[];
}
interface SubscriptionOptionInProduct {
    /**
     * Subscription option ID.
     * @format GUID
     */
    id?: string;
    /** Whether the subscription option is hidden for the product (the default is false). */
    hidden?: boolean;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     * @readonly
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     * @readonly
     */
    description?: string | null;
    /**
     * Subscription payment settings. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     * @readonly
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * @readonly
     */
    discount?: Discount;
}
interface GetProductIdsForSubscriptionOptionRequest {
    /**
     * Subscription option ID.
     * @minLength 1
     * @format GUID
     */
    id: string;
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging;
}
interface Paging {
    /**
     * Amount of items to load per page.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number | null;
}
interface GetProductIdsForSubscriptionOptionResponse {
    /** IDs of products associated with the specified subscription option. */
    productIds?: string[];
    /** Paging metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata {
    /** Amount of items to load per page. */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number;
}
interface GetOneTimePurchasesStatusRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
}
interface GetOneTimePurchasesStatusResponse {
    /** Whether the specified product is available for one-time purchase */
    allowed?: boolean;
}
interface CreateSubscriptionOptionRequest {
    /** Subscription option info. */
    subscriptionOption: SubscriptionOption;
}
interface CreateSubscriptionOptionResponse {
    /** Newly created subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface UpdateSubscriptionOptionRequest {
    /** Subscription option info. Only the passed parameters will be updated. */
    subscriptionOption: SubscriptionOption;
}
interface UpdateSubscriptionOptionResponse {
    /** Updated subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface DeleteSubscriptionOptionRequest {
    /**
     * ID of the subscription option to delete.
     * @minLength 1
     * @format GUID
     */
    id: string;
}
interface DeleteSubscriptionOptionResponse {
}
interface BulkCreateSubscriptionOptionsRequest {
    /**
     * Subscription options info.
     * @maxSize 100
     */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkCreateSubscriptionOptionsResponse {
    /** Newly created subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsRequest {
    /**
     * Subscription options info. Only the passed parameters in each subscription option will be updated.
     * @maxSize 100
     */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsResponse {
    /** Updated subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkDeleteSubscriptionOptionsRequest {
    /**
     * IDs of the subscription options to delete.
     * @maxSize 100
     * @format GUID
     */
    ids: string[];
}
interface BulkDeleteSubscriptionOptionsResponse {
}
interface AssignSubscriptionOptionsToProductRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /**
     * Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product.
     * @maxSize 6
     */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}
interface AssignSubscriptionOptionsToProductResponse {
}
interface AllowOneTimePurchasesRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /** Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only. */
    allowed: boolean | null;
}
interface AllowOneTimePurchasesResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function getSubscriptionOption(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetSubscriptionOptionRequest$1, GetSubscriptionOptionRequest, GetSubscriptionOptionResponse$1, GetSubscriptionOptionResponse>;
declare function getSubscriptionOptionsForProduct(): __PublicMethodMetaInfo<'GET', {
    productId: string;
}, GetSubscriptionOptionsForProductRequest$1, GetSubscriptionOptionsForProductRequest, GetSubscriptionOptionsForProductResponse$1, GetSubscriptionOptionsForProductResponse>;
declare function getProductIdsForSubscriptionOption(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetProductIdsForSubscriptionOptionRequest$1, GetProductIdsForSubscriptionOptionRequest, GetProductIdsForSubscriptionOptionResponse$1, GetProductIdsForSubscriptionOptionResponse>;
declare function getOneTimePurchasesStatus(): __PublicMethodMetaInfo<'GET', {
    productId: string;
}, GetOneTimePurchasesStatusRequest$1, GetOneTimePurchasesStatusRequest, GetOneTimePurchasesStatusResponse$1, GetOneTimePurchasesStatusResponse>;
declare function createSubscriptionOption(): __PublicMethodMetaInfo<'POST', {}, CreateSubscriptionOptionRequest$1, CreateSubscriptionOptionRequest, CreateSubscriptionOptionResponse$1, CreateSubscriptionOptionResponse>;
declare function updateSubscriptionOption(): __PublicMethodMetaInfo<'PATCH', {
    subscriptionOptionId: string;
}, UpdateSubscriptionOptionRequest$1, UpdateSubscriptionOptionRequest, UpdateSubscriptionOptionResponse$1, UpdateSubscriptionOptionResponse>;
declare function deleteSubscriptionOption(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteSubscriptionOptionRequest$1, DeleteSubscriptionOptionRequest, DeleteSubscriptionOptionResponse$1, DeleteSubscriptionOptionResponse>;
declare function bulkCreateSubscriptionOptions(): __PublicMethodMetaInfo<'POST', {}, BulkCreateSubscriptionOptionsRequest$1, BulkCreateSubscriptionOptionsRequest, BulkCreateSubscriptionOptionsResponse$1, BulkCreateSubscriptionOptionsResponse>;
declare function bulkUpdateSubscriptionOptions(): __PublicMethodMetaInfo<'PATCH', {}, BulkUpdateSubscriptionOptionsRequest$1, BulkUpdateSubscriptionOptionsRequest, BulkUpdateSubscriptionOptionsResponse$1, BulkUpdateSubscriptionOptionsResponse>;
declare function bulkDeleteSubscriptionOptions(): __PublicMethodMetaInfo<'POST', {}, BulkDeleteSubscriptionOptionsRequest$1, BulkDeleteSubscriptionOptionsRequest, BulkDeleteSubscriptionOptionsResponse$1, BulkDeleteSubscriptionOptionsResponse>;
declare function assignSubscriptionOptionsToProduct(): __PublicMethodMetaInfo<'POST', {
    productId: string;
}, AssignSubscriptionOptionsToProductRequest$1, AssignSubscriptionOptionsToProductRequest, AssignSubscriptionOptionsToProductResponse$1, AssignSubscriptionOptionsToProductResponse>;
declare function allowOneTimePurchases(): __PublicMethodMetaInfo<'PATCH', {
    productId: string;
}, AllowOneTimePurchasesRequest$1, AllowOneTimePurchasesRequest, AllowOneTimePurchasesResponse$1, AllowOneTimePurchasesResponse>;

export { type __PublicMethodMetaInfo, allowOneTimePurchases, assignSubscriptionOptionsToProduct, bulkCreateSubscriptionOptions, bulkDeleteSubscriptionOptions, bulkUpdateSubscriptionOptions, createSubscriptionOption, deleteSubscriptionOption, getOneTimePurchasesStatus, getProductIdsForSubscriptionOption, getSubscriptionOption, getSubscriptionOptionsForProduct, updateSubscriptionOption };
