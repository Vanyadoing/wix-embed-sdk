"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// meta.ts
var meta_exports = {};
__export(meta_exports, {
  allowOneTimePurchases: () => allowOneTimePurchases2,
  assignSubscriptionOptionsToProduct: () => assignSubscriptionOptionsToProduct2,
  bulkCreateSubscriptionOptions: () => bulkCreateSubscriptionOptions2,
  bulkDeleteSubscriptionOptions: () => bulkDeleteSubscriptionOptions2,
  bulkUpdateSubscriptionOptions: () => bulkUpdateSubscriptionOptions2,
  createSubscriptionOption: () => createSubscriptionOption2,
  deleteSubscriptionOption: () => deleteSubscriptionOption2,
  getOneTimePurchasesStatus: () => getOneTimePurchasesStatus2,
  getProductIdsForSubscriptionOption: () => getProductIdsForSubscriptionOption2,
  getSubscriptionOption: () => getSubscriptionOption2,
  getSubscriptionOptionsForProduct: () => getSubscriptionOptionsForProduct2,
  updateSubscriptionOption: () => updateSubscriptionOption2
});
module.exports = __toCommonJS(meta_exports);

// src/stores-v1-subscription-option-subscription-options.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-plans",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/subscription-options",
        destPath: "/v1/subscription-options"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
function resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-plans-reader",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/wix-ecommerce-plans-reader",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/subscription-options-reader-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/subscription-options-reader-server",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_subscription-options";
function getSubscriptionOption(payload) {
  function __getSubscriptionOption({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        { protoPath: "/v1/subscription-options/{id}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOption.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __getSubscriptionOption;
}
function getSubscriptionOptionsForProduct(payload) {
  function __getSubscriptionOptionsForProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetSubscriptionOptionsForProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        {
          protoPath: "/v1/subscription-options/byProduct/{productId}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOptions.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __getSubscriptionOptionsForProduct;
}
function getProductIdsForSubscriptionOption(payload) {
  function __getProductIdsForSubscriptionOption({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetProductIdsForSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        {
          protoPath: "/v1/subscription-options/{id}/productIds",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getProductIdsForSubscriptionOption;
}
function getOneTimePurchasesStatus(payload) {
  function __getOneTimePurchasesStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetOneTimePurchasesStatus",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        {
          protoPath: "/v1/subscription-options/product/{productId}/oneTimePurchasesStatus",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getOneTimePurchasesStatus;
}
function createSubscriptionOption(payload) {
  function __createSubscriptionOption({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOption.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.CreateSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        { protoPath: "/v1/subscription-options", data: serializedData, host }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOption.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __createSubscriptionOption;
}
function updateSubscriptionOption(payload) {
  function __updateSubscriptionOption({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOption.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "PATCH",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.UpdateSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/{subscriptionOption.id}",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOption.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __updateSubscriptionOption;
}
function deleteSubscriptionOption(payload) {
  function __deleteSubscriptionOption({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "DELETE",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.DeleteSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        { protoPath: "/v1/subscription-options/{id}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteSubscriptionOption;
}
function bulkCreateSubscriptionOptions(payload) {
  function __bulkCreateSubscriptionOptions({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOptions.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkCreateSubscriptionOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/createBulk",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOptions.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateSubscriptionOptions;
}
function bulkUpdateSubscriptionOptions(payload) {
  function __bulkUpdateSubscriptionOptions({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOptions.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "PATCH",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkUpdateSubscriptionOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        { protoPath: "/v1/subscription-options", data: serializedData, host }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOptions.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateSubscriptionOptions;
}
function bulkDeleteSubscriptionOptions(payload) {
  function __bulkDeleteSubscriptionOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkDeleteSubscriptionOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/deleteBulk",
          data: payload,
          host
        }
      ),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteSubscriptionOptions;
}
function assignSubscriptionOptionsToProduct(payload) {
  function __assignSubscriptionOptionsToProduct({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "assignedSubscriptionOptions.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.AssignSubscriptionOptionsToProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/product/{productId}/assign",
          data: serializedData,
          host
        }
      ),
      data: serializedData
    };
    return metadata;
  }
  return __assignSubscriptionOptionsToProduct;
}
function allowOneTimePurchases(payload) {
  function __allowOneTimePurchases({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "PATCH",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.AllowOneTimePurchases",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/product/{productId}/allowOneTimePurchase",
          data: payload,
          host
        }
      ),
      data: payload
    };
    return metadata;
  }
  return __allowOneTimePurchases;
}

// src/stores-v1-subscription-option-subscription-options.meta.ts
function getSubscriptionOption2() {
  const payload = { id: ":id" };
  const getRequestOptions = getSubscriptionOption(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/subscription-options/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getSubscriptionOptionsForProduct2() {
  const payload = { productId: ":productId" };
  const getRequestOptions = getSubscriptionOptionsForProduct(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/subscription-options/byProduct/{productId}",
    pathParams: { productId: "productId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getProductIdsForSubscriptionOption2() {
  const payload = { id: ":id" };
  const getRequestOptions = getProductIdsForSubscriptionOption(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/subscription-options/{id}/productIds",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function getOneTimePurchasesStatus2() {
  const payload = { productId: ":productId" };
  const getRequestOptions = getOneTimePurchasesStatus(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "GET",
    path: "/v1/subscription-options/product/{productId}/oneTimePurchasesStatus",
    pathParams: { productId: "productId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function createSubscriptionOption2() {
  const payload = {};
  const getRequestOptions = createSubscriptionOption(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/subscription-options",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function updateSubscriptionOption2() {
  const payload = {
    subscriptionOption: { id: ":subscriptionOptionId" }
  };
  const getRequestOptions = updateSubscriptionOption(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/subscription-options/{subscriptionOption.id}",
    pathParams: { subscriptionOptionId: "subscriptionOptionId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function deleteSubscriptionOption2() {
  const payload = { id: ":id" };
  const getRequestOptions = deleteSubscriptionOption(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "DELETE",
    path: "/v1/subscription-options/{id}",
    pathParams: { id: "id" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkCreateSubscriptionOptions2() {
  const payload = {};
  const getRequestOptions = bulkCreateSubscriptionOptions(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/subscription-options/createBulk",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkUpdateSubscriptionOptions2() {
  const payload = {};
  const getRequestOptions = bulkUpdateSubscriptionOptions(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/subscription-options",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function bulkDeleteSubscriptionOptions2() {
  const payload = {};
  const getRequestOptions = bulkDeleteSubscriptionOptions(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/subscription-options/deleteBulk",
    pathParams: {},
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function assignSubscriptionOptionsToProduct2() {
  const payload = { productId: ":productId" };
  const getRequestOptions = assignSubscriptionOptionsToProduct(
    payload
  );
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "POST",
    path: "/v1/subscription-options/product/{productId}/assign",
    pathParams: { productId: "productId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
function allowOneTimePurchases2() {
  const payload = { productId: ":productId" };
  const getRequestOptions = allowOneTimePurchases(payload);
  const getUrl = (context) => {
    const { url } = getRequestOptions(context);
    return url;
  };
  return {
    getUrl,
    httpMethod: "PATCH",
    path: "/v1/subscription-options/product/{productId}/allowOneTimePurchase",
    pathParams: { productId: "productId" },
    __requestType: null,
    __originalRequestType: null,
    __responseType: null,
    __originalResponseType: null
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  allowOneTimePurchases,
  assignSubscriptionOptionsToProduct,
  bulkCreateSubscriptionOptions,
  bulkDeleteSubscriptionOptions,
  bulkUpdateSubscriptionOptions,
  createSubscriptionOption,
  deleteSubscriptionOption,
  getOneTimePurchasesStatus,
  getProductIdsForSubscriptionOption,
  getSubscriptionOption,
  getSubscriptionOptionsForProduct,
  updateSubscriptionOption
});
//# sourceMappingURL=meta.js.map