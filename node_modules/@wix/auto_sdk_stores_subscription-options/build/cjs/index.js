"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  DiscountType: () => DiscountType,
  SubscriptionFrequency: () => SubscriptionFrequency,
  allowOneTimePurchases: () => allowOneTimePurchases4,
  assignSubscriptionOptionsToProduct: () => assignSubscriptionOptionsToProduct4,
  bulkCreateSubscriptionOptions: () => bulkCreateSubscriptionOptions4,
  bulkDeleteSubscriptionOptions: () => bulkDeleteSubscriptionOptions4,
  bulkUpdateSubscriptionOptions: () => bulkUpdateSubscriptionOptions4,
  createSubscriptionOption: () => createSubscriptionOption4,
  deleteSubscriptionOption: () => deleteSubscriptionOption4,
  getOneTimePurchasesStatus: () => getOneTimePurchasesStatus4,
  getProductIdsForSubscriptionOption: () => getProductIdsForSubscriptionOption4,
  getSubscriptionOption: () => getSubscriptionOption4,
  getSubscriptionOptionsForProduct: () => getSubscriptionOptionsForProduct4,
  updateSubscriptionOption: () => updateSubscriptionOption4
});
module.exports = __toCommonJS(index_exports);

// src/stores-v1-subscription-option-subscription-options.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/stores-v1-subscription-option-subscription-options.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-plans",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/stores/v1/subscription-options",
        destPath: "/v1/subscription-options"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/subscription-options-server",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
function resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-ecommerce-plans-reader",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/wix-ecommerce-plans-reader",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/subscription-options-reader-server",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/subscription-options-reader-server",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_stores_subscription-options";
function getSubscriptionOption(payload) {
  function __getSubscriptionOption({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        { protoPath: "/v1/subscription-options/{id}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOption.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __getSubscriptionOption;
}
function getSubscriptionOptionsForProduct(payload) {
  function __getSubscriptionOptionsForProduct({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetSubscriptionOptionsForProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        {
          protoPath: "/v1/subscription-options/byProduct/{productId}",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOptions.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __getSubscriptionOptionsForProduct;
}
function getProductIdsForSubscriptionOption(payload) {
  function __getProductIdsForSubscriptionOption({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetProductIdsForSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        {
          protoPath: "/v1/subscription-options/{id}/productIds",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getProductIdsForSubscriptionOption;
}
function getOneTimePurchasesStatus(payload) {
  function __getOneTimePurchasesStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "GET",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetOneTimePurchasesStatus",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsReadApiUrl(
        {
          protoPath: "/v1/subscription-options/product/{productId}/oneTimePurchasesStatus",
          data: payload,
          host
        }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getOneTimePurchasesStatus;
}
function createSubscriptionOption(payload) {
  function __createSubscriptionOption({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOption.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.CreateSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        { protoPath: "/v1/subscription-options", data: serializedData, host }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOption.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __createSubscriptionOption;
}
function updateSubscriptionOption(payload) {
  function __updateSubscriptionOption({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOption.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "PATCH",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.UpdateSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/{subscriptionOption.id}",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOption.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __updateSubscriptionOption;
}
function deleteSubscriptionOption(payload) {
  function __deleteSubscriptionOption({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "DELETE",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.DeleteSubscriptionOption",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        { protoPath: "/v1/subscription-options/{id}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteSubscriptionOption;
}
function bulkCreateSubscriptionOptions(payload) {
  function __bulkCreateSubscriptionOptions({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOptions.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkCreateSubscriptionOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/createBulk",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOptions.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __bulkCreateSubscriptionOptions;
}
function bulkUpdateSubscriptionOptions(payload) {
  function __bulkUpdateSubscriptionOptions({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "subscriptionOptions.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "PATCH",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkUpdateSubscriptionOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        { protoPath: "/v1/subscription-options", data: serializedData, host }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [{ path: "subscriptionOptions.discount.value" }]
        }
      ])
    };
    return metadata;
  }
  return __bulkUpdateSubscriptionOptions;
}
function bulkDeleteSubscriptionOptions(payload) {
  function __bulkDeleteSubscriptionOptions({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkDeleteSubscriptionOptions",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/deleteBulk",
          data: payload,
          host
        }
      ),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteSubscriptionOptions;
}
function assignSubscriptionOptionsToProduct(payload) {
  function __assignSubscriptionOptionsToProduct({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [{ path: "assignedSubscriptionOptions.discount.value" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "POST",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.AssignSubscriptionOptionsToProduct",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/product/{productId}/assign",
          data: serializedData,
          host
        }
      ),
      data: serializedData
    };
    return metadata;
  }
  return __assignSubscriptionOptionsToProduct;
}
function allowOneTimePurchases(payload) {
  function __allowOneTimePurchases({ host }) {
    const metadata = {
      entityFqdn: "wix.stores.v1.subscription_option",
      method: "PATCH",
      methodFqn: "wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.AllowOneTimePurchases",
      packageName: PACKAGE_NAME,
      url: resolveWixEcommerceSubscriptionOptionApiV1SubscriptionOptionsWriteApiUrl(
        {
          protoPath: "/v1/subscription-options/product/{productId}/allowOneTimePurchase",
          data: payload,
          host
        }
      ),
      data: payload
    };
    return metadata;
  }
  return __allowOneTimePurchases;
}

// src/stores-v1-subscription-option-subscription-options.universal.ts
var SubscriptionFrequency = /* @__PURE__ */ ((SubscriptionFrequency2) => {
  SubscriptionFrequency2["UNDEFINED"] = "UNDEFINED";
  SubscriptionFrequency2["DAY"] = "DAY";
  SubscriptionFrequency2["WEEK"] = "WEEK";
  SubscriptionFrequency2["MONTH"] = "MONTH";
  SubscriptionFrequency2["YEAR"] = "YEAR";
  return SubscriptionFrequency2;
})(SubscriptionFrequency || {});
var DiscountType = /* @__PURE__ */ ((DiscountType2) => {
  DiscountType2["UNDEFINED"] = "UNDEFINED";
  DiscountType2["AMOUNT"] = "AMOUNT";
  DiscountType2["PERCENT"] = "PERCENT";
  return DiscountType2;
})(DiscountType || {});
async function getSubscriptionOption2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = getSubscriptionOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.subscriptionOption;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getSubscriptionOptionsForProduct2(productId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    productId,
    includeHiddenSubscriptionOptions: options?.includeHiddenSubscriptionOptions
  });
  const reqOpts = getSubscriptionOptionsForProduct(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          productId: "$[0]",
          includeHiddenSubscriptionOptions: "$[1].includeHiddenSubscriptionOptions"
        },
        singleArgumentUnchanged: false
      },
      ["productId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getProductIdsForSubscriptionOption2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    includeHiddenProducts: options?.includeHiddenProducts,
    paging: options?.paging
  });
  const reqOpts = getProductIdsForSubscriptionOption(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          includeHiddenProducts: "$[1].includeHiddenProducts",
          paging: "$[1].paging"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getOneTimePurchasesStatus2(productId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    productId
  });
  const reqOpts = getOneTimePurchasesStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { productId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["productId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createSubscriptionOption2(subscriptionOption) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    subscriptionOption
  });
  const reqOpts = createSubscriptionOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.subscriptionOption;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { subscriptionOption: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["subscriptionOption"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateSubscriptionOption2(_id, subscriptionOption) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    subscriptionOption: { ...subscriptionOption, id: _id }
  });
  const reqOpts = updateSubscriptionOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.subscriptionOption;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { subscriptionOption: "$[1]" },
        explicitPathsToArguments: { "subscriptionOption.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "subscriptionOption"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteSubscriptionOption2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteSubscriptionOption(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkCreateSubscriptionOptions2(subscriptionOptions) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    subscriptionOptions
  });
  const reqOpts = bulkCreateSubscriptionOptions(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { subscriptionOptions: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["subscriptionOptions"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkUpdateSubscriptionOptions2(subscriptionOptions) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    subscriptionOptions
  });
  const reqOpts = bulkUpdateSubscriptionOptions(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { subscriptionOptions: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["subscriptionOptions"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteSubscriptionOptions2(ids) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ ids });
  const reqOpts = bulkDeleteSubscriptionOptions(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { ids: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["ids"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function assignSubscriptionOptionsToProduct2(productId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    productId,
    assignedSubscriptionOptions: options?.assignedSubscriptionOptions
  });
  const reqOpts = assignSubscriptionOptionsToProduct(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          productId: "$[0]",
          assignedSubscriptionOptions: "$[1].assignedSubscriptionOptions"
        },
        singleArgumentUnchanged: false
      },
      ["productId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function allowOneTimePurchases2(productId, allowed) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    productId,
    allowed
  });
  const reqOpts = allowOneTimePurchases(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { productId: "$[0]", allowed: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["productId", "allowed"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/stores-v1-subscription-option-subscription-options.public.ts
function getSubscriptionOption3(httpClient) {
  return (_id) => getSubscriptionOption2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function getSubscriptionOptionsForProduct3(httpClient) {
  return (productId, options) => getSubscriptionOptionsForProduct2(
    productId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getProductIdsForSubscriptionOption3(httpClient) {
  return (_id, options) => getProductIdsForSubscriptionOption2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getOneTimePurchasesStatus3(httpClient) {
  return (productId) => getOneTimePurchasesStatus2(
    productId,
    // @ts-ignore
    { httpClient }
  );
}
function createSubscriptionOption3(httpClient) {
  return (subscriptionOption) => createSubscriptionOption2(
    subscriptionOption,
    // @ts-ignore
    { httpClient }
  );
}
function updateSubscriptionOption3(httpClient) {
  return (_id, subscriptionOption) => updateSubscriptionOption2(
    _id,
    subscriptionOption,
    // @ts-ignore
    { httpClient }
  );
}
function deleteSubscriptionOption3(httpClient) {
  return (_id) => deleteSubscriptionOption2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function bulkCreateSubscriptionOptions3(httpClient) {
  return (subscriptionOptions) => bulkCreateSubscriptionOptions2(
    subscriptionOptions,
    // @ts-ignore
    { httpClient }
  );
}
function bulkUpdateSubscriptionOptions3(httpClient) {
  return (subscriptionOptions) => bulkUpdateSubscriptionOptions2(
    subscriptionOptions,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteSubscriptionOptions3(httpClient) {
  return (ids) => bulkDeleteSubscriptionOptions2(
    ids,
    // @ts-ignore
    { httpClient }
  );
}
function assignSubscriptionOptionsToProduct3(httpClient) {
  return (productId, options) => assignSubscriptionOptionsToProduct2(
    productId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function allowOneTimePurchases3(httpClient) {
  return (productId, allowed) => allowOneTimePurchases2(
    productId,
    allowed,
    // @ts-ignore
    { httpClient }
  );
}

// src/stores-v1-subscription-option-subscription-options.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var getSubscriptionOption4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getSubscriptionOption3);
var getSubscriptionOptionsForProduct4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getSubscriptionOptionsForProduct3);
var getProductIdsForSubscriptionOption4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getProductIdsForSubscriptionOption3);
var getOneTimePurchasesStatus4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getOneTimePurchasesStatus3);
var createSubscriptionOption4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createSubscriptionOption3);
var updateSubscriptionOption4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateSubscriptionOption3);
var deleteSubscriptionOption4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteSubscriptionOption3);
var bulkCreateSubscriptionOptions4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkCreateSubscriptionOptions3);
var bulkUpdateSubscriptionOptions4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkUpdateSubscriptionOptions3);
var bulkDeleteSubscriptionOptions4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkDeleteSubscriptionOptions3);
var assignSubscriptionOptionsToProduct4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(assignSubscriptionOptionsToProduct3);
var allowOneTimePurchases4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(allowOneTimePurchases3);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DiscountType,
  SubscriptionFrequency,
  allowOneTimePurchases,
  assignSubscriptionOptionsToProduct,
  bulkCreateSubscriptionOptions,
  bulkDeleteSubscriptionOptions,
  bulkUpdateSubscriptionOptions,
  createSubscriptionOption,
  deleteSubscriptionOption,
  getOneTimePurchasesStatus,
  getProductIdsForSubscriptionOption,
  getSubscriptionOption,
  getSubscriptionOptionsForProduct,
  updateSubscriptionOption
});
//# sourceMappingURL=index.js.map