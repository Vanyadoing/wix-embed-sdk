interface SubscriptionOption {
    /**
     * Subscription option ID (auto-generated upon subscription option creation).
     * @format GUID
     */
    _id?: string | null;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequencyWithLiterals;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.
     * @min 2
     * @max 999
     */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** @enumType */
type SubscriptionFrequencyWithLiterals = SubscriptionFrequency | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
interface Discount {
    /** Discount type. */
    type?: DiscountTypeWithLiterals;
    /** Discount value. */
    value?: number;
}
declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
/** @enumType */
type DiscountTypeWithLiterals = DiscountType | 'UNDEFINED' | 'AMOUNT' | 'PERCENT';
interface GetSubscriptionOptionRequest {
    /**
     * Subscription option ID.
     * @minLength 1
     * @format GUID
     */
    _id: string;
}
interface GetSubscriptionOptionResponse {
    /** Subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface GetSubscriptionOptionsForProductRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetSubscriptionOptionsForProductResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOptionInProduct[];
}
interface SubscriptionOptionInProduct {
    /**
     * Subscription option ID.
     * @format GUID
     */
    _id?: string;
    /** Whether the subscription option is hidden for the product (the default is false). */
    hidden?: boolean;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     * @readonly
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     * @readonly
     */
    description?: string | null;
    /**
     * Subscription payment settings. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     * @readonly
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * @readonly
     */
    discount?: Discount;
}
interface ListSubscriptionOptionsRequest {
    /**
     * Subscription option IDs.
     * @format GUID
     * @maxSize 100
     */
    ids?: string[];
}
interface ListSubscriptionOptionsResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface CalculatePricesRequest {
    /** original price to which subscription options discount will be applied */
    price?: number;
    /**
     * ids of subscription options which will be applied to original price
     * @format GUID
     * @maxSize 100
     */
    ids?: string[];
}
interface CalculatePricesResponse {
    /** array of calculated prices */
    prices?: SubscriptionOptionPrices[];
    /** price to which subscription options discount applied */
    originalPrice?: number;
}
interface SubscriptionOptionPrices {
    /** Subscription option id */
    _id?: string;
    /** Price data calculated for subscription option */
    priceData?: SubscriptionOptionPriceData;
    /** Price data calculated for subscription option, converted to the currency requested in request header */
    convertedPriceData?: SubscriptionOptionPriceData;
}
interface SubscriptionOptionPriceData {
    /** Subscription option price currency */
    currency?: string;
    /** Price calculated after subscription option discount applied */
    discountedPrice?: number;
    /** Price calculated after subscription option discount applied, formatted with the currency */
    formattedDiscountedPrice?: string;
}
interface BulkCalculatePricesRequest {
    /**
     * Original prices to which subscription options discount will be applied.
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * @maxSize 1001
     */
    prices?: Record<string, number>;
    /**
     * ids of subscription options which will be applied to original price
     * @format GUID
     * @maxSize 100
     */
    ids?: string[];
}
interface BulkCalculatePricesResponse {
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option
     */
    calculatedPrices?: Record<string, CalculatePricesResponse>;
}
interface BulkCalculatePricesRequestV2 {
    /**
     * Original prices to be calculated for each corresponding product id with related subscription plan ids
     * @maxSize 100
     */
    items?: BulkCalculatePricesRequestItem[];
}
interface BulkCalculatePricesRequestItem {
    /**
     * Calculation id (product id)
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /**
     * Original prices to which subscription options discount will be applied.
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * @maxSize 1001
     */
    prices?: Record<string, number>;
    /**
     * ids of subscription options which will be applied to original price.
     * @format GUID
     * @maxSize 100
     */
    subscriptionOptionIds?: string[];
}
interface BulkCalculatePricesResponseV2 {
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option for each product
     */
    calculatedPricesPerProduct?: BulkCalculatePricesResponseItem[];
}
interface BulkCalculatePricesResponseItem {
    /**
     * Calculation id (product id)
     * @minLength 1
     */
    _id?: string;
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option
     */
    calculatedPrices?: Record<string, CalculatePricesResponse>;
}
interface GetProductIdsForSubscriptionOptionRequest {
    /**
     * Subscription option ID.
     * @minLength 1
     * @format GUID
     */
    _id: string;
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging;
}
interface Paging {
    /**
     * Amount of items to load per page.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number | null;
}
interface GetProductIdsForSubscriptionOptionResponse {
    /** IDs of products associated with the specified subscription option. */
    productIds?: string[];
    /** Paging metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
interface PagingMetadata {
    /** Amount of items to load per page. */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number;
}
interface GetOneTimePurchasesStatusRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
}
interface GetOneTimePurchasesStatusResponse {
    /** Whether the specified product is available for one-time purchase */
    allowed?: boolean;
}
interface CreateSubscriptionOptionRequest {
    /** Subscription option info. */
    subscriptionOption: SubscriptionOption;
}
interface CreateSubscriptionOptionResponse {
    /** Newly created subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface UpdateSubscriptionOptionRequest {
    /** Subscription option info. Only the passed parameters will be updated. */
    subscriptionOption: SubscriptionOption;
}
interface UpdateSubscriptionOptionResponse {
    /** Updated subscription option. */
    subscriptionOption?: SubscriptionOption;
}
interface DeleteSubscriptionOptionRequest {
    /**
     * ID of the subscription option to delete.
     * @minLength 1
     * @format GUID
     */
    _id: string;
}
interface DeleteSubscriptionOptionResponse {
}
interface BulkCreateSubscriptionOptionsRequest {
    /**
     * Subscription options info.
     * @maxSize 100
     */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkCreateSubscriptionOptionsResponse {
    /** Newly created subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsRequest {
    /**
     * Subscription options info. Only the passed parameters in each subscription option will be updated.
     * @maxSize 100
     */
    subscriptionOptions: SubscriptionOption[];
}
interface BulkUpdateSubscriptionOptionsResponse {
    /** Updated subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
interface BulkDeleteSubscriptionOptionsRequest {
    /**
     * IDs of the subscription options to delete.
     * @maxSize 100
     * @format GUID
     */
    ids: string[];
}
interface BulkDeleteSubscriptionOptionsResponse {
}
interface AssignSubscriptionOptionsToProductRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /**
     * Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product.
     * @maxSize 6
     */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}
interface AssignSubscriptionOptionsToProductResponse {
}
interface AllowOneTimePurchasesRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /** Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only. */
    allowed: boolean | null;
}
interface AllowOneTimePurchasesResponse {
}
interface GetSubscriptionOptionsForProductOptions {
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
interface GetProductIdsForSubscriptionOptionOptions {
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging;
}
interface UpdateSubscriptionOption {
    /**
     * Subscription option ID (auto-generated upon subscription option creation).
     * @format GUID
     */
    _id?: string | null;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
interface AssignSubscriptionOptionsToProductOptions {
    /**
     * Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product.
     * @maxSize 6
     */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}

export { type AssignSubscriptionOptionsToProductOptions as A, type BulkCreateSubscriptionOptionsResponse as B, type CalculatePricesRequest as C, DiscountType as D, type CreateSubscriptionOptionResponse as E, type UpdateSubscriptionOptionRequest as F, type GetSubscriptionOptionsForProductOptions as G, type UpdateSubscriptionOptionResponse as H, type DeleteSubscriptionOptionRequest as I, type DeleteSubscriptionOptionResponse as J, type BulkCreateSubscriptionOptionsRequest as K, type ListSubscriptionOptionsRequest as L, type BulkUpdateSubscriptionOptionsRequest as M, type BulkDeleteSubscriptionOptionsRequest as N, type BulkDeleteSubscriptionOptionsResponse as O, type Paging as P, type AssignSubscriptionOptionsToProductRequest as Q, type AssignSubscriptionOptionsToProductResponse as R, type SubscriptionOption as S, type AllowOneTimePurchasesRequest as T, type UpdateSubscriptionOption as U, type AllowOneTimePurchasesResponse as V, type GetSubscriptionOptionsForProductResponse as a, type GetProductIdsForSubscriptionOptionOptions as b, type GetProductIdsForSubscriptionOptionResponse as c, type GetOneTimePurchasesStatusResponse as d, type BulkUpdateSubscriptionOptionsResponse as e, SubscriptionFrequency as f, type SubscriptionSettings as g, type Discount as h, type GetSubscriptionOptionRequest as i, type GetSubscriptionOptionResponse as j, type GetSubscriptionOptionsForProductRequest as k, type SubscriptionOptionInProduct as l, type ListSubscriptionOptionsResponse as m, type CalculatePricesResponse as n, type SubscriptionOptionPrices as o, type SubscriptionOptionPriceData as p, type BulkCalculatePricesRequest as q, type BulkCalculatePricesResponse as r, type BulkCalculatePricesRequestV2 as s, type BulkCalculatePricesRequestItem as t, type BulkCalculatePricesResponseV2 as u, type BulkCalculatePricesResponseItem as v, type GetProductIdsForSubscriptionOptionRequest as w, type PagingMetadata as x, type GetOneTimePurchasesStatusRequest as y, type CreateSubscriptionOptionRequest as z };
